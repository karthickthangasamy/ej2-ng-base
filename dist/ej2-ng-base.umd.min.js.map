/*!
*  filename: ej2-ng-base.umd.min.js.map
*  version : 1.0.25
*  Copyright Syncfusion Inc. 2001 - 2017. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
*/

{"version":3,"sources":["ej2-ng-base.umd.js"],"names":["root","factory","exports","module","require","define","amd","a","i","this","__WEBPACK_EXTERNAL_MODULE_2__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","complex_array_base_1","component_base_1","form_base_1","util_1","template_1","__export","hasOwnProperty","Object","defineProperty","value","apply","ej2_base_1","ComplexBase","hasChanges","propCollection","tags","tagObjects","prototype","ngOnInit","registeredTemplate","_i","_a","length","tag","objInstance","getValue","substring","toUpperCase","push","instance","name","templateProperties","keys","filter","val","test","_b","templateProperties_1","tempName","propName","replace","setValue","ngOnChanges","changes","changedVal","currentValue","clearTemplate","templateNames","getProperties","tagObject","isChanged","result","item","ngAfterContentChecked","ngAfterViewChecked","ArrayBase","propertyName","list","isInitChanges","ngAfterContentInit","_this","index","children","map","child","property","onlyProp","RegExp","ngAfterViewInit","applyMixins","derivedClass","baseClass","forEach","getOwnPropertyNames","regTemplates","regProperties","_c","rt","destroyed","destroy","_d","_e","nameSpace","object","split","fromObj","key","core_1","ComponentBase","ngBoundedEvents","complexTemplate","complexTemplates","complexTemplates_1","setProperties","setTimeout","appendTo","element","ngOnDestroy","isUndefined","propObj","curIndex","indexOf","registerEvents","eventList","ngEventsEmitter","eventList_1","EventEmitter","addTwoWay","propList","this_1","propList_1","prop","get","properties","set","newVal","oldVal","saveChanges","isNullOrUndefined","emit","addEventListener","eventName","handler","eventObj","Map","subscribe","removeEventListener","unsubscribe","trigger","eventArgs","next","localEventObj","charAt","slice","global","rxjs_Observable","rxjs_observable_merge","rxjs_operator_share","rxjs_Subject","__extends","d","b","__","constructor","extendStatics","create","getSymbolIterator","_symbolIterator","Symbol","_global","iterator","scheduleMicroTask","fn","Zone","current","looseIdentical","isNaN","stringify","token","overriddenName","res","toString","newLineIndex","extractAnnotation","annotation","applyParams","fnOrArray","String","Function","Number","Array","Error","isArray","annotations","annoLength","paramsAnnotations","ii","paramAnnotations","j","Reflect$1","defineMetadata","Class","clsDef","proto","extends","constructorName","_nextClassId","makeDecorator","props","parentClass","chainFn","DecoratorFactory","objOrType","getOwnMetadata","metaCtor","annotationInstance","chainAnnotation","TypeDecorator","cls","makeMetadataCtor","annotationCls","args","arguments","values","makeParamDecorator","ParamDecoratorFactory","ParamDecorator","unusedKey","parameters","bind","concat","makePropDecorator","PropDecoratorFactory","decoratorInstance","target","meta","unshift","isDefaultChangeDetectionStrategy","changeDetectionStrategy","ChangeDetectionStrategy","Default","forwardRef","forwardRefFn","__forward_ref__","resolveForwardRef","type","getDebugContext","error","ERROR_DEBUG_CONTEXT","getOriginalError","ERROR_ORIGINAL_ERROR","getErrorLogger","ERROR_LOGGER","defaultErrorLogger","console","wrappedError","message","originalError","msg","findFirstClosedCycle","constructResolvingPath","reverse","k","join","injectionError","injector","constructResolvingMessage","errMsg","addKey","injectors","noProviderError","cyclicDependencyError","instantiationError","originalException","originalStack","first","invalidProviderError","provider","noAnnotationError","typeOrFunc","params","signature","parameter","outOfBoundsError","mixingMultiProvidersWithRegularProvidersError","provider1","provider2","isType","v","convertTsickleDecoratorIntoMetadata","decoratorInvocations","decoratorInvocation","decoratorType","annotationArgs","getParentCtor","ctor","parentProto","getPrototypeOf","resolveReflectiveFactory","factoryFn","resolvedDeps","useClass","reflector","_dependenciesFor","useExisting","aliasInstance","ReflectiveDependency","fromKey","ReflectiveKey","useFactory","constructDependencies","deps","useValue","_EMPTY_LIST","ResolvedReflectiveFactory","resolveReflectiveProvider","ResolvedReflectiveProvider_","provide","multi","resolveReflectiveProviders","providers","normalized","_normalizeProviders","resolved","resolvedProviderMap","mergeResolvedReflectiveProviders","from","normalizedProvidersMap","existing","multiProvider","resolvedFactories","resolvedProvider","Type","dependencies","params_1","t","_extractToken","some","metadata","optional","Inject","_createDependency","visibility","paramMetadata","Optional","Self","SkipSelf","InjectionToken","_mapProviders","_providers","getProviderAtIndex","isPromise","obj","then","isObservable","_appIdRandomProviderFactory","_randomChar","fromCharCode","Math","floor","random","_throwError","noComponentFactoryError","component","ERROR_COMPONENT","detectWTF","wtf","trace","events","createScope$1","flags","createScope","leave","scope","returnValue","leaveScope","startTimeRange","rangeType","action","beginTimeRange","endTimeRange","range","noopScope","arg0","arg1","checkStable","zone","_nesting","hasPendingMicrotasks","isStable","onMicrotaskEmpty","runOutsideAngular","onStable","forkInnerZoneWithAngularBehavior","_inner","fork","isAngularZone","onInvokeTask","delegate","task","applyThis","applyArgs","onEnter","invokeTask","onLeave","onInvoke","callback","source","invoke","onHasTask","hasTaskState","hasTask","change","microTask","hasPendingMacrotasks","macroTask","onHandleError","handleError","onError","onUnstable","setTestabilityGetter","getter","_testabilityGetter","enableProdMode","_runModeLocked","_devMode","isDevMode","createPlatform","_platform","ALLOW_MULTIPLE_PLATFORMS","PlatformRef","inits","PLATFORM_INITIALIZER","init","createPlatformFactory","parentPlatformFactory","marker","extraProviders","platform","getPlatform","ReflectiveInjector","resolveAndCreate","assertPlatform","requiredToken","destroyPlatform","_callAndReportToErrorHandler","errorHandler","ngZone","catch","e","remove","el","splice","registerModuleFactory","moduleFactories","moduleType","getModuleFactory","flatten","reduce","flat","flatItem","checkNotEmpty","modulePath","exportName","asNativeElements","debugEls","nativeElement","_queryElementChildren","predicate","matches","childNodes","node","DebugElement","_queryNodeChildren","parentNode","getDebugNode","nativeNode","_nativeNodeToDebugNode","indexDebugNode","removeDebugNodeFromIndex","delete","devModeEqual","isListLikeIterableA","isListLikeIterable","isListLikeIterableB","areIterablesEqual","isAObject","isBObject","isJsObject","comparator","iterator1","iterator2","item1","item2","done","iterateListLike","o","getPreviousIndex","addRemoveOffset","moveOffsets","previousIndex","moveOffset","getTypeNameForDebugging","_reflector","_iterableDiffersFactory","defaultIterableDiffers","_keyValueDiffersFactory","defaultKeyValueDiffers","_localeFactory","locale","asTextData","view","nodes","asElementData","asProviderData","asPureExpressionData","asQueryList","expressionChangedAfterItHasBeenCheckedError","context","oldValue","currValue","isFirstCheck","viewDebugError","viewWrappedDebugError","err","_addDebugContext","logError","isViewDebugError","viewDestroyedError","tokenKey","_tokenKeyCache","size","unwrapValue","nodeIdx","bindingIdx","WrappedValue","wrapped","globalBindingIdx","def","bindingIndex","oldValues","createRendererType2","UNDEFINED_RENDERER_TYPE_ID","styles","encapsulation","data","resolveRendererType2","isFilled","ViewEncapsulation","None","_renderCompCount","EMPTY_RENDERER_TYPE_ID","checkBinding","state","checkAndUpdateBinding","checkBindingNoChanges","Services","createDebugContext","nodeIndex","markParentViewsForCheck","currView","viewContainerParent","parent","markParentViewsForCheckProjectedViews","endView","dispatchEvent","event","componentView","handleEvent","declaredViewContainer","viewParentEl","renderNode","renderElement","renderText","elementEventFullName","isComponentView","isEmbeddedView","filterQueryId","queryId","splitMatchedQueriesDsl","matchedQueriesDsl","matchedQueries","matchedQueryIds","references","valueType","splitDepsDsl","getParentRenderElement","renderHost","renderParent","componentRendererType","Native","resolveDefinition","DEFINITION_CACHE","NOOP","rootRenderNodes","renderNodes","visitRootRenderNodes","nextSibling","renderer","visitSiblingRenderNodes","startIndex","endIndex","nodeDef","visitRenderNode","childCount","visitProjectedRenderNodes","ngContentIndex","compView","hostView","hostElDef","projectedNodes","projectableNodes","execRenderNodeAction","rn","bindingFlags","embeddedViews","_embeddedViews","appendChild","insertBefore","removeChild","splitNamespace","match","NS_PREFIX_RE","calcBindingFlags","bindings","interpolate","valueCount","constAndInterp","_toStringWithNull","inlineInterpolate","c0","a1","c1","a2","c2","a3","c3","a4","c4","a5","c5","a6","c6","a7","c7","a8","c8","a9","c9","anchorDef","templateFactory","outputIndex","checkIndex","childFlags","directChildFlags","childMatchedQueries","outputs","ns","attrs","template","componentProvider","publicProviders","allProviders","text","query","ngContent","elementDef","namespaceAndName","fixedAttrs","bindingDefs","namespaceAndName_1","suffixOrSecurityContext","ns_1","name_1","securityContext","suffix","nonMinifiedName","outputDefs","createElement","elDef","rootSelectorOrNode","selectorOrNode","createComment","parentEl","selectRootElement","setAttribute","listenToElementOutputs","output","handleEventClosure","renderEventHandlerClosure","listenTarget","listenerView","disposable","listen","checkAndUpdateElementInline","v0","v1","v2","v3","v4","v5","v6","v7","v8","v9","bindLen","changed","checkAndUpdateElementValue","checkAndUpdateElementDynamic","binding","elData","renderNode$$1","setElementAttribute","setElementClass","setElementStyle","setElementProperty","renderValue","sanitizer","sanitize","removeAttribute","addClass","removeClass","SecurityContext","STYLE","unit","setStyle","removeStyle","setProperty","moduleProvideDef","moduleDef","providersByKey","initNgModule","_def","provDef","_createProviderInstance$1","resolveNgModuleDep","depDef","notFoundValue","Injector","THROW_IF_NOT_FOUND","_parent","tokenKey$$1","InjectorRefTokenKey$1","NgModuleRefTokenKey","providerDef","providerInstance","UNDEFINED_VALUE","ngModule","injectable","_createClass","_callFactory","len","depValues","callNgModuleLifecycle","lifecycles","attachEmbeddedView","parentView","elementData","viewIndex","addToArray","attachProjectedView","dirtyParentQueries","renderAttachEmbeddedView","vcElementData","dvcElementData","projectedViews","_projectedViews","markNodeAsProjectedTemplate","viewDef","nodeFlags","parentNodeDef","detachEmbeddedView","removeFromArray","renderDetachView","detachProjectedView","moveEmbeddedView","oldViewIndex","newViewIndex","prevView","prevRenderNode","arr","pop","createComponentFactory","selector","componentType","viewDefFactory","inputs","ngContentSelectors","ComponentFactory_","getComponentViewDefinitionFactory","componentFactory","createViewContainerData","ViewContainerRef_","createChangeDetectorRef","ViewRef_","createTemplateData","TemplateRef_","createInjector","Injector_","nodeValue","createRendererV1","RendererAdapter","createNgModuleRef","bootstrapComponents","NgModuleRef_","directiveDef","pipeDef","depDefs","createProviderInstance","_createProviderInstance","createPipeInstance","createClass","createDirectiveInstance","allowPrivateServices","subscription","eventHandlerClosure","checkAndUpdateDirectiveInline","providerData","directive","updateProp","ngDoCheck","checkAndUpdateDirectiveDynamic","callFactory","resolveDep","startView","ChangeDetectorRefTokenKey","RendererV1TokenKey","findCompView","Renderer2TokenKey","ElementRefTokenKey","ElementRef","ViewContainerRefTokenKey","viewContainer","TemplateRefTokenKey","InjectorRefTokenKey","providerDef_1","NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR","SimpleChange","callLifecycleHooksChildrenFirst","callProviderLifecycles","callElementProvidersLifecycles","setCurrentNode","queryDef","bindingType","filterId","createQuery","QueryList","queryIds","nodeMatchedQueries","tplDef","end","setDirty","checkAndUpdateQuery","queryList","dirty","directiveInstance","newValues","elementDef_1","calcQueryValues","reset","notify","boundValue","notifyOnChanges","getQueryValue","embeddedView","dvc","projectedView","queryValueType","ngContentDef","appendNgContent","purePipeDef","argCount","_pureExpressionDef","pureArrayDef","pureObjectDef","propToIndex","nbKeys","propertyNames","createPureExpression","checkAndUpdatePureExpressionInline","pipe","transform","checkAndUpdatePureExpressionDynamic","textDef","staticText","prefix","createText","checkAndUpdateTextInline","_addInterpolationPart","checkAndUpdateTextDynamic","updateDirectives","updateRenderer","viewBindingCount","viewDisposableCount","viewNodeFlags","viewRootNodeFlags","viewMatchedQueries","currentParent","currentRenderParent","currentElementHasPublicProviders","currentElementHasPrivateProviders","lastRenderRootNode","validateNode","isPrivateService","isComponent","isNgContainer","newParent","rootNodeFlags","bindingCount","outputCount","nodeCount","parentEnd","createEmbeddedView","anchorDef$$1","createView","initView","createViewNodes","createRootView","createComponentView","hostElement","compRenderer","rendererType","rendererFactory","createRenderer","disposables","hostDef","nodeData","compViewDef","execComponentViewsAction","ViewAction","CreateViewNodes","execQueriesAction","checkNoChangesView","markProjectedViewsForCheck","execEmbeddedViewsAction","CheckNoChanges","checkAndUpdateView","CheckAndUpdate","checkAndUpdateNode","argStyle","checkAndUpdateNodeInline","checkAndUpdateNodeDynamic","i_1","checkNoChangesNode","checkNoChangesNodeInline","checkNoChangesNodeDynamic","checkNoChangesQuery","destroyView","Destroy","destroyNode","destroyViewNodes","callViewAction","viewState","execProjectedViewsAction","CheckNoChangesProjectedViews","CheckAndUpdateProjectedViews","queryFlags","staticDynamicQueryFlag","checkType","initServicesIfNeeded","initialized","services","createDebugServices","createProdServices","overrideProvider","clearProviderOverrides","createProdRootView","DebugContext_","prodCheckAndUpdateNode","prodCheckNoChangesNode","debugSetCurrentNode","debugCreateRootView","debugCreateEmbeddedView","debugCreateComponentView","debugCreateNgModuleRef","debugOverrideProvider","debugClearProviderOverrides","debugCheckAndUpdateView","debugCheckNoChangesView","debugDestroyView","debugHandleEvent","debugUpdateDirectives","debugUpdateRenderer","elInjector","createRootData","RendererFactory2","DebugRendererFactory2","defWithOverride","applyProviderOverridesToView","callWithDebugContext","DebugAction","Sanitizer","ErrorHandler","viewDef$$1","parentInjector","applyProviderOverridesToNgModule","override","providerOverrides","clear","elementIndicesWithOverwrittenProviders","elIndicesWithOverwrittenProviders","lastElementDef","has","elIndex","hasOverrides","hasDeprecatedOverrides","deprecatedBehavior","detectChanges","checkNoChanges","_currentView","_currentNodeIndex","debugCheckDirectivesFn","debugCheckAndUpdateNode","debugCheckNoChangesNode","nextDirectiveWithBinding","_currentAction","debugCheckRenderNodeFn","nextRenderNodeWithBinding","givenValues","bindingValues","normalizeDebugBindingName","normalizeDebugBindingValue","attr","JSON","camelCaseToDashCase","input","CAMEL_CASE_REGEXP","toLowerCase","getRenderNodeIndex","renderNodeIndex","findHostElement","collectReferences","refName","self","oldAction","oldView","oldNodeIndex","getCurrentDebugContext","createNgModuleFactory","ngModuleType","defFactory","NgModuleFactory_","trigger$1","definitions","options","animate$1","timings","group$1","steps","sequence$1","style$1","tokens","offset","state$1","keyframes$1","transition$1","stateChangeExpr","expr","animation","trigger$$1","animate$$1","group$$1","sequence$$1","style$$1","state$$1","keyframes$$1","transition$$1","setPrototypeOf","__proto__","OpaqueToken","_desc","_super","desc","__window","window","__self","WorkerGlobalScope","__global","ANALYZE_FOR_ENTRY_COMPONENTS","Attribute","attributeName","Query","ContentChildren","assign","isViewQuery","descendants","ContentChild","ViewChildren","ViewChild","OnPush","ChangeDetectorStatus","CheckOnce","Checked","CheckAlways","Detached","Errored","Destroyed","Directive","dir","Component","changeDetection","Pipe","pure","Input","bindingPropertyName","Output","HostBinding","hostPropertyName","HostListener","CUSTOM_ELEMENTS_SCHEMA","NO_ERRORS_SCHEMA","NgModule","Emulated","ViewMetadata","opts","templateUrl","styleUrls","animations","interpolation","Version","full","enumerable","configurable","VERSION","Injectable","Host","_THROW_IF_NOT_FOUND","_NullInjector","NULL","deprecatedParameter","_console","_findOriginalError","_findContext","errorLogger","_globalKeyRegistry","numberOfKeys","KeyRegistry","_allKeys","newKey","DELEGATE_CTOR","ReflectionCapabilities","reflect","_reflect","isReflectionEnabled","_zipTypesAndAnnotations","paramTypes","_ownParameters","parentCtor","exec","tsickleCtorParams","ctorParameters","ctorParam","decorators","fill","_ownAnnotations","ownAnnotations","_ownPropMetadata","propMetadata","propDecorators","propDecorators_1","propMetadata_1","parentPropMetadata_1","ownPropMetadata","hasLifecycleHook","lcProperty","setter","method","functionBody","importUri","resourceUri","resolveIdentifier","moduleUrl","members","runtime","resolveEnum","enumIdentifier","Reflector","reflectionCapabilities","updateCapabilities","caps","identifier","UNDEFINED","resolve","ResolvedReflectiveProviders","fromResolvedProviders","ReflectiveInjector_","resolveAndCreateChild","createChildFromResolved","resolveAndInstantiate","instantiateResolved","_constructionCounter","keyIds","objs","_getByKey","inj","_instantiateProvider","_new","_getMaxNumberOfObjects","_instantiate","ResolvedReflectiveFactory$$1","dep","_getByReflectiveDependency","stack","INJECTOR_KEY","_getByKeySelf","_getByKeyDefault","_getObjByKeyId","keyId","_throwOrNull","inj_","displayName","APP_INITIALIZER","ApplicationInitStatus","appInits","_done","_donePromise","Promise","rej","reject","runInitializers","asyncInitPromises","complete","initResult","all","APP_ID","APP_ID_RANDOM_PROVIDER","PLATFORM_ID","APP_BOOTSTRAP_LISTENER","PACKAGE_ROOT_URL","Console","log","warn","ModuleWithComponentFactories","ngModuleFactory","componentFactories","Compiler","compileModuleSync","compileModuleAsync","compileModuleAndAllComponentsSync","compileModuleAndAllComponentsAsync","getNgContentSelectors","clearCache","clearCacheFor","COMPILER_OPTIONS","CompilerFactory","createCompiler","ComponentRef","location","changeDetectorRef","onDestroy","ComponentFactory","_NullComponentFactoryResolver","resolveComponentFactory","ComponentFactoryResolver","CodegenComponentFactoryResolver","factories","_ngModule","_factories","ComponentFactoryBoundToModule","NgModuleRef","componentFactoryResolver","NgModuleFactory","wtfEnabled","wtfCreateScope","wtfLeave","s","r","wtfStartTimeRange","wtfEndTimeRange","isAsync","__isAsync","generatorOrNext","schedulerFn","errorFn","completeFn","Subject","NgZone","enableLongStackTrace","assertZonePatched","_outer","isInAngularZone","assertInAngularZone","assertNotInAngularZone","run","runGuarded","Testability","_ngZone","_pendingCount","_isZoneStable","_didWork","_callbacks","_watchAngularEvents","_runCallbacksIfReady","increasePendingRequestCount","decreasePendingRequestCount","whenStable","getPendingRequestCount","findBindings","using","exactMatch","findProviders","TestabilityRegistry","_applications","addToWindow","registerApplication","testability","getTestability","elem","getAllTestabilities","getAllRootElements","findTestabilityInTree","findInAncestors","_NoopGetTestability","registry","NgProbeToken","bootstrapModuleFactory","moduleFactory","bootstrapModule","compilerOptions","PlatformRef_","_injector","_modules","_destroyListeners","_destroyed","listener","_bootstrapModuleFactoryWithZone","ngZoneInjector","moduleRef","exceptionHandler","initStatus","donePromise","_moduleDoBootstrap","_bootstrapModuleWithZone","appRef","ApplicationRef","_bootstrapComponents","f","bootstrap","ngDoBootstrap","tick","componentTypes","components","attachView","detachView","viewCount","ApplicationRef_","_zone","_exceptionHandler","_componentFactoryResolver","_initStatus","_bootstrapListeners","_rootComponents","_rootComponentTypes","_views","_runningTick","_enforceNoNewChanges","_stable","isCurrentlyStable","Observable","observer","stableSub","unstableSub","_isStable","merge","share","viewRef","attachToAppRef","detachFromAppRef","componentOrFactory","compRef","_unloadComponent","_loadComponent","componentRef","_tickScope","RenderComponentType","slotCount","RenderDebugInfo","providerTokens","Renderer","debugInfo","parentElement","createViewRoot","createTemplateAnchor","projectNodes","attachViewAfter","viewRootNodes","viewAllNodes","listenGlobal","propertyValue","attributeValue","setBindingDebugInfo","className","isAdd","styleName","styleValue","invokeElementMethod","methodName","setText","animate","startingStyles","keyframes","duration","delay","easing","previousPlayers","RootRenderer","renderComponent","begin","whenRenderingDone","RendererStyleFlags2","Important","DashCase","Renderer2","namespace","newChild","refChild","oldChild","style","NgModuleFactoryLoader","load","path","_dirty","_results","_emitter","find","toArray","SystemJsNgModuleLoaderConfig","DEFAULT_CONFIG","factoryPathPrefix","factoryPathSuffix","SystemJsNgModuleLoader","_compiler","config","_config","loadFactory","loadAndCompile","System","import","factoryClassSuffix","TemplateRef","elementRef","ViewContainerRef","templateRef","createComponent","insert","move","currentIndex","detach","ChangeDetectorRef","markForCheck","reattach","ViewRef","EmbeddedViewRef","rootNodes","EventListener","DebugNode","_debugContext","addChild","listeners","attributes","classes","childIndex","insertChildrenAfter","newChildren","siblingIndex","refIndex","queryAll","queryAllNodes","triggerEventHandler","wrap","ValueUnwrapper","hasWrappedValue","unwrap","previousValue","firstChange","isFirstChange","DefaultIterableDifferFactory","supports","cdRefOrTrackBy","trackByFn","DefaultIterableDiffer","trackByIdentity","_length","_collection","_linkedRecords","_unlinkedRecords","_previousItHead","_itHead","_itTail","_additionsHead","_additionsTail","_movesHead","_movesTail","_removalsHead","_removalsTail","_identityChangesHead","_identityChangesTail","_trackByFn","forEachItem","record","_next","forEachOperation","nextIt","nextRemove","adjPreviousIndex","_nextRemoved","localMovePreviousIndex","localCurrentIndex","forEachPreviousItem","_nextPrevious","forEachAddedItem","_nextAdded","forEachMovedItem","_nextMoved","forEachRemovedItem","forEachIdentityChange","_nextIdentityChange","diff","collection","check","_reset","itemTrackBy","mayBeDirty","index_1","trackById","_verifyReinsertion","_addIdentityChange","_mismatch","_truncate","isDirty","nextRecord","previousRecord","_prev","_remove","_moveAfter","_reinsertAfter","_addAfter","IterableChangeRecord_","reinsertRecord","_addToMoves","_addToRemovals","_unlink","prevRecord","prev","_prevRemoved","_insertAfter","_DuplicateMap","put","toIndex","previous","additions","moves","removals","identityChanges","_prevDup","_nextDup","_DuplicateItemRecordList","_head","_tail","add","atOrAfterIndex","duplicates","recordList","DefaultKeyValueDifferFactory","cd","DefaultKeyValueDiffer","_records","_mapHead","_appendAfter","_previousMapHead","_changesHead","_changesTail","forEachChangedItem","_nextChanged","_forEach","_maybeAddToChanges","_getOrCreateRecordForKey","_insertBeforeOrAppend","before","record_1","KeyValueChangeRecord_","_addToAdditions","newValue","_addToChanges","IterableDiffers","copied","extend","iterable","KeyValueDiffers","kv","keyValDiff","iterableDiff","_CORE_PLATFORM_PROVIDERS","platformCore","LOCALE_ID","TRANSLATIONS","TRANSLATIONS_FORMAT","MissingTranslationStrategy","Warning","Ignore","ApplicationModule","NONE","HTML","SCRIPT","URL","RESOURCE_URL","DebugContext","componentRenderElement","WeakMap","EMPTY_ARRAY","EMPTY_MAP","EMPTY_CONTEXT","_inputs","_outputs","inputsArr","templateName","outputsArr","componentNodeIndex","ComponentRef_","_view","_viewRef","_component","_elDef","_data","ref","attachToViewContainerRef","ngModuleRef","contextInjector","viewRef_","viewData","_viewContainerRef","_appRef","fs","vcRef","_parentView","comment","_moduleType","elView","elOrCompView","childDef","logViewDef","logNodeIndex","currRenderNodeIndex","nodeLogger","renderData","DebugRenderer2","debugCtx","debugEl","debugChildEl","debugRefEl","fullName","_ngModuleDefFactory","ɵALLOW_MULTIPLE_PLATFORMS","ɵAPP_ID_RANDOM_PROVIDER","ɵValueUnwrapper","ɵdevModeEqual","ɵisListLikeIterable","ɵChangeDetectorStatus","ɵisDefaultChangeDetectionStrategy","ɵConsole","ɵERROR_COMPONENT_TYPE","ɵComponentFactory","ɵCodegenComponentFactoryResolver","ɵViewMetadata","ɵReflectionCapabilities","ɵRenderDebugInfo","ɵglobal","ɵlooseIdentical","ɵstringify","ɵmakeDecorator","ɵisObservable","ɵisPromise","ɵclearProviderOverrides","ɵoverrideProvider","ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR","ɵregisterModuleFactory","ɵEMPTY_ARRAY","ɵEMPTY_MAP","ɵand","ɵccf","ɵcmf","ɵcrt","ɵdid","ɵeld","ɵelementEventFullName","ɵgetComponentViewDefinitionFactory","ɵinlineInterpolate","ɵinterpolate","ɵmod","ɵmpd","ɵncd","ɵnov","ɵpid","ɵprd","ɵpad","ɵpod","ɵppd","ɵqud","ɵted","ɵunv","ɵvid","AUTO_STYLE","group","sequence","transition","ɵx","ɵy","ɵbc","ɵz","ɵbb","ɵba","ɵbd","ɵw","ɵk","ɵl","ɵm","ɵe","ɵf","ɵg","ɵh","ɵi","ɵj","ɵb","ɵc","ɵd","ɵn","ɵp","ɵo","ɵs","ɵq","ɵr","ɵa","ɵt","ɵu","root_1","toSubscriber_1","observable_1","pipe_1","_isScalar","_subscribe","lift","operator","observable","observerOrNext","sink","toSubscriber","_trySubscribe","syncErrorThrowable","syncErrorThrown","syncErrorValue","PromiseCtor","Rx","subscriber","operations","pipeFromArray","toPromise","x","_root","nextOrObserver","Subscriber_1","Subscriber","rxSubscriber_1","rxSubscriber","Observer_1","empty","isFunction_1","Subscription_1","destinationOrNext","isStopped","destination","SafeSubscriber","_error","_complete","closed","_unsubscribeAndRecycle","_parents","Subscription","_parentSubscriber","isFunction","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","_unsubscribe","flattenUnsubscriptionErrors","errors","errs","UnsubscriptionError_1","UnsubscriptionError","isArray_1","isObject_1","tryCatch_1","errorObject_1","_subscriptions","hasErrors","trial","tryCatch","errorObject","sub","isObject","teardown","EMPTY","_addParent","tmp","subscriptions","subscriptionIndex","tryCatcher","tryCatchTarget","for","$$rxSubscriber","getSymbolObservable","$$observable","fns","noop_1","noop","merge_1","mergeStatic","observables","merge_2","concurrent","POSITIVE_INFINITY","scheduler","last","isScheduler_1","isScheduler","Observable_1","mergeAll_1","mergeAll","ArrayObservable_1","ArrayObservable","ScalarObservable_1","EmptyObservable_1","array","of","ScalarObservable","EmptyObservable","dispatch","count","schedule","arg","mergeMap_1","mergeMap","identity_1","identity","project","resultSelector","MergeMapOperator","subscribeToResult_1","OuterSubscriber_1","MergeMapSubscriber","hasCompleted","buffer","active","_tryNext","_innerSub","ish","subscribeToResult","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","_notifyResultSelector","notifyComplete","shift","OuterSubscriber","outerSubscriber","InnerSubscriber_1","InnerSubscriber","isArrayLike_1","isArrayLike","isPromise_1","iterator_1","obs","TypeError","symbolIteratorPonyfill","Set_1","Set","Map_1","$$iterator","notifyError","share_1","shareSubjectFactory","Subject_1","refCount_1","refCount","multicast_1","multicast","subjectOrSubjectFactory","subjectFactory","MulticastOperator","connectable","ConnectableObservable_1","connectableObservableDescriptor","subject","ConnectableObservable","_refCount","_isComplete","getSubject","_subject","connect","connection","_connection","ConnectableSubscriber","connectableProto","writable","SubjectSubscriber","RefCountSubscriber","RefCountOperator","refCounter","sharedConnection","ObjectUnsubscribedError_1","SubjectSubscription_1","observers","hasError","thrownError","AnonymousSubject","ObjectUnsubscribedError","copy","SubjectSubscription","asObservable","subscriberIndex","FormBase","localChange","propagateChange","checked","registerOnChange","registerFunction","registerOnTouched","propagateTouch","ngEle","nodeName","ngOnFocus","ngOnBlur","writeValue","focus","blur","ej2_base_2","compile","templateEle","helper","stringCompiler","contRef_1","pName_1","$implicit","conRef","viewContainerRef","viewCollection","Template","defaultValue","propertyDescriptor","dataBind","getTemplateEngine","setTemplateEngine"],"mappings":"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","file":"ej2-ng-base.umd.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@syncfusion/ej2-base\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@syncfusion/ej2-base\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"@syncfusion/ej2-base\")) : factory(root[\"@syncfusion/ej2-base\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(1), __webpack_require__(4), __webpack_require__(46), __webpack_require__(3), __webpack_require__(47)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, complex_array_base_1, component_base_1, form_base_1, util_1, template_1) {\n\t    \"use strict\";\n\t    function __export(m) {\n\t        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t    }\n\t    Object.defineProperty(exports, \"__esModule\", { value: true });\n\t    __export(complex_array_base_1);\n\t    __export(component_base_1);\n\t    __export(form_base_1);\n\t    __export(util_1);\n\t    __export(template_1);\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(2), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, ej2_base_1, util_1) {\n\t    \"use strict\";\n\t    Object.defineProperty(exports, \"__esModule\", { value: true });\n\t    var ComplexBase = (function () {\n\t        function ComplexBase() {\n\t            this.hasChanges = false;\n\t            this.propCollection = {};\n\t            this.tags = [];\n\t            this.tagObjects = [];\n\t        }\n\t        ComplexBase.prototype.ngOnInit = function () {\n\t            this.registeredTemplate = {};\n\t            for (var _i = 0, _a = this.tags; _i < _a.length; _i++) {\n\t                var tag = _a[_i];\n\t                var objInstance = ej2_base_1.getValue('child' + tag.substring(0, 1).toUpperCase() + tag.substring(1), this);\n\t                if (objInstance) {\n\t                    this.tagObjects.push({ instance: objInstance, name: tag });\n\t                }\n\t            }\n\t            var templateProperties = Object.keys(this);\n\t            templateProperties = templateProperties.filter(function (val) {\n\t                return /Ref$/i.test(val);\n\t            });\n\t            for (var _b = 0, templateProperties_1 = templateProperties; _b < templateProperties_1.length; _b++) {\n\t                var tempName = templateProperties_1[_b];\n\t                var propName = tempName.replace('Ref', '');\n\t                ej2_base_1.setValue(propName.replace('_', '.'), ej2_base_1.getValue(propName, this), this.propCollection);\n\t            }\n\t        };\n\t        ComplexBase.prototype.ngOnChanges = function (changes) {\n\t            for (var _i = 0, _a = Object.keys(changes); _i < _a.length; _i++) {\n\t                var propName = _a[_i];\n\t                var changedVal = changes[propName];\n\t                this.propCollection[propName] = changedVal.currentValue;\n\t            }\n\t            this.hasChanges = true;\n\t        };\n\t        ComplexBase.prototype.clearTemplate = function (templateNames) {\n\t            util_1.clearTemplate(this, templateNames);\n\t        };\n\t        ;\n\t        ComplexBase.prototype.getProperties = function () {\n\t            for (var _i = 0, _a = this.tagObjects; _i < _a.length; _i++) {\n\t                var tagObject = _a[_i];\n\t                this.propCollection[tagObject.name] = tagObject.instance.getProperties();\n\t            }\n\t            return this.propCollection;\n\t        };\n\t        ComplexBase.prototype.isChanged = function () {\n\t            var result = this.hasChanges;\n\t            for (var _i = 0, _a = this.tagObjects; _i < _a.length; _i++) {\n\t                var item = _a[_i];\n\t                result = result || item.instance.hasChanges;\n\t            }\n\t            return result;\n\t        };\n\t        ComplexBase.prototype.ngAfterContentChecked = function () {\n\t            this.hasChanges = this.isChanged();\n\t            var templateProperties = Object.keys(this);\n\t            templateProperties = templateProperties.filter(function (val) {\n\t                return /Ref$/i.test(val);\n\t            });\n\t        };\n\t        ComplexBase.prototype.ngAfterViewChecked = function () {\n\t            this.hasChanges = false;\n\t        };\n\t        return ComplexBase;\n\t    }());\n\t    exports.ComplexBase = ComplexBase;\n\t    var ArrayBase = (function () {\n\t        function ArrayBase(propertyName) {\n\t            this.list = [];\n\t            this.hasChanges = false;\n\t            this.propertyName = propertyName;\n\t        }\n\t        ArrayBase.prototype.ngOnInit = function () {\n\t            this.isInitChanges = true;\n\t        };\n\t        ArrayBase.prototype.ngAfterContentInit = function () {\n\t            var _this = this;\n\t            var index = 0;\n\t            this.list = this.children.map(function (child) {\n\t                child.index = index++;\n\t                child.property = _this.propertyName;\n\t                return child;\n\t            });\n\t            this.hasChanges = true;\n\t        };\n\t        ArrayBase.prototype.getProperties = function () {\n\t            var onlyProp = [];\n\t            for (var _i = 0, _a = this.list; _i < _a.length; _i++) {\n\t                var item = _a[_i];\n\t                onlyProp.push(item.getProperties());\n\t            }\n\t            return onlyProp;\n\t        };\n\t        ArrayBase.prototype.isChanged = function () {\n\t            var result = false;\n\t            for (var _i = 0, _a = this.list; _i < _a.length; _i++) {\n\t                var item = _a[_i];\n\t                result = result || item.hasChanges;\n\t            }\n\t            return !!this.list.length && result;\n\t        };\n\t        ArrayBase.prototype.clearTemplate = function (templateNames) {\n\t            var _this = this;\n\t            for (var _i = 0, _a = this.list; _i < _a.length; _i++) {\n\t                var item = _a[_i];\n\t                item.clearTemplate(templateNames && templateNames.map(function (val) {\n\t                    return new RegExp(_this.propertyName).test(val) ? val.replace(_this.propertyName + '.', '') : val;\n\t                }));\n\t            }\n\t        };\n\t        ArrayBase.prototype.ngAfterContentChecked = function () {\n\t            this.hasChanges = this.isChanged();\n\t        };\n\t        ArrayBase.prototype.ngAfterViewInit = function () {\n\t            this.isInitChanges = false;\n\t        };\n\t        return ArrayBase;\n\t    }());\n\t    exports.ArrayBase = ArrayBase;\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports) {\n\t    \"use strict\";\n\t    Object.defineProperty(exports, \"__esModule\", { value: true });\n\t    function applyMixins(derivedClass, baseClass) {\n\t        baseClass.forEach(function (baseClass) {\n\t            Object.getOwnPropertyNames(baseClass.prototype).forEach(function (name) {\n\t                derivedClass.prototype[name] = baseClass.prototype[name];\n\t            });\n\t        });\n\t    }\n\t    exports.applyMixins = applyMixins;\n\t    function clearTemplate(_this, templateNames) {\n\t        var regTemplates = Object.keys(_this.registeredTemplate);\n\t        if (regTemplates.length) {\n\t            var regProperties = templateNames && templateNames.filter(function (val) {\n\t                return (/\\./g.test(val) ? false : true);\n\t            });\n\t            for (var _i = 0, _a = (regProperties && regProperties || regTemplates); _i < _a.length; _i++) {\n\t                var registeredTemplate = _a[_i];\n\t                for (var _b = 0, _c = _this.registeredTemplate[registeredTemplate]; _b < _c.length; _b++) {\n\t                    var rt = _c[_b];\n\t                    if (!rt.destroyed) {\n\t                        rt.destroy();\n\t                    }\n\t                }\n\t                delete _this.registeredTemplate[registeredTemplate];\n\t            }\n\t        }\n\t        var _loop_1 = function (tagObject) {\n\t            if (tagObject.instance) {\n\t                tagObject.instance.clearTemplate((templateNames && templateNames.filter(function (val) {\n\t                    return (new RegExp(tagObject.name).test(val) ? true : false);\n\t                })));\n\t            }\n\t        };\n\t        for (var _d = 0, _e = _this.tagObjects; _d < _e.length; _d++) {\n\t            var tagObject = _e[_d];\n\t            _loop_1(tagObject);\n\t        }\n\t    }\n\t    exports.clearTemplate = clearTemplate;\n\t    function setValue(nameSpace, value, object) {\n\t        var keys = nameSpace.split('.');\n\t        var fromObj = object || {};\n\t        for (var i = 0; i < keys.length; i++) {\n\t            var key = keys[i];\n\t            if (i + 1 === keys.length) {\n\t                fromObj[key] = value === undefined ? {} : value;\n\t            }\n\t            else if (fromObj[key] === undefined) {\n\t                fromObj[key] = {};\n\t            }\n\t            fromObj = fromObj[key];\n\t        }\n\t        return fromObj;\n\t    }\n\t    exports.setValue = setValue;\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(2), __webpack_require__(5), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, ej2_base_1, core_1, util_1) {\n\t    \"use strict\";\n\t    Object.defineProperty(exports, \"__esModule\", { value: true });\n\t    var ComponentBase = (function () {\n\t        function ComponentBase() {\n\t        }\n\t        ComponentBase.prototype.ngOnInit = function () {\n\t            this.registeredTemplate = {};\n\t            this.ngBoundedEvents = {};\n\t            this.tags = this.tags || [];\n\t            this.complexTemplate = this.complexTemplate || [];\n\t            this.tagObjects = [];\n\t            for (var _i = 0, _a = this.tags; _i < _a.length; _i++) {\n\t                var tag = _a[_i];\n\t                var tagObject = {\n\t                    instance: ej2_base_1.getValue('child' + tag.substring(0, 1).toUpperCase() + tag.substring(1), this),\n\t                    name: tag\n\t                };\n\t                this.tagObjects.push(tagObject);\n\t            }\n\t            var complexTemplates = Object.keys(this);\n\t            complexTemplates = complexTemplates.filter(function (val) {\n\t                return /Ref$/i.test(val) && /\\_/i.test(val);\n\t            });\n\t            for (var _b = 0, complexTemplates_1 = complexTemplates; _b < complexTemplates_1.length; _b++) {\n\t                var tempName = complexTemplates_1[_b];\n\t                var propName = tempName.replace('Ref', '');\n\t                var val = {};\n\t                ej2_base_1.setValue(propName.replace('_', '.'), ej2_base_1.getValue(propName, this), val);\n\t                this.setProperties(val, true);\n\t            }\n\t        };\n\t        ComponentBase.prototype.ngAfterViewInit = function () {\n\t            var _this = this;\n\t            setTimeout(function () {\n\t                _this.appendTo(_this.element);\n\t            });\n\t        };\n\t        ComponentBase.prototype.ngOnDestroy = function () {\n\t            this.destroy();\n\t            this.clearTemplate(null);\n\t        };\n\t        ComponentBase.prototype.clearTemplate = function (templateNames) {\n\t            util_1.clearTemplate(this, templateNames);\n\t        };\n\t        ;\n\t        ComponentBase.prototype.ngAfterContentChecked = function () {\n\t            for (var _i = 0, _a = this.tagObjects; _i < _a.length; _i++) {\n\t                var tagObject = _a[_i];\n\t                if (!ej2_base_1.isUndefined(tagObject.instance) && tagObject.instance.hasChanges) {\n\t                    if (tagObject.instance.isInitChanges) {\n\t                        var propObj = {};\n\t                        propObj[tagObject.name] = tagObject.instance.getProperties();\n\t                        this.setProperties(propObj, tagObject.instance.isInitChanges);\n\t                    }\n\t                    else {\n\t                        for (var _b = 0, _c = tagObject.instance.list; _b < _c.length; _b++) {\n\t                            var list = _c[_b];\n\t                            if (list.hasChanges) {\n\t                                var curIndex = tagObject.instance.list.indexOf(list);\n\t                                ej2_base_1.getValue(tagObject.name, this)[curIndex].setProperties(list.getProperties());\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        };\n\t        ComponentBase.prototype.registerEvents = function (eventList) {\n\t            var ngEventsEmitter = {};\n\t            if (eventList && eventList.length) {\n\t                for (var _i = 0, eventList_1 = eventList; _i < eventList_1.length; _i++) {\n\t                    var event_1 = eventList_1[_i];\n\t                    ngEventsEmitter[event_1] = new core_1.EventEmitter(false);\n\t                }\n\t                this.setProperties(ngEventsEmitter, true);\n\t            }\n\t        };\n\t        ComponentBase.prototype.addTwoWay = function (propList) {\n\t            var _this = this;\n\t            var _loop_1 = function (prop) {\n\t                ej2_base_1.getValue(prop, this_1);\n\t                Object.defineProperty(this_1, prop, {\n\t                    get: function () {\n\t                        return ej2_base_1.getValue(prop, _this.properties);\n\t                    },\n\t                    set: function (newVal) {\n\t                        var oldVal = ej2_base_1.getValue(prop, _this.properties);\n\t                        if (oldVal === newVal) {\n\t                            return;\n\t                        }\n\t                        _this.saveChanges(prop, newVal, oldVal);\n\t                        ej2_base_1.setValue(prop, (ej2_base_1.isNullOrUndefined(newVal) ? null : newVal), _this.properties);\n\t                        ej2_base_1.getValue(prop + 'Change', _this).emit(newVal);\n\t                    }\n\t                });\n\t                ej2_base_1.setValue(prop + 'Change', new core_1.EventEmitter(), this_1);\n\t            };\n\t            var this_1 = this;\n\t            for (var _i = 0, propList_1 = propList; _i < propList_1.length; _i++) {\n\t                var prop = propList_1[_i];\n\t                _loop_1(prop);\n\t            }\n\t        };\n\t        ComponentBase.prototype.addEventListener = function (eventName, handler) {\n\t            var eventObj = ej2_base_1.getValue(eventName, this);\n\t            if (!ej2_base_1.isUndefined(eventObj)) {\n\t                if (!this.ngBoundedEvents[eventName]) {\n\t                    this.ngBoundedEvents[eventName] = new Map();\n\t                }\n\t                this.ngBoundedEvents[eventName].set(handler, eventObj.subscribe(handler));\n\t            }\n\t        };\n\t        ComponentBase.prototype.removeEventListener = function (eventName, handler) {\n\t            var eventObj = ej2_base_1.getValue(eventName, this);\n\t            if (!ej2_base_1.isUndefined(eventObj)) {\n\t                this.ngBoundedEvents[eventName].get(handler).unsubscribe();\n\t            }\n\t        };\n\t        ComponentBase.prototype.trigger = function (eventName, eventArgs) {\n\t            var eventObj = ej2_base_1.getValue(eventName, this);\n\t            if (!ej2_base_1.isUndefined(eventObj)) {\n\t                eventObj.next(eventArgs);\n\t            }\n\t            var localEventObj = ej2_base_1.getValue('local' + eventName.charAt(0).toUpperCase() + eventName.slice(1), this);\n\t            if (!ej2_base_1.isUndefined(localEventObj)) {\n\t                localEventObj.call(this, eventArgs);\n\t            }\n\t        };\n\t        return ComponentBase;\n\t    }());\n\t    exports.ComponentBase = ComponentBase;\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {/**\n\t * @license Angular v4.4.6\n\t * (c) 2010-2017 Google, Inc. https://angular.io/\n\t * License: MIT\n\t */\n\t(function (global, factory) {\n\t\t true ? factory(exports, __webpack_require__(6), __webpack_require__(22), __webpack_require__(38), __webpack_require__(42)) :\n\t\ttypeof define === 'function' && define.amd ? define(['exports', 'rxjs/Observable', 'rxjs/observable/merge', 'rxjs/operator/share', 'rxjs/Subject'], factory) :\n\t\t(factory((global.ng = global.ng || {}, global.ng.core = global.ng.core || {}),global.Rx,global.Rx.Observable,global.Rx.Observable.prototype,global.Rx));\n\t}(this, (function (exports,rxjs_Observable,rxjs_observable_merge,rxjs_operator_share,rxjs_Subject) { 'use strict';\n\t\n\t/*! *****************************************************************************\r\n\tCopyright (c) Microsoft Corporation. All rights reserved.\r\n\tLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n\tthis file except in compliance with the License. You may obtain a copy of the\r\n\tLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\t\r\n\tTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n\tKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n\tWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n\tMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\t\r\n\tSee the Apache Version 2.0 License for specific language governing permissions\r\n\tand limitations under the License.\r\n\t***************************************************************************** */\r\n\t/* global Reflect, Promise */\r\n\t\r\n\tvar extendStatics = Object.setPrototypeOf ||\r\n\t    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t\r\n\tfunction __extends(d, b) {\r\n\t    extendStatics(d, b);\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t}\n\t\n\t/**\n\t * @license Angular v4.4.6\n\t * (c) 2010-2017 Google, Inc. https://angular.io/\n\t * License: MIT\n\t */\n\t/**\n\t * Creates a token that can be used in a DI Provider.\n\t *\n\t * ### Example ([live demo](http://plnkr.co/edit/Ys9ezXpj2Mnoy3Uc8KBp?p=preview))\n\t *\n\t * ```typescript\n\t * var t = new OpaqueToken(\"value\");\n\t *\n\t * var injector = Injector.resolveAndCreate([\n\t *   {provide: t, useValue: \"bindingValue\"}\n\t * ]);\n\t *\n\t * expect(injector.get(t)).toEqual(\"bindingValue\");\n\t * ```\n\t *\n\t * Using an `OpaqueToken` is preferable to using strings as tokens because of possible collisions\n\t * caused by multiple providers using the same string as two different tokens.\n\t *\n\t * Using an `OpaqueToken` is preferable to using an `Object` as tokens because it provides better\n\t * error messages.\n\t * @deprecated since v4.0.0 because it does not support type information, use `InjectionToken<?>`\n\t * instead.\n\t */\n\tvar OpaqueToken = (function () {\n\t    /**\n\t     * @param {?} _desc\n\t     */\n\t    function OpaqueToken(_desc) {\n\t        this._desc = _desc;\n\t    }\n\t    /**\n\t     * @return {?}\n\t     */\n\t    OpaqueToken.prototype.toString = function () { return \"Token \" + this._desc; };\n\t    return OpaqueToken;\n\t}());\n\t/**\n\t * Creates a token that can be used in a DI Provider.\n\t *\n\t * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n\t * runtime representation) such as when injecting an interface, callable type, array or\n\t * parametrized type.\n\t *\n\t * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n\t * the `Injector`. This provides additional level of type safety.\n\t *\n\t * ```\n\t * interface MyInterface {...}\n\t * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n\t * // myInterface is inferred to be MyInterface.\n\t * ```\n\t *\n\t * ### Example\n\t *\n\t * {\\@example core/di/ts/injector_spec.ts region='InjectionToken'}\n\t *\n\t * \\@stable\n\t */\n\tvar InjectionToken = (function (_super) {\n\t    __extends(InjectionToken, _super);\n\t    /**\n\t     * @param {?} desc\n\t     */\n\t    function InjectionToken(desc) {\n\t        return _super.call(this, desc) || this;\n\t    }\n\t    /**\n\t     * @return {?}\n\t     */\n\t    InjectionToken.prototype.toString = function () { return \"InjectionToken \" + this._desc; };\n\t    return InjectionToken;\n\t}(OpaqueToken));\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\tvar __window = typeof window !== 'undefined' && window;\n\tvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n\t    self instanceof WorkerGlobalScope && self;\n\tvar __global = typeof global !== 'undefined' && global;\n\tvar _global = __window || __global || __self;\n\tvar _symbolIterator = null;\n\t/**\n\t * @return {?}\n\t */\n\tfunction getSymbolIterator() {\n\t    if (!_symbolIterator) {\n\t        var /** @type {?} */ Symbol = _global['Symbol'];\n\t        if (Symbol && Symbol.iterator) {\n\t            _symbolIterator = Symbol.iterator;\n\t        }\n\t        else {\n\t            // es6-shim specific logic\n\t            var /** @type {?} */ keys = Object.getOwnPropertyNames(Map.prototype);\n\t            for (var /** @type {?} */ i = 0; i < keys.length; ++i) {\n\t                var /** @type {?} */ key = keys[i];\n\t                if (key !== 'entries' && key !== 'size' &&\n\t                    ((Map)).prototype[key] === Map.prototype['entries']) {\n\t                    _symbolIterator = key;\n\t                }\n\t            }\n\t        }\n\t    }\n\t    return _symbolIterator;\n\t}\n\t/**\n\t * @param {?} fn\n\t * @return {?}\n\t */\n\tfunction scheduleMicroTask(fn) {\n\t    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n\t}\n\t/**\n\t * @param {?} a\n\t * @param {?} b\n\t * @return {?}\n\t */\n\tfunction looseIdentical(a, b) {\n\t    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n\t}\n\t/**\n\t * @param {?} token\n\t * @return {?}\n\t */\n\tfunction stringify(token) {\n\t    if (typeof token === 'string') {\n\t        return token;\n\t    }\n\t    if (token == null) {\n\t        return '' + token;\n\t    }\n\t    if (token.overriddenName) {\n\t        return \"\" + token.overriddenName;\n\t    }\n\t    if (token.name) {\n\t        return \"\" + token.name;\n\t    }\n\t    var /** @type {?} */ res = token.toString();\n\t    if (res == null) {\n\t        return '' + res;\n\t    }\n\t    var /** @type {?} */ newLineIndex = res.indexOf('\\n');\n\t    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n\t}\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\tvar _nextClassId = 0;\n\tvar Reflect$1 = _global['Reflect'];\n\t/**\n\t * @param {?} annotation\n\t * @return {?}\n\t */\n\tfunction extractAnnotation(annotation) {\n\t    if (typeof annotation === 'function' && annotation.hasOwnProperty('annotation')) {\n\t        // it is a decorator, extract annotation\n\t        annotation = annotation.annotation;\n\t    }\n\t    return annotation;\n\t}\n\t/**\n\t * @param {?} fnOrArray\n\t * @param {?} key\n\t * @return {?}\n\t */\n\tfunction applyParams(fnOrArray, key) {\n\t    if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function ||\n\t        fnOrArray === Number || fnOrArray === Array) {\n\t        throw new Error(\"Can not use native \" + stringify(fnOrArray) + \" as constructor\");\n\t    }\n\t    if (typeof fnOrArray === 'function') {\n\t        return fnOrArray;\n\t    }\n\t    if (Array.isArray(fnOrArray)) {\n\t        var /** @type {?} */ annotations = (fnOrArray);\n\t        var /** @type {?} */ annoLength = annotations.length - 1;\n\t        var /** @type {?} */ fn = fnOrArray[annoLength];\n\t        if (typeof fn !== 'function') {\n\t            throw new Error(\"Last position of Class method array must be Function in key \" + key + \" was '\" + stringify(fn) + \"'\");\n\t        }\n\t        if (annoLength != fn.length) {\n\t            throw new Error(\"Number of annotations (\" + annoLength + \") does not match number of arguments (\" + fn.length + \") in the function: \" + stringify(fn));\n\t        }\n\t        var /** @type {?} */ paramsAnnotations = [];\n\t        for (var /** @type {?} */ i = 0, /** @type {?} */ ii = annotations.length - 1; i < ii; i++) {\n\t            var /** @type {?} */ paramAnnotations = [];\n\t            paramsAnnotations.push(paramAnnotations);\n\t            var /** @type {?} */ annotation = annotations[i];\n\t            if (Array.isArray(annotation)) {\n\t                for (var /** @type {?} */ j = 0; j < annotation.length; j++) {\n\t                    paramAnnotations.push(extractAnnotation(annotation[j]));\n\t                }\n\t            }\n\t            else if (typeof annotation === 'function') {\n\t                paramAnnotations.push(extractAnnotation(annotation));\n\t            }\n\t            else {\n\t                paramAnnotations.push(annotation);\n\t            }\n\t        }\n\t        Reflect$1.defineMetadata('parameters', paramsAnnotations, fn);\n\t        return fn;\n\t    }\n\t    throw new Error(\"Only Function or Array is supported in Class definition for key '\" + key + \"' is '\" + stringify(fnOrArray) + \"'\");\n\t}\n\t/**\n\t * Provides a way for expressing ES6 classes with parameter annotations in ES5.\n\t *\n\t * ## Basic Example\n\t *\n\t * ```\n\t * var Greeter = ng.Class({\n\t *   constructor: function(name) {\n\t *     this.name = name;\n\t *   },\n\t *\n\t *   greet: function() {\n\t *     alert('Hello ' + this.name + '!');\n\t *   }\n\t * });\n\t * ```\n\t *\n\t * is equivalent to ES6:\n\t *\n\t * ```\n\t * class Greeter {\n\t *   constructor(name) {\n\t *     this.name = name;\n\t *   }\n\t *\n\t *   greet() {\n\t *     alert('Hello ' + this.name + '!');\n\t *   }\n\t * }\n\t * ```\n\t *\n\t * or equivalent to ES5:\n\t *\n\t * ```\n\t * var Greeter = function (name) {\n\t *   this.name = name;\n\t * }\n\t *\n\t * Greeter.prototype.greet = function () {\n\t *   alert('Hello ' + this.name + '!');\n\t * }\n\t * ```\n\t *\n\t * ### Example with parameter annotations\n\t *\n\t * ```\n\t * var MyService = ng.Class({\n\t *   constructor: [String, [new Optional(), Service], function(name, myService) {\n\t *     ...\n\t *   }]\n\t * });\n\t * ```\n\t *\n\t * is equivalent to ES6:\n\t *\n\t * ```\n\t * class MyService {\n\t *   constructor(name: string, \\@Optional() myService: Service) {\n\t *     ...\n\t *   }\n\t * }\n\t * ```\n\t *\n\t * ### Example with inheritance\n\t *\n\t * ```\n\t * var Shape = ng.Class({\n\t *   constructor: (color) {\n\t *     this.color = color;\n\t *   }\n\t * });\n\t *\n\t * var Square = ng.Class({\n\t *   extends: Shape,\n\t *   constructor: function(color, size) {\n\t *     Shape.call(this, color);\n\t *     this.size = size;\n\t *   }\n\t * });\n\t * ```\n\t * @suppress {globalThis}\n\t * \\@stable\n\t * @param {?} clsDef\n\t * @return {?}\n\t */\n\tfunction Class(clsDef) {\n\t    var /** @type {?} */ constructor = applyParams(clsDef.hasOwnProperty('constructor') ? clsDef.constructor : undefined, 'constructor');\n\t    var /** @type {?} */ proto = constructor.prototype;\n\t    if (clsDef.hasOwnProperty('extends')) {\n\t        if (typeof clsDef.extends === 'function') {\n\t            ((constructor)).prototype = proto =\n\t                Object.create(((clsDef.extends)).prototype);\n\t        }\n\t        else {\n\t            throw new Error(\"Class definition 'extends' property must be a constructor function was: \" + stringify(clsDef.extends));\n\t        }\n\t    }\n\t    for (var /** @type {?} */ key in clsDef) {\n\t        if (key !== 'extends' && key !== 'prototype' && clsDef.hasOwnProperty(key)) {\n\t            proto[key] = applyParams(clsDef[key], key);\n\t        }\n\t    }\n\t    if (this && this.annotations instanceof Array) {\n\t        Reflect$1.defineMetadata('annotations', this.annotations, constructor);\n\t    }\n\t    var /** @type {?} */ constructorName = constructor['name'];\n\t    if (!constructorName || constructorName === 'constructor') {\n\t        ((constructor))['overriddenName'] = \"class\" + _nextClassId++;\n\t    }\n\t    return (constructor);\n\t}\n\t/**\n\t * @suppress {globalThis}\n\t * @param {?} name\n\t * @param {?=} props\n\t * @param {?=} parentClass\n\t * @param {?=} chainFn\n\t * @return {?}\n\t */\n\tfunction makeDecorator(name, props, parentClass, chainFn) {\n\t    var /** @type {?} */ metaCtor = makeMetadataCtor(props);\n\t    /**\n\t     * @param {?} objOrType\n\t     * @return {?}\n\t     */\n\t    function DecoratorFactory(objOrType) {\n\t        if (!(Reflect$1 && Reflect$1.getOwnMetadata)) {\n\t            throw 'reflect-metadata shim is required when using class decorators';\n\t        }\n\t        if (this instanceof DecoratorFactory) {\n\t            metaCtor.call(this, objOrType);\n\t            return this;\n\t        }\n\t        var /** @type {?} */ annotationInstance = new ((DecoratorFactory))(objOrType);\n\t        var /** @type {?} */ chainAnnotation = typeof this === 'function' && Array.isArray(this.annotations) ? this.annotations : [];\n\t        chainAnnotation.push(annotationInstance);\n\t        var /** @type {?} */ TypeDecorator = (function TypeDecorator(cls) {\n\t            var /** @type {?} */ annotations = Reflect$1.getOwnMetadata('annotations', cls) || [];\n\t            annotations.push(annotationInstance);\n\t            Reflect$1.defineMetadata('annotations', annotations, cls);\n\t            return cls;\n\t        });\n\t        TypeDecorator.annotations = chainAnnotation;\n\t        TypeDecorator.Class = Class;\n\t        if (chainFn)\n\t            chainFn(TypeDecorator);\n\t        return TypeDecorator;\n\t    }\n\t    if (parentClass) {\n\t        DecoratorFactory.prototype = Object.create(parentClass.prototype);\n\t    }\n\t    DecoratorFactory.prototype.toString = function () { return \"@\" + name; };\n\t    ((DecoratorFactory)).annotationCls = DecoratorFactory;\n\t    return DecoratorFactory;\n\t}\n\t/**\n\t * @param {?=} props\n\t * @return {?}\n\t */\n\tfunction makeMetadataCtor(props) {\n\t    return function ctor() {\n\t        var args = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            args[_i] = arguments[_i];\n\t        }\n\t        if (props) {\n\t            var /** @type {?} */ values = props.apply(void 0, args);\n\t            for (var /** @type {?} */ propName in values) {\n\t                this[propName] = values[propName];\n\t            }\n\t        }\n\t    };\n\t}\n\t/**\n\t * @param {?} name\n\t * @param {?=} props\n\t * @param {?=} parentClass\n\t * @return {?}\n\t */\n\tfunction makeParamDecorator(name, props, parentClass) {\n\t    var /** @type {?} */ metaCtor = makeMetadataCtor(props);\n\t    /**\n\t     * @param {...?} args\n\t     * @return {?}\n\t     */\n\t    function ParamDecoratorFactory() {\n\t        var args = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            args[_i] = arguments[_i];\n\t        }\n\t        if (this instanceof ParamDecoratorFactory) {\n\t            metaCtor.apply(this, args);\n\t            return this;\n\t        }\n\t        var /** @type {?} */ annotationInstance = new (((ParamDecoratorFactory)).bind.apply(((ParamDecoratorFactory)), [void 0].concat(args)))();\n\t        ((ParamDecorator)).annotation = annotationInstance;\n\t        return ParamDecorator;\n\t        /**\n\t         * @param {?} cls\n\t         * @param {?} unusedKey\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        function ParamDecorator(cls, unusedKey, index) {\n\t            var /** @type {?} */ parameters = Reflect$1.getOwnMetadata('parameters', cls) || [];\n\t            // there might be gaps if some in between parameters do not have annotations.\n\t            // we pad with nulls.\n\t            while (parameters.length <= index) {\n\t                parameters.push(null);\n\t            }\n\t            parameters[index] = parameters[index] || []; /** @type {?} */\n\t            ((parameters[index])).push(annotationInstance);\n\t            Reflect$1.defineMetadata('parameters', parameters, cls);\n\t            return cls;\n\t        }\n\t    }\n\t    if (parentClass) {\n\t        ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n\t    }\n\t    ParamDecoratorFactory.prototype.toString = function () { return \"@\" + name; };\n\t    ((ParamDecoratorFactory)).annotationCls = ParamDecoratorFactory;\n\t    return ParamDecoratorFactory;\n\t}\n\t/**\n\t * @param {?} name\n\t * @param {?=} props\n\t * @param {?=} parentClass\n\t * @return {?}\n\t */\n\tfunction makePropDecorator(name, props, parentClass) {\n\t    var /** @type {?} */ metaCtor = makeMetadataCtor(props);\n\t    /**\n\t     * @param {...?} args\n\t     * @return {?}\n\t     */\n\t    function PropDecoratorFactory() {\n\t        var args = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            args[_i] = arguments[_i];\n\t        }\n\t        if (this instanceof PropDecoratorFactory) {\n\t            metaCtor.apply(this, args);\n\t            return this;\n\t        }\n\t        var /** @type {?} */ decoratorInstance = new (((PropDecoratorFactory)).bind.apply(((PropDecoratorFactory)), [void 0].concat(args)))();\n\t        return function PropDecorator(target, name) {\n\t            var /** @type {?} */ meta = Reflect$1.getOwnMetadata('propMetadata', target.constructor) || {};\n\t            meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n\t            meta[name].unshift(decoratorInstance);\n\t            Reflect$1.defineMetadata('propMetadata', meta, target.constructor);\n\t        };\n\t    }\n\t    if (parentClass) {\n\t        PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n\t    }\n\t    PropDecoratorFactory.prototype.toString = function () { return \"@\" + name; };\n\t    ((PropDecoratorFactory)).annotationCls = PropDecoratorFactory;\n\t    return PropDecoratorFactory;\n\t}\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * This token can be used to create a virtual provider that will populate the\n\t * `entryComponents` fields of components and ng modules based on its `useValue`.\n\t * All components that are referenced in the `useValue` value (either directly\n\t * or in a nested array or map) will be added to the `entryComponents` property.\n\t *\n\t * ### Example\n\t * The following example shows how the router can populate the `entryComponents`\n\t * field of an NgModule based on the router configuration which refers\n\t * to components.\n\t *\n\t * ```typescript\n\t * // helper function inside the router\n\t * function provideRoutes(routes) {\n\t *   return [\n\t *     {provide: ROUTES, useValue: routes},\n\t *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}\n\t *   ];\n\t * }\n\t *\n\t * // user code\n\t * let routes = [\n\t *   {path: '/root', component: RootComp},\n\t *   {path: '/teams', component: TeamsComp}\n\t * ];\n\t *\n\t * \\@NgModule({\n\t *   providers: [provideRoutes(routes)]\n\t * })\n\t * class ModuleWithRoutes {}\n\t * ```\n\t *\n\t * \\@experimental\n\t */\n\tvar ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken('AnalyzeForEntryComponents');\n\t/**\n\t * Attribute decorator and metadata.\n\t *\n\t * \\@stable\n\t * \\@Annotation\n\t */\n\tvar Attribute = makeParamDecorator('Attribute', function (attributeName) { return ({ attributeName: attributeName }); });\n\t/**\n\t * Base class for query metadata.\n\t *\n\t * See {\\@link ContentChildren}, {\\@link ContentChild}, {\\@link ViewChildren}, {\\@link ViewChild} for\n\t * more information.\n\t *\n\t * \\@stable\n\t * @abstract\n\t */\n\tvar Query = (function () {\n\t    function Query() {\n\t    }\n\t    return Query;\n\t}());\n\t/**\n\t * ContentChildren decorator and metadata.\n\t *\n\t *  \\@stable\n\t *  \\@Annotation\n\t */\n\tvar ContentChildren = makePropDecorator('ContentChildren', function (selector, data) {\n\t    if (data === void 0) { data = {}; }\n\t    return (Object.assign({ selector: selector, first: false, isViewQuery: false, descendants: false }, data));\n\t}, Query);\n\t/**\n\t * ContentChild decorator and metadata.\n\t *\n\t * \\@stable\n\t * \\@Annotation\n\t */\n\tvar ContentChild = makePropDecorator('ContentChild', function (selector, data) {\n\t    if (data === void 0) { data = {}; }\n\t    return (Object.assign({ selector: selector, first: true, isViewQuery: false, descendants: true }, data));\n\t}, Query);\n\t/**\n\t * ViewChildren decorator and metadata.\n\t *\n\t * \\@stable\n\t * \\@Annotation\n\t */\n\tvar ViewChildren = makePropDecorator('ViewChildren', function (selector, data) {\n\t    if (data === void 0) { data = {}; }\n\t    return (Object.assign({ selector: selector, first: false, isViewQuery: true, descendants: true }, data));\n\t}, Query);\n\t/**\n\t * ViewChild decorator and metadata.\n\t *\n\t * \\@stable\n\t * \\@Annotation\n\t */\n\tvar ViewChild = makePropDecorator('ViewChild', function (selector, data) { return (Object.assign({ selector: selector, first: true, isViewQuery: true, descendants: true }, data)); }, Query);\n\tvar ChangeDetectionStrategy = {};\n\tChangeDetectionStrategy.OnPush = 0;\n\tChangeDetectionStrategy.Default = 1;\n\tChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = \"OnPush\";\n\tChangeDetectionStrategy[ChangeDetectionStrategy.Default] = \"Default\";\n\tvar ChangeDetectorStatus = {};\n\tChangeDetectorStatus.CheckOnce = 0;\n\tChangeDetectorStatus.Checked = 1;\n\tChangeDetectorStatus.CheckAlways = 2;\n\tChangeDetectorStatus.Detached = 3;\n\tChangeDetectorStatus.Errored = 4;\n\tChangeDetectorStatus.Destroyed = 5;\n\tChangeDetectorStatus[ChangeDetectorStatus.CheckOnce] = \"CheckOnce\";\n\tChangeDetectorStatus[ChangeDetectorStatus.Checked] = \"Checked\";\n\tChangeDetectorStatus[ChangeDetectorStatus.CheckAlways] = \"CheckAlways\";\n\tChangeDetectorStatus[ChangeDetectorStatus.Detached] = \"Detached\";\n\tChangeDetectorStatus[ChangeDetectorStatus.Errored] = \"Errored\";\n\tChangeDetectorStatus[ChangeDetectorStatus.Destroyed] = \"Destroyed\";\n\t/**\n\t * @param {?} changeDetectionStrategy\n\t * @return {?}\n\t */\n\tfunction isDefaultChangeDetectionStrategy(changeDetectionStrategy) {\n\t    return changeDetectionStrategy == null ||\n\t        changeDetectionStrategy === ChangeDetectionStrategy.Default;\n\t}\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * Directive decorator and metadata.\n\t *\n\t * \\@stable\n\t * \\@Annotation\n\t */\n\tvar Directive = makeDecorator('Directive', function (dir) {\n\t    if (dir === void 0) { dir = {}; }\n\t    return dir;\n\t});\n\t/**\n\t * Component decorator and metadata.\n\t *\n\t * \\@stable\n\t * \\@Annotation\n\t */\n\tvar Component = makeDecorator('Component', function (c) {\n\t    if (c === void 0) { c = {}; }\n\t    return (Object.assign({ changeDetection: ChangeDetectionStrategy.Default }, c));\n\t}, Directive);\n\t/**\n\t * Pipe decorator and metadata.\n\t *\n\t * \\@stable\n\t * \\@Annotation\n\t */\n\tvar Pipe = makeDecorator('Pipe', function (p) { return (Object.assign({ pure: true }, p)); });\n\t/**\n\t * Input decorator and metadata.\n\t *\n\t * \\@stable\n\t * \\@Annotation\n\t */\n\tvar Input = makePropDecorator('Input', function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); });\n\t/**\n\t * Output decorator and metadata.\n\t *\n\t * \\@stable\n\t * \\@Annotation\n\t */\n\tvar Output = makePropDecorator('Output', function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); });\n\t/**\n\t * HostBinding decorator and metadata.\n\t *\n\t * \\@stable\n\t * \\@Annotation\n\t */\n\tvar HostBinding = makePropDecorator('HostBinding', function (hostPropertyName) { return ({ hostPropertyName: hostPropertyName }); });\n\t/**\n\t * HostListener decorator and metadata.\n\t *\n\t * \\@stable\n\t * \\@Annotation\n\t */\n\tvar HostListener = makePropDecorator('HostListener', function (eventName, args) { return ({ eventName: eventName, args: args }); });\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * Defines a schema that will allow:\n\t * - any non-Angular elements with a `-` in their name,\n\t * - any properties on elements with a `-` in their name which is the common rule for custom\n\t * elements.\n\t *\n\t * \\@stable\n\t */\n\tvar CUSTOM_ELEMENTS_SCHEMA = {\n\t    name: 'custom-elements'\n\t};\n\t/**\n\t * Defines a schema that will allow any property on any element.\n\t *\n\t * \\@experimental\n\t */\n\tvar NO_ERRORS_SCHEMA = {\n\t    name: 'no-errors-schema'\n\t};\n\t/**\n\t * NgModule decorator and metadata.\n\t *\n\t * \\@stable\n\t * \\@Annotation\n\t */\n\tvar NgModule = makeDecorator('NgModule', function (ngModule) { return ngModule; });\n\tvar ViewEncapsulation = {};\n\tViewEncapsulation.Emulated = 0;\n\tViewEncapsulation.Native = 1;\n\tViewEncapsulation.None = 2;\n\tViewEncapsulation[ViewEncapsulation.Emulated] = \"Emulated\";\n\tViewEncapsulation[ViewEncapsulation.Native] = \"Native\";\n\tViewEncapsulation[ViewEncapsulation.None] = \"None\";\n\t/**\n\t * Metadata properties available for configuring Views.\n\t *\n\t * For details on the `\\@Component` annotation, see {\\@link Component}.\n\t *\n\t * ### Example\n\t *\n\t * ```\n\t * \\@Component({\n\t *   selector: 'greet',\n\t *   template: 'Hello {{name}}!',\n\t * })\n\t * class Greet {\n\t *   name: string;\n\t *\n\t *   constructor() {\n\t *     this.name = 'World';\n\t *   }\n\t * }\n\t * ```\n\t *\n\t * @deprecated Use Component instead.\n\t *\n\t * {\\@link Component}\n\t */\n\tvar ViewMetadata = (function () {\n\t    /**\n\t     * @param {?=} opts\n\t     */\n\t    function ViewMetadata(opts) {\n\t        if (opts === void 0) { opts = {}; }\n\t        this.templateUrl = opts.templateUrl;\n\t        this.template = opts.template;\n\t        this.styleUrls = opts.styleUrls;\n\t        this.styles = opts.styles;\n\t        this.encapsulation = opts.encapsulation;\n\t        this.animations = opts.animations;\n\t        this.interpolation = opts.interpolation;\n\t    }\n\t    return ViewMetadata;\n\t}());\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * \\@whatItDoes Represents the version of Angular\n\t *\n\t * \\@stable\n\t */\n\tvar Version = (function () {\n\t    /**\n\t     * @param {?} full\n\t     */\n\t    function Version(full) {\n\t        this.full = full;\n\t    }\n\t    Object.defineProperty(Version.prototype, \"major\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this.full.split('.')[0]; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(Version.prototype, \"minor\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this.full.split('.')[1]; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(Version.prototype, \"patch\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this.full.split('.').slice(2).join('.'); },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    return Version;\n\t}());\n\t/**\n\t * \\@stable\n\t */\n\tvar VERSION = new Version('4.4.6');\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * Inject decorator and metadata.\n\t *\n\t * \\@stable\n\t * \\@Annotation\n\t */\n\tvar Inject = makeParamDecorator('Inject', function (token) { return ({ token: token }); });\n\t/**\n\t * Optional decorator and metadata.\n\t *\n\t * \\@stable\n\t * \\@Annotation\n\t */\n\tvar Optional = makeParamDecorator('Optional');\n\t/**\n\t * Injectable decorator and metadata.\n\t *\n\t * \\@stable\n\t * \\@Annotation\n\t */\n\tvar Injectable = makeDecorator('Injectable');\n\t/**\n\t * Self decorator and metadata.\n\t *\n\t * \\@stable\n\t * \\@Annotation\n\t */\n\tvar Self = makeParamDecorator('Self');\n\t/**\n\t * SkipSelf decorator and metadata.\n\t *\n\t * \\@stable\n\t * \\@Annotation\n\t */\n\tvar SkipSelf = makeParamDecorator('SkipSelf');\n\t/**\n\t * Host decorator and metadata.\n\t *\n\t * \\@stable\n\t * \\@Annotation\n\t */\n\tvar Host = makeParamDecorator('Host');\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * Allows to refer to references which are not yet defined.\n\t *\n\t * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n\t * DI is declared,\n\t * but not yet defined. It is also used when the `token` which we use when creating a query is not\n\t * yet defined.\n\t *\n\t * ### Example\n\t * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n\t * \\@experimental\n\t * @param {?} forwardRefFn\n\t * @return {?}\n\t */\n\tfunction forwardRef(forwardRefFn) {\n\t    ((forwardRefFn)).__forward_ref__ = forwardRef;\n\t    ((forwardRefFn)).toString = function () { return stringify(this()); };\n\t    return (((forwardRefFn)));\n\t}\n\t/**\n\t * Lazily retrieves the reference value from a forwardRef.\n\t *\n\t * Acts as the identity function when given a non-forward-ref value.\n\t *\n\t * ### Example ([live demo](http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview))\n\t *\n\t * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n\t *\n\t * See: {\\@link forwardRef}\n\t * \\@experimental\n\t * @param {?} type\n\t * @return {?}\n\t */\n\tfunction resolveForwardRef(type) {\n\t    if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__') &&\n\t        type.__forward_ref__ === forwardRef) {\n\t        return ((type))();\n\t    }\n\t    else {\n\t        return type;\n\t    }\n\t}\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\tvar _THROW_IF_NOT_FOUND = new Object();\n\tvar THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n\tvar _NullInjector = (function () {\n\t    function _NullInjector() {\n\t    }\n\t    /**\n\t     * @param {?} token\n\t     * @param {?=} notFoundValue\n\t     * @return {?}\n\t     */\n\t    _NullInjector.prototype.get = function (token, notFoundValue) {\n\t        if (notFoundValue === void 0) { notFoundValue = _THROW_IF_NOT_FOUND; }\n\t        if (notFoundValue === _THROW_IF_NOT_FOUND) {\n\t            throw new Error(\"No provider for \" + stringify(token) + \"!\");\n\t        }\n\t        return notFoundValue;\n\t    };\n\t    return _NullInjector;\n\t}());\n\t/**\n\t * \\@whatItDoes Injector interface\n\t * \\@howToUse\n\t * ```\n\t * const injector: Injector = ...;\n\t * injector.get(...);\n\t * ```\n\t *\n\t * \\@description\n\t * For more details, see the {\\@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n\t *\n\t * ### Example\n\t *\n\t * {\\@example core/di/ts/injector_spec.ts region='Injector'}\n\t *\n\t * `Injector` returns itself when given `Injector` as a token:\n\t * {\\@example core/di/ts/injector_spec.ts region='injectInjector'}\n\t *\n\t * \\@stable\n\t * @abstract\n\t */\n\tvar Injector = (function () {\n\t    function Injector() {\n\t    }\n\t    /**\n\t     * Retrieves an instance from the injector based on the provided token.\n\t     * If not found:\n\t     * - Throws an error if no `notFoundValue` that is not equal to\n\t     * Injector.THROW_IF_NOT_FOUND is given\n\t     * - Returns the `notFoundValue` otherwise\n\t     * @abstract\n\t     * @template T\n\t     * @param {?} token\n\t     * @param {?=} notFoundValue\n\t     * @return {?}\n\t     */\n\t    Injector.prototype.get = function (token, notFoundValue) { };\n\t    /**\n\t     * @deprecated from v4.0.0 use Type<T> or InjectionToken<T>\n\t     * @suppress {duplicate}\n\t     * @abstract\n\t     * @param {?} token\n\t     * @param {?=} notFoundValue\n\t     * @return {?}\n\t     */\n\t    Injector.prototype.get = function (token, notFoundValue) { };\n\t    return Injector;\n\t}());\n\tInjector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n\tInjector.NULL = new _NullInjector();\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\tvar ERROR_COMPONENT_TYPE = 'ngComponentType';\n\tvar ERROR_DEBUG_CONTEXT = 'ngDebugContext';\n\tvar ERROR_ORIGINAL_ERROR = 'ngOriginalError';\n\tvar ERROR_LOGGER = 'ngErrorLogger';\n\t/**\n\t * @param {?} error\n\t * @return {?}\n\t */\n\t/**\n\t * @param {?} error\n\t * @return {?}\n\t */\n\tfunction getDebugContext(error) {\n\t    return ((error))[ERROR_DEBUG_CONTEXT];\n\t}\n\t/**\n\t * @param {?} error\n\t * @return {?}\n\t */\n\tfunction getOriginalError(error) {\n\t    return ((error))[ERROR_ORIGINAL_ERROR];\n\t}\n\t/**\n\t * @param {?} error\n\t * @return {?}\n\t */\n\tfunction getErrorLogger(error) {\n\t    return ((error))[ERROR_LOGGER] || defaultErrorLogger;\n\t}\n\t/**\n\t * @param {?} console\n\t * @param {...?} values\n\t * @return {?}\n\t */\n\tfunction defaultErrorLogger(console) {\n\t    var values = [];\n\t    for (var _i = 1; _i < arguments.length; _i++) {\n\t        values[_i - 1] = arguments[_i];\n\t    }\n\t    console.error.apply(console, values);\n\t}\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * \\@whatItDoes Provides a hook for centralized exception handling.\n\t *\n\t * \\@description\n\t *\n\t * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n\t * intercept error handling, write a custom exception handler that replaces this default as\n\t * appropriate for your app.\n\t *\n\t * ### Example\n\t *\n\t * ```\n\t * class MyErrorHandler implements ErrorHandler {\n\t *   handleError(error) {\n\t *     // do something with the exception\n\t *   }\n\t * }\n\t *\n\t * \\@NgModule({\n\t *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n\t * })\n\t * class MyModule {}\n\t * ```\n\t *\n\t * \\@stable\n\t */\n\tvar ErrorHandler = (function () {\n\t    /**\n\t     * @param {?=} deprecatedParameter\n\t     */\n\t    function ErrorHandler(\n\t        /**\n\t         * @deprecated since v4.0 parameter no longer has an effect, as ErrorHandler will never\n\t         * rethrow.\n\t         */\n\t        deprecatedParameter) {\n\t        /**\n\t         * \\@internal\n\t         */\n\t        this._console = console;\n\t    }\n\t    /**\n\t     * @param {?} error\n\t     * @return {?}\n\t     */\n\t    ErrorHandler.prototype.handleError = function (error) {\n\t        var /** @type {?} */ originalError = this._findOriginalError(error);\n\t        var /** @type {?} */ context = this._findContext(error);\n\t        // Note: Browser consoles show the place from where console.error was called.\n\t        // We can use this to give users additional information about the error.\n\t        var /** @type {?} */ errorLogger = getErrorLogger(error);\n\t        errorLogger(this._console, \"ERROR\", error);\n\t        if (originalError) {\n\t            errorLogger(this._console, \"ORIGINAL ERROR\", originalError);\n\t        }\n\t        if (context) {\n\t            errorLogger(this._console, 'ERROR CONTEXT', context);\n\t        }\n\t    };\n\t    /**\n\t     * \\@internal\n\t     * @param {?} error\n\t     * @return {?}\n\t     */\n\t    ErrorHandler.prototype._findContext = function (error) {\n\t        if (error) {\n\t            return getDebugContext(error) ? getDebugContext(error) :\n\t                this._findContext(getOriginalError(error));\n\t        }\n\t        return null;\n\t    };\n\t    /**\n\t     * \\@internal\n\t     * @param {?} error\n\t     * @return {?}\n\t     */\n\t    ErrorHandler.prototype._findOriginalError = function (error) {\n\t        var /** @type {?} */ e = getOriginalError(error);\n\t        while (e && getOriginalError(e)) {\n\t            e = getOriginalError(e);\n\t        }\n\t        return e;\n\t    };\n\t    return ErrorHandler;\n\t}());\n\t/**\n\t * @param {?} message\n\t * @param {?} originalError\n\t * @return {?}\n\t */\n\tfunction wrappedError(message, originalError) {\n\t    var /** @type {?} */ msg = message + \" caused by: \" + (originalError instanceof Error ? originalError.message : originalError);\n\t    var /** @type {?} */ error = Error(msg);\n\t    ((error))[ERROR_ORIGINAL_ERROR] = originalError;\n\t    return error;\n\t}\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * @param {?} keys\n\t * @return {?}\n\t */\n\tfunction findFirstClosedCycle(keys) {\n\t    var /** @type {?} */ res = [];\n\t    for (var /** @type {?} */ i = 0; i < keys.length; ++i) {\n\t        if (res.indexOf(keys[i]) > -1) {\n\t            res.push(keys[i]);\n\t            return res;\n\t        }\n\t        res.push(keys[i]);\n\t    }\n\t    return res;\n\t}\n\t/**\n\t * @param {?} keys\n\t * @return {?}\n\t */\n\tfunction constructResolvingPath(keys) {\n\t    if (keys.length > 1) {\n\t        var /** @type {?} */ reversed = findFirstClosedCycle(keys.slice().reverse());\n\t        var /** @type {?} */ tokenStrs = reversed.map(function (k) { return stringify(k.token); });\n\t        return ' (' + tokenStrs.join(' -> ') + ')';\n\t    }\n\t    return '';\n\t}\n\t/**\n\t * @param {?} injector\n\t * @param {?} key\n\t * @param {?} constructResolvingMessage\n\t * @param {?=} originalError\n\t * @return {?}\n\t */\n\tfunction injectionError(injector, key, constructResolvingMessage, originalError) {\n\t    var /** @type {?} */ keys = [key];\n\t    var /** @type {?} */ errMsg = constructResolvingMessage(keys);\n\t    var /** @type {?} */ error = ((originalError ? wrappedError(errMsg, originalError) : Error(errMsg)));\n\t    error.addKey = addKey;\n\t    error.keys = keys;\n\t    error.injectors = [injector];\n\t    error.constructResolvingMessage = constructResolvingMessage;\n\t    ((error))[ERROR_ORIGINAL_ERROR] = originalError;\n\t    return error;\n\t}\n\t/**\n\t * @this {?}\n\t * @param {?} injector\n\t * @param {?} key\n\t * @return {?}\n\t */\n\tfunction addKey(injector, key) {\n\t    this.injectors.push(injector);\n\t    this.keys.push(key);\n\t    // Note: This updated message won't be reflected in the `.stack` property\n\t    this.message = this.constructResolvingMessage(this.keys);\n\t}\n\t/**\n\t * Thrown when trying to retrieve a dependency by key from {\\@link Injector}, but the\n\t * {\\@link Injector} does not have a {\\@link Provider} for the given key.\n\t *\n\t * ### Example ([live demo](http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview))\n\t *\n\t * ```typescript\n\t * class A {\n\t *   constructor(b:B) {}\n\t * }\n\t *\n\t * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n\t * ```\n\t * @param {?} injector\n\t * @param {?} key\n\t * @return {?}\n\t */\n\tfunction noProviderError(injector, key) {\n\t    return injectionError(injector, key, function (keys) {\n\t        var /** @type {?} */ first = stringify(keys[0].token);\n\t        return \"No provider for \" + first + \"!\" + constructResolvingPath(keys);\n\t    });\n\t}\n\t/**\n\t * Thrown when dependencies form a cycle.\n\t *\n\t * ### Example ([live demo](http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info))\n\t *\n\t * ```typescript\n\t * var injector = Injector.resolveAndCreate([\n\t *   {provide: \"one\", useFactory: (two) => \"two\", deps: [[new Inject(\"two\")]]},\n\t *   {provide: \"two\", useFactory: (one) => \"one\", deps: [[new Inject(\"one\")]]}\n\t * ]);\n\t *\n\t * expect(() => injector.get(\"one\")).toThrowError();\n\t * ```\n\t *\n\t * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.\n\t * @param {?} injector\n\t * @param {?} key\n\t * @return {?}\n\t */\n\tfunction cyclicDependencyError(injector, key) {\n\t    return injectionError(injector, key, function (keys) {\n\t        return \"Cannot instantiate cyclic dependency!\" + constructResolvingPath(keys);\n\t    });\n\t}\n\t/**\n\t * Thrown when a constructing type returns with an Error.\n\t *\n\t * The `InstantiationError` class contains the original error plus the dependency graph which caused\n\t * this object to be instantiated.\n\t *\n\t * ### Example ([live demo](http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview))\n\t *\n\t * ```typescript\n\t * class A {\n\t *   constructor() {\n\t *     throw new Error('message');\n\t *   }\n\t * }\n\t *\n\t * var injector = Injector.resolveAndCreate([A]);\n\t * try {\n\t *   injector.get(A);\n\t * } catch (e) {\n\t *   expect(e instanceof InstantiationError).toBe(true);\n\t *   expect(e.originalException.message).toEqual(\"message\");\n\t *   expect(e.originalStack).toBeDefined();\n\t * }\n\t * ```\n\t * @param {?} injector\n\t * @param {?} originalException\n\t * @param {?} originalStack\n\t * @param {?} key\n\t * @return {?}\n\t */\n\tfunction instantiationError(injector, originalException, originalStack, key) {\n\t    return injectionError(injector, key, function (keys) {\n\t        var /** @type {?} */ first = stringify(keys[0].token);\n\t        return originalException.message + \": Error during instantiation of \" + first + \"!\" + constructResolvingPath(keys) + \".\";\n\t    }, originalException);\n\t}\n\t/**\n\t * Thrown when an object other then {\\@link Provider} (or `Type`) is passed to {\\@link Injector}\n\t * creation.\n\t *\n\t * ### Example ([live demo](http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview))\n\t *\n\t * ```typescript\n\t * expect(() => Injector.resolveAndCreate([\"not a type\"])).toThrowError();\n\t * ```\n\t * @param {?} provider\n\t * @return {?}\n\t */\n\tfunction invalidProviderError(provider) {\n\t    return Error(\"Invalid provider - only instances of Provider and Type are allowed, got: \" + provider);\n\t}\n\t/**\n\t * Thrown when the class has no annotation information.\n\t *\n\t * Lack of annotation information prevents the {\\@link Injector} from determining which dependencies\n\t * need to be injected into the constructor.\n\t *\n\t * ### Example ([live demo](http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview))\n\t *\n\t * ```typescript\n\t * class A {\n\t *   constructor(b) {}\n\t * }\n\t *\n\t * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n\t * ```\n\t *\n\t * This error is also thrown when the class not marked with {\\@link Injectable} has parameter types.\n\t *\n\t * ```typescript\n\t * class B {}\n\t *\n\t * class A {\n\t *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.\n\t * }\n\t *\n\t * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();\n\t * ```\n\t * \\@stable\n\t * @param {?} typeOrFunc\n\t * @param {?} params\n\t * @return {?}\n\t */\n\tfunction noAnnotationError(typeOrFunc, params) {\n\t    var /** @type {?} */ signature = [];\n\t    for (var /** @type {?} */ i = 0, /** @type {?} */ ii = params.length; i < ii; i++) {\n\t        var /** @type {?} */ parameter = params[i];\n\t        if (!parameter || parameter.length == 0) {\n\t            signature.push('?');\n\t        }\n\t        else {\n\t            signature.push(parameter.map(stringify).join(' '));\n\t        }\n\t    }\n\t    return Error('Cannot resolve all parameters for \\'' + stringify(typeOrFunc) + '\\'(' +\n\t        signature.join(', ') + '). ' +\n\t        'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \\'' +\n\t        stringify(typeOrFunc) + '\\' is decorated with Injectable.');\n\t}\n\t/**\n\t * Thrown when getting an object by index.\n\t *\n\t * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))\n\t *\n\t * ```typescript\n\t * class A {}\n\t *\n\t * var injector = Injector.resolveAndCreate([A]);\n\t *\n\t * expect(() => injector.getAt(100)).toThrowError();\n\t * ```\n\t * \\@stable\n\t * @param {?} index\n\t * @return {?}\n\t */\n\tfunction outOfBoundsError(index) {\n\t    return Error(\"Index \" + index + \" is out-of-bounds.\");\n\t}\n\t/**\n\t * Thrown when a multi provider and a regular provider are bound to the same token.\n\t *\n\t * ### Example\n\t *\n\t * ```typescript\n\t * expect(() => Injector.resolveAndCreate([\n\t *   { provide: \"Strings\", useValue: \"string1\", multi: true},\n\t *   { provide: \"Strings\", useValue: \"string2\", multi: false}\n\t * ])).toThrowError();\n\t * ```\n\t * @param {?} provider1\n\t * @param {?} provider2\n\t * @return {?}\n\t */\n\tfunction mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {\n\t    return Error(\"Cannot mix multi providers and regular providers, got: \" + provider1 + \" \" + provider2);\n\t}\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * A unique object used for retrieving items from the {\\@link ReflectiveInjector}.\n\t *\n\t * Keys have:\n\t * - a system-wide unique `id`.\n\t * - a `token`.\n\t *\n\t * `Key` is used internally by {\\@link ReflectiveInjector} because its system-wide unique `id` allows\n\t * the\n\t * injector to store created objects in a more efficient way.\n\t *\n\t * `Key` should not be created directly. {\\@link ReflectiveInjector} creates keys automatically when\n\t * resolving\n\t * providers.\n\t * \\@experimental\n\t */\n\tvar ReflectiveKey = (function () {\n\t    /**\n\t     * Private\n\t     * @param {?} token\n\t     * @param {?} id\n\t     */\n\t    function ReflectiveKey(token, id) {\n\t        this.token = token;\n\t        this.id = id;\n\t        if (!token) {\n\t            throw new Error('Token must be defined!');\n\t        }\n\t    }\n\t    Object.defineProperty(ReflectiveKey.prototype, \"displayName\", {\n\t        /**\n\t         * Returns a stringified token.\n\t         * @return {?}\n\t         */\n\t        get: function () { return stringify(this.token); },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    /**\n\t     * Retrieves a `Key` for a token.\n\t     * @param {?} token\n\t     * @return {?}\n\t     */\n\t    ReflectiveKey.get = function (token) {\n\t        return _globalKeyRegistry.get(resolveForwardRef(token));\n\t    };\n\t    Object.defineProperty(ReflectiveKey, \"numberOfKeys\", {\n\t        /**\n\t         * @return {?} the number of keys registered in the system.\n\t         */\n\t        get: function () { return _globalKeyRegistry.numberOfKeys; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    return ReflectiveKey;\n\t}());\n\t/**\n\t * \\@internal\n\t */\n\tvar KeyRegistry = (function () {\n\t    function KeyRegistry() {\n\t        this._allKeys = new Map();\n\t    }\n\t    /**\n\t     * @param {?} token\n\t     * @return {?}\n\t     */\n\t    KeyRegistry.prototype.get = function (token) {\n\t        if (token instanceof ReflectiveKey)\n\t            return token;\n\t        if (this._allKeys.has(token)) {\n\t            return ((this._allKeys.get(token)));\n\t        }\n\t        var /** @type {?} */ newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);\n\t        this._allKeys.set(token, newKey);\n\t        return newKey;\n\t    };\n\t    Object.defineProperty(KeyRegistry.prototype, \"numberOfKeys\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this._allKeys.size; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    return KeyRegistry;\n\t}());\n\tvar _globalKeyRegistry = new KeyRegistry();\n\t/**\n\t * \\@whatItDoes Represents a type that a Component or other object is instances of.\n\t *\n\t * \\@description\n\t *\n\t * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by\n\t * the `MyCustomComponent` constructor function.\n\t *\n\t * \\@stable\n\t */\n\tvar Type = Function;\n\t/**\n\t * @param {?} v\n\t * @return {?}\n\t */\n\tfunction isType(v) {\n\t    return typeof v === 'function';\n\t}\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * Attention: This regex has to hold even if the code is minified!\n\t */\n\tvar DELEGATE_CTOR = /^function\\s+\\S+\\(\\)\\s*{[\\s\\S]+\\.apply\\(this,\\s*arguments\\)/;\n\tvar ReflectionCapabilities = (function () {\n\t    /**\n\t     * @param {?=} reflect\n\t     */\n\t    function ReflectionCapabilities(reflect) {\n\t        this._reflect = reflect || _global['Reflect'];\n\t    }\n\t    /**\n\t     * @return {?}\n\t     */\n\t    ReflectionCapabilities.prototype.isReflectionEnabled = function () { return true; };\n\t    /**\n\t     * @template T\n\t     * @param {?} t\n\t     * @return {?}\n\t     */\n\t    ReflectionCapabilities.prototype.factory = function (t) { return function () {\n\t        var args = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            args[_i] = arguments[_i];\n\t        }\n\t        return new (t.bind.apply(t, [void 0].concat(args)))();\n\t    }; };\n\t    /**\n\t     * \\@internal\n\t     * @param {?} paramTypes\n\t     * @param {?} paramAnnotations\n\t     * @return {?}\n\t     */\n\t    ReflectionCapabilities.prototype._zipTypesAndAnnotations = function (paramTypes, paramAnnotations) {\n\t        var /** @type {?} */ result;\n\t        if (typeof paramTypes === 'undefined') {\n\t            result = new Array(paramAnnotations.length);\n\t        }\n\t        else {\n\t            result = new Array(paramTypes.length);\n\t        }\n\t        for (var /** @type {?} */ i = 0; i < result.length; i++) {\n\t            // TS outputs Object for parameters without types, while Traceur omits\n\t            // the annotations. For now we preserve the Traceur behavior to aid\n\t            // migration, but this can be revisited.\n\t            if (typeof paramTypes === 'undefined') {\n\t                result[i] = [];\n\t            }\n\t            else if (paramTypes[i] != Object) {\n\t                result[i] = [paramTypes[i]];\n\t            }\n\t            else {\n\t                result[i] = [];\n\t            }\n\t            if (paramAnnotations && paramAnnotations[i] != null) {\n\t                result[i] = result[i].concat(paramAnnotations[i]);\n\t            }\n\t        }\n\t        return result;\n\t    };\n\t    /**\n\t     * @param {?} type\n\t     * @param {?} parentCtor\n\t     * @return {?}\n\t     */\n\t    ReflectionCapabilities.prototype._ownParameters = function (type, parentCtor) {\n\t        // If we have no decorators, we only have function.length as metadata.\n\t        // In that case, to detect whether a child class declared an own constructor or not,\n\t        // we need to look inside of that constructor to check whether it is\n\t        // just calling the parent.\n\t        // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\n\t        // that sets 'design:paramtypes' to []\n\t        // if a class inherits from another class but has no ctor declared itself.\n\t        if (DELEGATE_CTOR.exec(type.toString())) {\n\t            return null;\n\t        }\n\t        // Prefer the direct API.\n\t        if (((type)).parameters && ((type)).parameters !== parentCtor.parameters) {\n\t            return ((type)).parameters;\n\t        }\n\t        // API of tsickle for lowering decorators to properties on the class.\n\t        var /** @type {?} */ tsickleCtorParams = ((type)).ctorParameters;\n\t        if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\n\t            // Newer tsickle uses a function closure\n\t            // Retain the non-function case for compatibility with older tsickle\n\t            var /** @type {?} */ ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\n\t            var /** @type {?} */ paramTypes = ctorParameters.map(function (ctorParam) { return ctorParam && ctorParam.type; });\n\t            var /** @type {?} */ paramAnnotations = ctorParameters.map(function (ctorParam) { return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators); });\n\t            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n\t        }\n\t        // API for metadata created by invoking the decorators.\n\t        if (this._reflect != null && this._reflect.getOwnMetadata != null) {\n\t            var /** @type {?} */ paramAnnotations = this._reflect.getOwnMetadata('parameters', type);\n\t            var /** @type {?} */ paramTypes = this._reflect.getOwnMetadata('design:paramtypes', type);\n\t            if (paramTypes || paramAnnotations) {\n\t                return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n\t            }\n\t        }\n\t        // If a class has no decorators, at least create metadata\n\t        // based on function.length.\n\t        // Note: We know that this is a real constructor as we checked\n\t        // the content of the constructor above.\n\t        return new Array(((type.length))).fill(undefined);\n\t    };\n\t    /**\n\t     * @param {?} type\n\t     * @return {?}\n\t     */\n\t    ReflectionCapabilities.prototype.parameters = function (type) {\n\t        // Note: only report metadata if we have at least one class decorator\n\t        // to stay in sync with the static reflector.\n\t        if (!isType(type)) {\n\t            return [];\n\t        }\n\t        var /** @type {?} */ parentCtor = getParentCtor(type);\n\t        var /** @type {?} */ parameters = this._ownParameters(type, parentCtor);\n\t        if (!parameters && parentCtor !== Object) {\n\t            parameters = this.parameters(parentCtor);\n\t        }\n\t        return parameters || [];\n\t    };\n\t    /**\n\t     * @param {?} typeOrFunc\n\t     * @param {?} parentCtor\n\t     * @return {?}\n\t     */\n\t    ReflectionCapabilities.prototype._ownAnnotations = function (typeOrFunc, parentCtor) {\n\t        // Prefer the direct API.\n\t        if (((typeOrFunc)).annotations && ((typeOrFunc)).annotations !== parentCtor.annotations) {\n\t            var /** @type {?} */ annotations = ((typeOrFunc)).annotations;\n\t            if (typeof annotations === 'function' && annotations.annotations) {\n\t                annotations = annotations.annotations;\n\t            }\n\t            return annotations;\n\t        }\n\t        // API of tsickle for lowering decorators to properties on the class.\n\t        if (((typeOrFunc)).decorators && ((typeOrFunc)).decorators !== parentCtor.decorators) {\n\t            return convertTsickleDecoratorIntoMetadata(((typeOrFunc)).decorators);\n\t        }\n\t        // API for metadata created by invoking the decorators.\n\t        if (this._reflect && this._reflect.getOwnMetadata) {\n\t            return this._reflect.getOwnMetadata('annotations', typeOrFunc);\n\t        }\n\t        return null;\n\t    };\n\t    /**\n\t     * @param {?} typeOrFunc\n\t     * @return {?}\n\t     */\n\t    ReflectionCapabilities.prototype.annotations = function (typeOrFunc) {\n\t        if (!isType(typeOrFunc)) {\n\t            return [];\n\t        }\n\t        var /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);\n\t        var /** @type {?} */ ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\n\t        var /** @type {?} */ parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\n\t        return parentAnnotations.concat(ownAnnotations);\n\t    };\n\t    /**\n\t     * @param {?} typeOrFunc\n\t     * @param {?} parentCtor\n\t     * @return {?}\n\t     */\n\t    ReflectionCapabilities.prototype._ownPropMetadata = function (typeOrFunc, parentCtor) {\n\t        // Prefer the direct API.\n\t        if (((typeOrFunc)).propMetadata &&\n\t            ((typeOrFunc)).propMetadata !== parentCtor.propMetadata) {\n\t            var /** @type {?} */ propMetadata = ((typeOrFunc)).propMetadata;\n\t            if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\n\t                propMetadata = propMetadata.propMetadata;\n\t            }\n\t            return propMetadata;\n\t        }\n\t        // API of tsickle for lowering decorators to properties on the class.\n\t        if (((typeOrFunc)).propDecorators &&\n\t            ((typeOrFunc)).propDecorators !== parentCtor.propDecorators) {\n\t            var /** @type {?} */ propDecorators_1 = ((typeOrFunc)).propDecorators;\n\t            var /** @type {?} */ propMetadata_1 = ({});\n\t            Object.keys(propDecorators_1).forEach(function (prop) {\n\t                propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);\n\t            });\n\t            return propMetadata_1;\n\t        }\n\t        // API for metadata created by invoking the decorators.\n\t        if (this._reflect && this._reflect.getOwnMetadata) {\n\t            return this._reflect.getOwnMetadata('propMetadata', typeOrFunc);\n\t        }\n\t        return null;\n\t    };\n\t    /**\n\t     * @param {?} typeOrFunc\n\t     * @return {?}\n\t     */\n\t    ReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {\n\t        if (!isType(typeOrFunc)) {\n\t            return {};\n\t        }\n\t        var /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);\n\t        var /** @type {?} */ propMetadata = {};\n\t        if (parentCtor !== Object) {\n\t            var /** @type {?} */ parentPropMetadata_1 = this.propMetadata(parentCtor);\n\t            Object.keys(parentPropMetadata_1).forEach(function (propName) {\n\t                propMetadata[propName] = parentPropMetadata_1[propName];\n\t            });\n\t        }\n\t        var /** @type {?} */ ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\n\t        if (ownPropMetadata) {\n\t            Object.keys(ownPropMetadata).forEach(function (propName) {\n\t                var /** @type {?} */ decorators = [];\n\t                if (propMetadata.hasOwnProperty(propName)) {\n\t                    decorators.push.apply(decorators, propMetadata[propName]);\n\t                }\n\t                decorators.push.apply(decorators, ownPropMetadata[propName]);\n\t                propMetadata[propName] = decorators;\n\t            });\n\t        }\n\t        return propMetadata;\n\t    };\n\t    /**\n\t     * @param {?} type\n\t     * @param {?} lcProperty\n\t     * @return {?}\n\t     */\n\t    ReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcProperty) {\n\t        return type instanceof Type && lcProperty in type.prototype;\n\t    };\n\t    /**\n\t     * @param {?} name\n\t     * @return {?}\n\t     */\n\t    ReflectionCapabilities.prototype.getter = function (name) { return (new Function('o', 'return o.' + name + ';')); };\n\t    /**\n\t     * @param {?} name\n\t     * @return {?}\n\t     */\n\t    ReflectionCapabilities.prototype.setter = function (name) {\n\t        return (new Function('o', 'v', 'return o.' + name + ' = v;'));\n\t    };\n\t    /**\n\t     * @param {?} name\n\t     * @return {?}\n\t     */\n\t    ReflectionCapabilities.prototype.method = function (name) {\n\t        var /** @type {?} */ functionBody = \"if (!o.\" + name + \") throw new Error('\\\"\" + name + \"\\\" is undefined');\\n        return o.\" + name + \".apply(o, args);\";\n\t        return (new Function('o', 'args', functionBody));\n\t    };\n\t    /**\n\t     * @param {?} type\n\t     * @return {?}\n\t     */\n\t    ReflectionCapabilities.prototype.importUri = function (type) {\n\t        // StaticSymbol\n\t        if (typeof type === 'object' && type['filePath']) {\n\t            return type['filePath'];\n\t        }\n\t        // Runtime type\n\t        return \"./\" + stringify(type);\n\t    };\n\t    /**\n\t     * @param {?} type\n\t     * @return {?}\n\t     */\n\t    ReflectionCapabilities.prototype.resourceUri = function (type) { return \"./\" + stringify(type); };\n\t    /**\n\t     * @param {?} name\n\t     * @param {?} moduleUrl\n\t     * @param {?} members\n\t     * @param {?} runtime\n\t     * @return {?}\n\t     */\n\t    ReflectionCapabilities.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) {\n\t        return runtime;\n\t    };\n\t    /**\n\t     * @param {?} enumIdentifier\n\t     * @param {?} name\n\t     * @return {?}\n\t     */\n\t    ReflectionCapabilities.prototype.resolveEnum = function (enumIdentifier, name) { return enumIdentifier[name]; };\n\t    return ReflectionCapabilities;\n\t}());\n\t/**\n\t * @param {?} decoratorInvocations\n\t * @return {?}\n\t */\n\tfunction convertTsickleDecoratorIntoMetadata(decoratorInvocations) {\n\t    if (!decoratorInvocations) {\n\t        return [];\n\t    }\n\t    return decoratorInvocations.map(function (decoratorInvocation) {\n\t        var /** @type {?} */ decoratorType = decoratorInvocation.type;\n\t        var /** @type {?} */ annotationCls = decoratorType.annotationCls;\n\t        var /** @type {?} */ annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\n\t        return new (annotationCls.bind.apply(annotationCls, [void 0].concat(annotationArgs)))();\n\t    });\n\t}\n\t/**\n\t * @param {?} ctor\n\t * @return {?}\n\t */\n\tfunction getParentCtor(ctor) {\n\t    var /** @type {?} */ parentProto = Object.getPrototypeOf(ctor.prototype);\n\t    var /** @type {?} */ parentCtor = parentProto ? parentProto.constructor : null;\n\t    // Note: We always use `Object` as the null value\n\t    // to simplify checking later on.\n\t    return parentCtor || Object;\n\t}\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * Provides access to reflection data about symbols. Used internally by Angular\n\t * to power dependency injection and compilation.\n\t */\n\tvar Reflector = (function () {\n\t    /**\n\t     * @param {?} reflectionCapabilities\n\t     */\n\t    function Reflector(reflectionCapabilities) {\n\t        this.reflectionCapabilities = reflectionCapabilities;\n\t    }\n\t    /**\n\t     * @param {?} caps\n\t     * @return {?}\n\t     */\n\t    Reflector.prototype.updateCapabilities = function (caps) { this.reflectionCapabilities = caps; };\n\t    /**\n\t     * @param {?} type\n\t     * @return {?}\n\t     */\n\t    Reflector.prototype.factory = function (type) { return this.reflectionCapabilities.factory(type); };\n\t    /**\n\t     * @param {?} typeOrFunc\n\t     * @return {?}\n\t     */\n\t    Reflector.prototype.parameters = function (typeOrFunc) {\n\t        return this.reflectionCapabilities.parameters(typeOrFunc);\n\t    };\n\t    /**\n\t     * @param {?} typeOrFunc\n\t     * @return {?}\n\t     */\n\t    Reflector.prototype.annotations = function (typeOrFunc) {\n\t        return this.reflectionCapabilities.annotations(typeOrFunc);\n\t    };\n\t    /**\n\t     * @param {?} typeOrFunc\n\t     * @return {?}\n\t     */\n\t    Reflector.prototype.propMetadata = function (typeOrFunc) {\n\t        return this.reflectionCapabilities.propMetadata(typeOrFunc);\n\t    };\n\t    /**\n\t     * @param {?} type\n\t     * @param {?} lcProperty\n\t     * @return {?}\n\t     */\n\t    Reflector.prototype.hasLifecycleHook = function (type, lcProperty) {\n\t        return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);\n\t    };\n\t    /**\n\t     * @param {?} name\n\t     * @return {?}\n\t     */\n\t    Reflector.prototype.getter = function (name) { return this.reflectionCapabilities.getter(name); };\n\t    /**\n\t     * @param {?} name\n\t     * @return {?}\n\t     */\n\t    Reflector.prototype.setter = function (name) { return this.reflectionCapabilities.setter(name); };\n\t    /**\n\t     * @param {?} name\n\t     * @return {?}\n\t     */\n\t    Reflector.prototype.method = function (name) { return this.reflectionCapabilities.method(name); };\n\t    /**\n\t     * @param {?} type\n\t     * @return {?}\n\t     */\n\t    Reflector.prototype.importUri = function (type) { return this.reflectionCapabilities.importUri(type); };\n\t    /**\n\t     * @param {?} type\n\t     * @return {?}\n\t     */\n\t    Reflector.prototype.resourceUri = function (type) { return this.reflectionCapabilities.resourceUri(type); };\n\t    /**\n\t     * @param {?} name\n\t     * @param {?} moduleUrl\n\t     * @param {?} members\n\t     * @param {?} runtime\n\t     * @return {?}\n\t     */\n\t    Reflector.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) {\n\t        return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);\n\t    };\n\t    /**\n\t     * @param {?} identifier\n\t     * @param {?} name\n\t     * @return {?}\n\t     */\n\t    Reflector.prototype.resolveEnum = function (identifier, name) {\n\t        return this.reflectionCapabilities.resolveEnum(identifier, name);\n\t    };\n\t    return Reflector;\n\t}());\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * The {\\@link Reflector} used internally in Angular to access metadata\n\t * about symbols.\n\t */\n\tvar reflector = new Reflector(new ReflectionCapabilities());\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * `Dependency` is used by the framework to extend DI.\n\t * This is internal to Angular and should not be used directly.\n\t */\n\tvar ReflectiveDependency = (function () {\n\t    /**\n\t     * @param {?} key\n\t     * @param {?} optional\n\t     * @param {?} visibility\n\t     */\n\t    function ReflectiveDependency(key, optional, visibility) {\n\t        this.key = key;\n\t        this.optional = optional;\n\t        this.visibility = visibility;\n\t    }\n\t    /**\n\t     * @param {?} key\n\t     * @return {?}\n\t     */\n\t    ReflectiveDependency.fromKey = function (key) {\n\t        return new ReflectiveDependency(key, false, null);\n\t    };\n\t    return ReflectiveDependency;\n\t}());\n\tvar _EMPTY_LIST = [];\n\tvar ResolvedReflectiveProvider_ = (function () {\n\t    /**\n\t     * @param {?} key\n\t     * @param {?} resolvedFactories\n\t     * @param {?} multiProvider\n\t     */\n\t    function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {\n\t        this.key = key;\n\t        this.resolvedFactories = resolvedFactories;\n\t        this.multiProvider = multiProvider;\n\t    }\n\t    Object.defineProperty(ResolvedReflectiveProvider_.prototype, \"resolvedFactory\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this.resolvedFactories[0]; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    return ResolvedReflectiveProvider_;\n\t}());\n\t/**\n\t * An internal resolved representation of a factory function created by resolving {\\@link\n\t * Provider}.\n\t * \\@experimental\n\t */\n\tvar ResolvedReflectiveFactory = (function () {\n\t    /**\n\t     * @param {?} factory\n\t     * @param {?} dependencies\n\t     */\n\t    function ResolvedReflectiveFactory(factory, dependencies) {\n\t        this.factory = factory;\n\t        this.dependencies = dependencies;\n\t    }\n\t    return ResolvedReflectiveFactory;\n\t}());\n\t/**\n\t * Resolve a single provider.\n\t * @param {?} provider\n\t * @return {?}\n\t */\n\tfunction resolveReflectiveFactory(provider) {\n\t    var /** @type {?} */ factoryFn;\n\t    var /** @type {?} */ resolvedDeps;\n\t    if (provider.useClass) {\n\t        var /** @type {?} */ useClass = resolveForwardRef(provider.useClass);\n\t        factoryFn = reflector.factory(useClass);\n\t        resolvedDeps = _dependenciesFor(useClass);\n\t    }\n\t    else if (provider.useExisting) {\n\t        factoryFn = function (aliasInstance) { return aliasInstance; };\n\t        resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];\n\t    }\n\t    else if (provider.useFactory) {\n\t        factoryFn = provider.useFactory;\n\t        resolvedDeps = constructDependencies(provider.useFactory, provider.deps);\n\t    }\n\t    else {\n\t        factoryFn = function () { return provider.useValue; };\n\t        resolvedDeps = _EMPTY_LIST;\n\t    }\n\t    return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);\n\t}\n\t/**\n\t * Converts the {\\@link Provider} into {\\@link ResolvedProvider}.\n\t *\n\t * {\\@link Injector} internally only uses {\\@link ResolvedProvider}, {\\@link Provider} contains\n\t * convenience provider syntax.\n\t * @param {?} provider\n\t * @return {?}\n\t */\n\tfunction resolveReflectiveProvider(provider) {\n\t    return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || false);\n\t}\n\t/**\n\t * Resolve a list of Providers.\n\t * @param {?} providers\n\t * @return {?}\n\t */\n\tfunction resolveReflectiveProviders(providers) {\n\t    var /** @type {?} */ normalized = _normalizeProviders(providers, []);\n\t    var /** @type {?} */ resolved = normalized.map(resolveReflectiveProvider);\n\t    var /** @type {?} */ resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());\n\t    return Array.from(resolvedProviderMap.values());\n\t}\n\t/**\n\t * Merges a list of ResolvedProviders into a list where\n\t * each key is contained exactly once and multi providers\n\t * have been merged.\n\t * @param {?} providers\n\t * @param {?} normalizedProvidersMap\n\t * @return {?}\n\t */\n\tfunction mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {\n\t    for (var /** @type {?} */ i = 0; i < providers.length; i++) {\n\t        var /** @type {?} */ provider = providers[i];\n\t        var /** @type {?} */ existing = normalizedProvidersMap.get(provider.key.id);\n\t        if (existing) {\n\t            if (provider.multiProvider !== existing.multiProvider) {\n\t                throw mixingMultiProvidersWithRegularProvidersError(existing, provider);\n\t            }\n\t            if (provider.multiProvider) {\n\t                for (var /** @type {?} */ j = 0; j < provider.resolvedFactories.length; j++) {\n\t                    existing.resolvedFactories.push(provider.resolvedFactories[j]);\n\t                }\n\t            }\n\t            else {\n\t                normalizedProvidersMap.set(provider.key.id, provider);\n\t            }\n\t        }\n\t        else {\n\t            var /** @type {?} */ resolvedProvider = void 0;\n\t            if (provider.multiProvider) {\n\t                resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);\n\t            }\n\t            else {\n\t                resolvedProvider = provider;\n\t            }\n\t            normalizedProvidersMap.set(provider.key.id, resolvedProvider);\n\t        }\n\t    }\n\t    return normalizedProvidersMap;\n\t}\n\t/**\n\t * @param {?} providers\n\t * @param {?} res\n\t * @return {?}\n\t */\n\tfunction _normalizeProviders(providers, res) {\n\t    providers.forEach(function (b) {\n\t        if (b instanceof Type) {\n\t            res.push({ provide: b, useClass: b });\n\t        }\n\t        else if (b && typeof b == 'object' && ((b)).provide !== undefined) {\n\t            res.push(/** @type {?} */ (b));\n\t        }\n\t        else if (b instanceof Array) {\n\t            _normalizeProviders(b, res);\n\t        }\n\t        else {\n\t            throw invalidProviderError(b);\n\t        }\n\t    });\n\t    return res;\n\t}\n\t/**\n\t * @param {?} typeOrFunc\n\t * @param {?=} dependencies\n\t * @return {?}\n\t */\n\tfunction constructDependencies(typeOrFunc, dependencies) {\n\t    if (!dependencies) {\n\t        return _dependenciesFor(typeOrFunc);\n\t    }\n\t    else {\n\t        var /** @type {?} */ params_1 = dependencies.map(function (t) { return [t]; });\n\t        return dependencies.map(function (t) { return _extractToken(typeOrFunc, t, params_1); });\n\t    }\n\t}\n\t/**\n\t * @param {?} typeOrFunc\n\t * @return {?}\n\t */\n\tfunction _dependenciesFor(typeOrFunc) {\n\t    var /** @type {?} */ params = reflector.parameters(typeOrFunc);\n\t    if (!params)\n\t        return [];\n\t    if (params.some(function (p) { return p == null; })) {\n\t        throw noAnnotationError(typeOrFunc, params);\n\t    }\n\t    return params.map(function (p) { return _extractToken(typeOrFunc, p, params); });\n\t}\n\t/**\n\t * @param {?} typeOrFunc\n\t * @param {?} metadata\n\t * @param {?} params\n\t * @return {?}\n\t */\n\tfunction _extractToken(typeOrFunc, metadata, params) {\n\t    var /** @type {?} */ token = null;\n\t    var /** @type {?} */ optional = false;\n\t    if (!Array.isArray(metadata)) {\n\t        if (metadata instanceof Inject) {\n\t            return _createDependency(metadata.token, optional, null);\n\t        }\n\t        else {\n\t            return _createDependency(metadata, optional, null);\n\t        }\n\t    }\n\t    var /** @type {?} */ visibility = null;\n\t    for (var /** @type {?} */ i = 0; i < metadata.length; ++i) {\n\t        var /** @type {?} */ paramMetadata = metadata[i];\n\t        if (paramMetadata instanceof Type) {\n\t            token = paramMetadata;\n\t        }\n\t        else if (paramMetadata instanceof Inject) {\n\t            token = paramMetadata.token;\n\t        }\n\t        else if (paramMetadata instanceof Optional) {\n\t            optional = true;\n\t        }\n\t        else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {\n\t            visibility = paramMetadata;\n\t        }\n\t        else if (paramMetadata instanceof InjectionToken) {\n\t            token = paramMetadata;\n\t        }\n\t    }\n\t    token = resolveForwardRef(token);\n\t    if (token != null) {\n\t        return _createDependency(token, optional, visibility);\n\t    }\n\t    else {\n\t        throw noAnnotationError(typeOrFunc, params);\n\t    }\n\t}\n\t/**\n\t * @param {?} token\n\t * @param {?} optional\n\t * @param {?} visibility\n\t * @return {?}\n\t */\n\tfunction _createDependency(token, optional, visibility) {\n\t    return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);\n\t}\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t// Threshold for the dynamic version\n\tvar UNDEFINED = new Object();\n\t/**\n\t * A ReflectiveDependency injection container used for instantiating objects and resolving\n\t * dependencies.\n\t *\n\t * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n\t * constructor dependencies.\n\t *\n\t * In typical use, application code asks for the dependencies in the constructor and they are\n\t * resolved by the `Injector`.\n\t *\n\t * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))\n\t *\n\t * The following example creates an `Injector` configured to create `Engine` and `Car`.\n\t *\n\t * ```typescript\n\t * \\@Injectable()\n\t * class Engine {\n\t * }\n\t *\n\t * \\@Injectable()\n\t * class Car {\n\t *   constructor(public engine:Engine) {}\n\t * }\n\t *\n\t * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n\t * var car = injector.get(Car);\n\t * expect(car instanceof Car).toBe(true);\n\t * expect(car.engine instanceof Engine).toBe(true);\n\t * ```\n\t *\n\t * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n\t * resolve all of the object's dependencies automatically.\n\t *\n\t * \\@stable\n\t * @abstract\n\t */\n\tvar ReflectiveInjector = (function () {\n\t    function ReflectiveInjector() {\n\t    }\n\t    /**\n\t     * Turns an array of provider definitions into an array of resolved providers.\n\t     *\n\t     * A resolution is a process of flattening multiple nested arrays and converting individual\n\t     * providers into an array of {\\@link ResolvedReflectiveProvider}s.\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))\n\t     *\n\t     * ```typescript\n\t     * \\@Injectable()\n\t     * class Engine {\n\t     * }\n\t     *\n\t     * \\@Injectable()\n\t     * class Car {\n\t     *   constructor(public engine:Engine) {}\n\t     * }\n\t     *\n\t     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n\t     *\n\t     * expect(providers.length).toEqual(2);\n\t     *\n\t     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n\t     * expect(providers[0].key.displayName).toBe(\"Car\");\n\t     * expect(providers[0].dependencies.length).toEqual(1);\n\t     * expect(providers[0].factory).toBeDefined();\n\t     *\n\t     * expect(providers[1].key.displayName).toBe(\"Engine\");\n\t     * });\n\t     * ```\n\t     *\n\t     * See {\\@link ReflectiveInjector#fromResolvedProviders} for more info.\n\t     * @param {?} providers\n\t     * @return {?}\n\t     */\n\t    ReflectiveInjector.resolve = function (providers) {\n\t        return resolveReflectiveProviders(providers);\n\t    };\n\t    /**\n\t     * Resolves an array of providers and creates an injector from those providers.\n\t     *\n\t     * The passed-in providers can be an array of `Type`, {\\@link Provider},\n\t     * or a recursive array of more providers.\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))\n\t     *\n\t     * ```typescript\n\t     * \\@Injectable()\n\t     * class Engine {\n\t     * }\n\t     *\n\t     * \\@Injectable()\n\t     * class Car {\n\t     *   constructor(public engine:Engine) {}\n\t     * }\n\t     *\n\t     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n\t     * expect(injector.get(Car) instanceof Car).toBe(true);\n\t     * ```\n\t     *\n\t     * This function is slower than the corresponding `fromResolvedProviders`\n\t     * because it needs to resolve the passed-in providers first.\n\t     * See {\\@link ReflectiveInjector#resolve} and {\\@link ReflectiveInjector#fromResolvedProviders}.\n\t     * @param {?} providers\n\t     * @param {?=} parent\n\t     * @return {?}\n\t     */\n\t    ReflectiveInjector.resolveAndCreate = function (providers, parent) {\n\t        var /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n\t        return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);\n\t    };\n\t    /**\n\t     * Creates an injector from previously resolved providers.\n\t     *\n\t     * This API is the recommended way to construct injectors in performance-sensitive parts.\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))\n\t     *\n\t     * ```typescript\n\t     * \\@Injectable()\n\t     * class Engine {\n\t     * }\n\t     *\n\t     * \\@Injectable()\n\t     * class Car {\n\t     *   constructor(public engine:Engine) {}\n\t     * }\n\t     *\n\t     * var providers = ReflectiveInjector.resolve([Car, Engine]);\n\t     * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n\t     * expect(injector.get(Car) instanceof Car).toBe(true);\n\t     * ```\n\t     * \\@experimental\n\t     * @param {?} providers\n\t     * @param {?=} parent\n\t     * @return {?}\n\t     */\n\t    ReflectiveInjector.fromResolvedProviders = function (providers, parent) {\n\t        return new ReflectiveInjector_(providers, parent);\n\t    };\n\t    /**\n\t     * Parent of this injector.\n\t     *\n\t     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n\t     * -->\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/eosMGo?p=preview))\n\t     *\n\t     * ```typescript\n\t     * var parent = ReflectiveInjector.resolveAndCreate([]);\n\t     * var child = parent.resolveAndCreateChild([]);\n\t     * expect(child.parent).toBe(parent);\n\t     * ```\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    ReflectiveInjector.prototype.parent = function () { };\n\t    /**\n\t     * Resolves an array of providers and creates a child injector from those providers.\n\t     *\n\t     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n\t     * -->\n\t     *\n\t     * The passed-in providers can be an array of `Type`, {\\@link Provider},\n\t     * or a recursive array of more providers.\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/opB3T4?p=preview))\n\t     *\n\t     * ```typescript\n\t     * class ParentProvider {}\n\t     * class ChildProvider {}\n\t     *\n\t     * var parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);\n\t     * var child = parent.resolveAndCreateChild([ChildProvider]);\n\t     *\n\t     * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n\t     * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n\t     * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n\t     * ```\n\t     *\n\t     * This function is slower than the corresponding `createChildFromResolved`\n\t     * because it needs to resolve the passed-in providers first.\n\t     * See {\\@link ReflectiveInjector#resolve} and {\\@link ReflectiveInjector#createChildFromResolved}.\n\t     * @abstract\n\t     * @param {?} providers\n\t     * @return {?}\n\t     */\n\t    ReflectiveInjector.prototype.resolveAndCreateChild = function (providers) { };\n\t    /**\n\t     * Creates a child injector from previously resolved providers.\n\t     *\n\t     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n\t     * -->\n\t     *\n\t     * This API is the recommended way to construct injectors in performance-sensitive parts.\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/VhyfjN?p=preview))\n\t     *\n\t     * ```typescript\n\t     * class ParentProvider {}\n\t     * class ChildProvider {}\n\t     *\n\t     * var parentProviders = ReflectiveInjector.resolve([ParentProvider]);\n\t     * var childProviders = ReflectiveInjector.resolve([ChildProvider]);\n\t     *\n\t     * var parent = ReflectiveInjector.fromResolvedProviders(parentProviders);\n\t     * var child = parent.createChildFromResolved(childProviders);\n\t     *\n\t     * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n\t     * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n\t     * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n\t     * ```\n\t     * @abstract\n\t     * @param {?} providers\n\t     * @return {?}\n\t     */\n\t    ReflectiveInjector.prototype.createChildFromResolved = function (providers) { };\n\t    /**\n\t     * Resolves a provider and instantiates an object in the context of the injector.\n\t     *\n\t     * The created object does not get cached by the injector.\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/yvVXoB?p=preview))\n\t     *\n\t     * ```typescript\n\t     * \\@Injectable()\n\t     * class Engine {\n\t     * }\n\t     *\n\t     * \\@Injectable()\n\t     * class Car {\n\t     *   constructor(public engine:Engine) {}\n\t     * }\n\t     *\n\t     * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n\t     *\n\t     * var car = injector.resolveAndInstantiate(Car);\n\t     * expect(car.engine).toBe(injector.get(Engine));\n\t     * expect(car).not.toBe(injector.resolveAndInstantiate(Car));\n\t     * ```\n\t     * @abstract\n\t     * @param {?} provider\n\t     * @return {?}\n\t     */\n\t    ReflectiveInjector.prototype.resolveAndInstantiate = function (provider) { };\n\t    /**\n\t     * Instantiates an object using a resolved provider in the context of the injector.\n\t     *\n\t     * The created object does not get cached by the injector.\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/ptCImQ?p=preview))\n\t     *\n\t     * ```typescript\n\t     * \\@Injectable()\n\t     * class Engine {\n\t     * }\n\t     *\n\t     * \\@Injectable()\n\t     * class Car {\n\t     *   constructor(public engine:Engine) {}\n\t     * }\n\t     *\n\t     * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n\t     * var carProvider = ReflectiveInjector.resolve([Car])[0];\n\t     * var car = injector.instantiateResolved(carProvider);\n\t     * expect(car.engine).toBe(injector.get(Engine));\n\t     * expect(car).not.toBe(injector.instantiateResolved(carProvider));\n\t     * ```\n\t     * @abstract\n\t     * @param {?} provider\n\t     * @return {?}\n\t     */\n\t    ReflectiveInjector.prototype.instantiateResolved = function (provider) { };\n\t    /**\n\t     * @abstract\n\t     * @param {?} token\n\t     * @param {?=} notFoundValue\n\t     * @return {?}\n\t     */\n\t    ReflectiveInjector.prototype.get = function (token, notFoundValue) { };\n\t    return ReflectiveInjector;\n\t}());\n\tvar ReflectiveInjector_ = (function () {\n\t    /**\n\t     * Private\n\t     * @param {?} _providers\n\t     * @param {?=} _parent\n\t     */\n\t    function ReflectiveInjector_(_providers, _parent) {\n\t        /**\n\t         * \\@internal\n\t         */\n\t        this._constructionCounter = 0;\n\t        this._providers = _providers;\n\t        this._parent = _parent || null;\n\t        var len = _providers.length;\n\t        this.keyIds = new Array(len);\n\t        this.objs = new Array(len);\n\t        for (var i = 0; i < len; i++) {\n\t            this.keyIds[i] = _providers[i].key.id;\n\t            this.objs[i] = UNDEFINED;\n\t        }\n\t    }\n\t    /**\n\t     * @param {?} token\n\t     * @param {?=} notFoundValue\n\t     * @return {?}\n\t     */\n\t    ReflectiveInjector_.prototype.get = function (token, notFoundValue) {\n\t        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n\t        return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);\n\t    };\n\t    Object.defineProperty(ReflectiveInjector_.prototype, \"parent\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this._parent; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    /**\n\t     * @param {?} providers\n\t     * @return {?}\n\t     */\n\t    ReflectiveInjector_.prototype.resolveAndCreateChild = function (providers) {\n\t        var /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n\t        return this.createChildFromResolved(ResolvedReflectiveProviders);\n\t    };\n\t    /**\n\t     * @param {?} providers\n\t     * @return {?}\n\t     */\n\t    ReflectiveInjector_.prototype.createChildFromResolved = function (providers) {\n\t        var /** @type {?} */ inj = new ReflectiveInjector_(providers);\n\t        inj._parent = this;\n\t        return inj;\n\t    };\n\t    /**\n\t     * @param {?} provider\n\t     * @return {?}\n\t     */\n\t    ReflectiveInjector_.prototype.resolveAndInstantiate = function (provider) {\n\t        return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);\n\t    };\n\t    /**\n\t     * @param {?} provider\n\t     * @return {?}\n\t     */\n\t    ReflectiveInjector_.prototype.instantiateResolved = function (provider) {\n\t        return this._instantiateProvider(provider);\n\t    };\n\t    /**\n\t     * @param {?} index\n\t     * @return {?}\n\t     */\n\t    ReflectiveInjector_.prototype.getProviderAtIndex = function (index) {\n\t        if (index < 0 || index >= this._providers.length) {\n\t            throw outOfBoundsError(index);\n\t        }\n\t        return this._providers[index];\n\t    };\n\t    /**\n\t     * \\@internal\n\t     * @param {?} provider\n\t     * @return {?}\n\t     */\n\t    ReflectiveInjector_.prototype._new = function (provider) {\n\t        if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {\n\t            throw cyclicDependencyError(this, provider.key);\n\t        }\n\t        return this._instantiateProvider(provider);\n\t    };\n\t    /**\n\t     * @return {?}\n\t     */\n\t    ReflectiveInjector_.prototype._getMaxNumberOfObjects = function () { return this.objs.length; };\n\t    /**\n\t     * @param {?} provider\n\t     * @return {?}\n\t     */\n\t    ReflectiveInjector_.prototype._instantiateProvider = function (provider) {\n\t        if (provider.multiProvider) {\n\t            var /** @type {?} */ res = new Array(provider.resolvedFactories.length);\n\t            for (var /** @type {?} */ i = 0; i < provider.resolvedFactories.length; ++i) {\n\t                res[i] = this._instantiate(provider, provider.resolvedFactories[i]);\n\t            }\n\t            return res;\n\t        }\n\t        else {\n\t            return this._instantiate(provider, provider.resolvedFactories[0]);\n\t        }\n\t    };\n\t    /**\n\t     * @param {?} provider\n\t     * @param {?} ResolvedReflectiveFactory\n\t     * @return {?}\n\t     */\n\t    ReflectiveInjector_.prototype._instantiate = function (provider, ResolvedReflectiveFactory$$1) {\n\t        var _this = this;\n\t        var /** @type {?} */ factory = ResolvedReflectiveFactory$$1.factory;\n\t        var /** @type {?} */ deps;\n\t        try {\n\t            deps =\n\t                ResolvedReflectiveFactory$$1.dependencies.map(function (dep) { return _this._getByReflectiveDependency(dep); });\n\t        }\n\t        catch (e) {\n\t            if (e.addKey) {\n\t                e.addKey(this, provider.key);\n\t            }\n\t            throw e;\n\t        }\n\t        var /** @type {?} */ obj;\n\t        try {\n\t            obj = factory.apply(void 0, deps);\n\t        }\n\t        catch (e) {\n\t            throw instantiationError(this, e, e.stack, provider.key);\n\t        }\n\t        return obj;\n\t    };\n\t    /**\n\t     * @param {?} dep\n\t     * @return {?}\n\t     */\n\t    ReflectiveInjector_.prototype._getByReflectiveDependency = function (dep) {\n\t        return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);\n\t    };\n\t    /**\n\t     * @param {?} key\n\t     * @param {?} visibility\n\t     * @param {?} notFoundValue\n\t     * @return {?}\n\t     */\n\t    ReflectiveInjector_.prototype._getByKey = function (key, visibility, notFoundValue) {\n\t        if (key === INJECTOR_KEY) {\n\t            return this;\n\t        }\n\t        if (visibility instanceof Self) {\n\t            return this._getByKeySelf(key, notFoundValue);\n\t        }\n\t        else {\n\t            return this._getByKeyDefault(key, notFoundValue, visibility);\n\t        }\n\t    };\n\t    /**\n\t     * @param {?} keyId\n\t     * @return {?}\n\t     */\n\t    ReflectiveInjector_.prototype._getObjByKeyId = function (keyId) {\n\t        for (var /** @type {?} */ i = 0; i < this.keyIds.length; i++) {\n\t            if (this.keyIds[i] === keyId) {\n\t                if (this.objs[i] === UNDEFINED) {\n\t                    this.objs[i] = this._new(this._providers[i]);\n\t                }\n\t                return this.objs[i];\n\t            }\n\t        }\n\t        return UNDEFINED;\n\t    };\n\t    /**\n\t     * \\@internal\n\t     * @param {?} key\n\t     * @param {?} notFoundValue\n\t     * @return {?}\n\t     */\n\t    ReflectiveInjector_.prototype._throwOrNull = function (key, notFoundValue) {\n\t        if (notFoundValue !== THROW_IF_NOT_FOUND) {\n\t            return notFoundValue;\n\t        }\n\t        else {\n\t            throw noProviderError(this, key);\n\t        }\n\t    };\n\t    /**\n\t     * \\@internal\n\t     * @param {?} key\n\t     * @param {?} notFoundValue\n\t     * @return {?}\n\t     */\n\t    ReflectiveInjector_.prototype._getByKeySelf = function (key, notFoundValue) {\n\t        var /** @type {?} */ obj = this._getObjByKeyId(key.id);\n\t        return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);\n\t    };\n\t    /**\n\t     * \\@internal\n\t     * @param {?} key\n\t     * @param {?} notFoundValue\n\t     * @param {?} visibility\n\t     * @return {?}\n\t     */\n\t    ReflectiveInjector_.prototype._getByKeyDefault = function (key, notFoundValue, visibility) {\n\t        var /** @type {?} */ inj;\n\t        if (visibility instanceof SkipSelf) {\n\t            inj = this._parent;\n\t        }\n\t        else {\n\t            inj = this;\n\t        }\n\t        while (inj instanceof ReflectiveInjector_) {\n\t            var /** @type {?} */ inj_ = (inj);\n\t            var /** @type {?} */ obj = inj_._getObjByKeyId(key.id);\n\t            if (obj !== UNDEFINED)\n\t                return obj;\n\t            inj = inj_._parent;\n\t        }\n\t        if (inj !== null) {\n\t            return inj.get(key.token, notFoundValue);\n\t        }\n\t        else {\n\t            return this._throwOrNull(key, notFoundValue);\n\t        }\n\t    };\n\t    Object.defineProperty(ReflectiveInjector_.prototype, \"displayName\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () {\n\t            var /** @type {?} */ providers = _mapProviders(this, function (b) { return ' \"' + b.key.displayName + '\" '; })\n\t                .join(', ');\n\t            return \"ReflectiveInjector(providers: [\" + providers + \"])\";\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    /**\n\t     * @return {?}\n\t     */\n\t    ReflectiveInjector_.prototype.toString = function () { return this.displayName; };\n\t    return ReflectiveInjector_;\n\t}());\n\tvar INJECTOR_KEY = ReflectiveKey.get(Injector);\n\t/**\n\t * @param {?} injector\n\t * @param {?} fn\n\t * @return {?}\n\t */\n\tfunction _mapProviders(injector, fn) {\n\t    var /** @type {?} */ res = new Array(injector._providers.length);\n\t    for (var /** @type {?} */ i = 0; i < injector._providers.length; ++i) {\n\t        res[i] = fn(injector.getProviderAtIndex(i));\n\t    }\n\t    return res;\n\t}\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * @module\n\t * @description\n\t * The `di` module provides dependency injection container services.\n\t */\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * Determine if the argument is shaped like a Promise\n\t * @param {?} obj\n\t * @return {?}\n\t */\n\tfunction isPromise(obj) {\n\t    // allow any Promise/A+ compliant thenable.\n\t    // It's up to the caller to ensure that obj.then conforms to the spec\n\t    return !!obj && typeof obj.then === 'function';\n\t}\n\t/**\n\t * Determine if the argument is an Observable\n\t * @param {?} obj\n\t * @return {?}\n\t */\n\tfunction isObservable(obj) {\n\t    // TODO use Symbol.observable when https://github.com/ReactiveX/rxjs/issues/2415 will be resolved\n\t    return !!obj && typeof obj.subscribe === 'function';\n\t}\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * A function that will be executed when an application is initialized.\n\t * \\@experimental\n\t */\n\tvar APP_INITIALIZER = new InjectionToken('Application Initializer');\n\t/**\n\t * A class that reflects the state of running {\\@link APP_INITIALIZER}s.\n\t *\n\t * \\@experimental\n\t */\n\tvar ApplicationInitStatus = (function () {\n\t    /**\n\t     * @param {?} appInits\n\t     */\n\t    function ApplicationInitStatus(appInits) {\n\t        var _this = this;\n\t        this.appInits = appInits;\n\t        this.initialized = false;\n\t        this._done = false;\n\t        this._donePromise = new Promise(function (res, rej) {\n\t            _this.resolve = res;\n\t            _this.reject = rej;\n\t        });\n\t    }\n\t    /**\n\t     * \\@internal\n\t     * @return {?}\n\t     */\n\t    ApplicationInitStatus.prototype.runInitializers = function () {\n\t        var _this = this;\n\t        if (this.initialized) {\n\t            return;\n\t        }\n\t        var /** @type {?} */ asyncInitPromises = [];\n\t        var /** @type {?} */ complete = function () {\n\t            _this._done = true;\n\t            _this.resolve();\n\t        };\n\t        if (this.appInits) {\n\t            for (var /** @type {?} */ i = 0; i < this.appInits.length; i++) {\n\t                var /** @type {?} */ initResult = this.appInits[i]();\n\t                if (isPromise(initResult)) {\n\t                    asyncInitPromises.push(initResult);\n\t                }\n\t            }\n\t        }\n\t        Promise.all(asyncInitPromises).then(function () { complete(); }).catch(function (e) { _this.reject(e); });\n\t        if (asyncInitPromises.length === 0) {\n\t            complete();\n\t        }\n\t        this.initialized = true;\n\t    };\n\t    Object.defineProperty(ApplicationInitStatus.prototype, \"done\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this._done; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(ApplicationInitStatus.prototype, \"donePromise\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this._donePromise; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    return ApplicationInitStatus;\n\t}());\n\tApplicationInitStatus.decorators = [\n\t    { type: Injectable },\n\t];\n\t/**\n\t * @nocollapse\n\t */\n\tApplicationInitStatus.ctorParameters = function () { return [\n\t    { type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER,] }, { type: Optional },] },\n\t]; };\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * A DI Token representing a unique string id assigned to the application by Angular and used\n\t * primarily for prefixing application attributes and CSS styles when\n\t * {\\@link ViewEncapsulation#Emulated} is being used.\n\t *\n\t * If you need to avoid randomly generated value to be used as an application id, you can provide\n\t * a custom value via a DI provider <!-- TODO: provider --> configuring the root {\\@link Injector}\n\t * using this token.\n\t * \\@experimental\n\t */\n\tvar APP_ID = new InjectionToken('AppId');\n\t/**\n\t * @return {?}\n\t */\n\tfunction _appIdRandomProviderFactory() {\n\t    return \"\" + _randomChar() + _randomChar() + _randomChar();\n\t}\n\t/**\n\t * Providers that will generate a random APP_ID_TOKEN.\n\t * \\@experimental\n\t */\n\tvar APP_ID_RANDOM_PROVIDER = {\n\t    provide: APP_ID,\n\t    useFactory: _appIdRandomProviderFactory,\n\t    deps: [],\n\t};\n\t/**\n\t * @return {?}\n\t */\n\tfunction _randomChar() {\n\t    return String.fromCharCode(97 + Math.floor(Math.random() * 25));\n\t}\n\t/**\n\t * A function that will be executed when a platform is initialized.\n\t * \\@experimental\n\t */\n\tvar PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');\n\t/**\n\t * A token that indicates an opaque platform id.\n\t * \\@experimental\n\t */\n\tvar PLATFORM_ID = new InjectionToken('Platform ID');\n\t/**\n\t * All callbacks provided via this token will be called for every component that is bootstrapped.\n\t * Signature of the callback:\n\t *\n\t * `(componentRef: ComponentRef) => void`.\n\t *\n\t * \\@experimental\n\t */\n\tvar APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');\n\t/**\n\t * A token which indicates the root directory of the application\n\t * \\@experimental\n\t */\n\tvar PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\tvar Console = (function () {\n\t    function Console() {\n\t    }\n\t    /**\n\t     * @param {?} message\n\t     * @return {?}\n\t     */\n\t    Console.prototype.log = function (message) {\n\t        // tslint:disable-next-line:no-console\n\t        console.log(message);\n\t    };\n\t    /**\n\t     * @param {?} message\n\t     * @return {?}\n\t     */\n\t    Console.prototype.warn = function (message) {\n\t        // tslint:disable-next-line:no-console\n\t        console.warn(message);\n\t    };\n\t    return Console;\n\t}());\n\tConsole.decorators = [\n\t    { type: Injectable },\n\t];\n\t/**\n\t * @nocollapse\n\t */\n\tConsole.ctorParameters = function () { return []; };\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * Combination of NgModuleFactory and ComponentFactorys.\n\t *\n\t * \\@experimental\n\t */\n\tvar ModuleWithComponentFactories = (function () {\n\t    /**\n\t     * @param {?} ngModuleFactory\n\t     * @param {?} componentFactories\n\t     */\n\t    function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {\n\t        this.ngModuleFactory = ngModuleFactory;\n\t        this.componentFactories = componentFactories;\n\t    }\n\t    return ModuleWithComponentFactories;\n\t}());\n\t/**\n\t * @return {?}\n\t */\n\tfunction _throwError() {\n\t    throw new Error(\"Runtime compiler is not loaded\");\n\t}\n\t/**\n\t * Low-level service for running the angular compiler during runtime\n\t * to create {\\@link ComponentFactory}s, which\n\t * can later be used to create and render a Component instance.\n\t *\n\t * Each `\\@NgModule` provides an own `Compiler` to its injector,\n\t * that will use the directives/pipes of the ng module for compilation\n\t * of components.\n\t * \\@stable\n\t */\n\tvar Compiler = (function () {\n\t    function Compiler() {\n\t    }\n\t    /**\n\t     * Compiles the given NgModule and all of its components. All templates of the components listed\n\t     * in `entryComponents` have to be inlined.\n\t     * @template T\n\t     * @param {?} moduleType\n\t     * @return {?}\n\t     */\n\t    Compiler.prototype.compileModuleSync = function (moduleType) { throw _throwError(); };\n\t    /**\n\t     * Compiles the given NgModule and all of its components\n\t     * @template T\n\t     * @param {?} moduleType\n\t     * @return {?}\n\t     */\n\t    Compiler.prototype.compileModuleAsync = function (moduleType) { throw _throwError(); };\n\t    /**\n\t     * Same as {\\@link #compileModuleSync} but also creates ComponentFactories for all components.\n\t     * @template T\n\t     * @param {?} moduleType\n\t     * @return {?}\n\t     */\n\t    Compiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {\n\t        throw _throwError();\n\t    };\n\t    /**\n\t     * Same as {\\@link #compileModuleAsync} but also creates ComponentFactories for all components.\n\t     * @template T\n\t     * @param {?} moduleType\n\t     * @return {?}\n\t     */\n\t    Compiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {\n\t        throw _throwError();\n\t    };\n\t    /**\n\t     * Exposes the CSS-style selectors that have been used in `ngContent` directives within\n\t     * the template of the given component.\n\t     * This is used by the `upgrade` library to compile the appropriate transclude content\n\t     * in the AngularJS wrapper component.\n\t     *\n\t     * @deprecated since v4. Use ComponentFactory.ngContentSelectors instead.\n\t     * @param {?} component\n\t     * @return {?}\n\t     */\n\t    Compiler.prototype.getNgContentSelectors = function (component) { throw _throwError(); };\n\t    /**\n\t     * Clears all caches.\n\t     * @return {?}\n\t     */\n\t    Compiler.prototype.clearCache = function () { };\n\t    /**\n\t     * Clears the cache for the given component/ngModule.\n\t     * @param {?} type\n\t     * @return {?}\n\t     */\n\t    Compiler.prototype.clearCacheFor = function (type) { };\n\t    return Compiler;\n\t}());\n\tCompiler.decorators = [\n\t    { type: Injectable },\n\t];\n\t/**\n\t * @nocollapse\n\t */\n\tCompiler.ctorParameters = function () { return []; };\n\t/**\n\t * Token to provide CompilerOptions in the platform injector.\n\t *\n\t * \\@experimental\n\t */\n\tvar COMPILER_OPTIONS = new InjectionToken('compilerOptions');\n\t/**\n\t * A factory for creating a Compiler\n\t *\n\t * \\@experimental\n\t * @abstract\n\t */\n\tvar CompilerFactory = (function () {\n\t    function CompilerFactory() {\n\t    }\n\t    /**\n\t     * @abstract\n\t     * @param {?=} options\n\t     * @return {?}\n\t     */\n\t    CompilerFactory.prototype.createCompiler = function (options) { };\n\t    return CompilerFactory;\n\t}());\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * Represents an instance of a Component created via a {\\@link ComponentFactory}.\n\t *\n\t * `ComponentRef` provides access to the Component Instance as well other objects related to this\n\t * Component Instance and allows you to destroy the Component Instance via the {\\@link #destroy}\n\t * method.\n\t * \\@stable\n\t * @abstract\n\t */\n\tvar ComponentRef = (function () {\n\t    function ComponentRef() {\n\t    }\n\t    /**\n\t     * Location of the Host Element of this Component Instance.\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    ComponentRef.prototype.location = function () { };\n\t    /**\n\t     * The injector on which the component instance exists.\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    ComponentRef.prototype.injector = function () { };\n\t    /**\n\t     * The instance of the Component.\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    ComponentRef.prototype.instance = function () { };\n\t    /**\n\t     * The {\\@link ViewRef} of the Host View of this Component instance.\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    ComponentRef.prototype.hostView = function () { };\n\t    /**\n\t     * The {\\@link ChangeDetectorRef} of the Component instance.\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    ComponentRef.prototype.changeDetectorRef = function () { };\n\t    /**\n\t     * The component type.\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    ComponentRef.prototype.componentType = function () { };\n\t    /**\n\t     * Destroys the component instance and all of the data structures associated with it.\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    ComponentRef.prototype.destroy = function () { };\n\t    /**\n\t     * Allows to register a callback that will be called when the component is destroyed.\n\t     * @abstract\n\t     * @param {?} callback\n\t     * @return {?}\n\t     */\n\t    ComponentRef.prototype.onDestroy = function (callback) { };\n\t    return ComponentRef;\n\t}());\n\t/**\n\t * \\@stable\n\t * @abstract\n\t */\n\tvar ComponentFactory = (function () {\n\t    function ComponentFactory() {\n\t    }\n\t    /**\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    ComponentFactory.prototype.selector = function () { };\n\t    /**\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    ComponentFactory.prototype.componentType = function () { };\n\t    /**\n\t     * selector for all <ng-content> elements in the component.\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    ComponentFactory.prototype.ngContentSelectors = function () { };\n\t    /**\n\t     * the inputs of the component.\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    ComponentFactory.prototype.inputs = function () { };\n\t    /**\n\t     * the outputs of the component.\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    ComponentFactory.prototype.outputs = function () { };\n\t    /**\n\t     * Creates a new component.\n\t     * @abstract\n\t     * @param {?} injector\n\t     * @param {?=} projectableNodes\n\t     * @param {?=} rootSelectorOrNode\n\t     * @param {?=} ngModule\n\t     * @return {?}\n\t     */\n\t    ComponentFactory.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) { };\n\t    return ComponentFactory;\n\t}());\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * @param {?} component\n\t * @return {?}\n\t */\n\tfunction noComponentFactoryError(component) {\n\t    var /** @type {?} */ error = Error(\"No component factory found for \" + stringify(component) + \". Did you add it to @NgModule.entryComponents?\");\n\t    ((error))[ERROR_COMPONENT] = component;\n\t    return error;\n\t}\n\tvar ERROR_COMPONENT = 'ngComponent';\n\t/**\n\t * @param {?} error\n\t * @return {?}\n\t */\n\tvar _NullComponentFactoryResolver = (function () {\n\t    function _NullComponentFactoryResolver() {\n\t    }\n\t    /**\n\t     * @template T\n\t     * @param {?} component\n\t     * @return {?}\n\t     */\n\t    _NullComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {\n\t        throw noComponentFactoryError(component);\n\t    };\n\t    return _NullComponentFactoryResolver;\n\t}());\n\t/**\n\t * \\@stable\n\t * @abstract\n\t */\n\tvar ComponentFactoryResolver = (function () {\n\t    function ComponentFactoryResolver() {\n\t    }\n\t    /**\n\t     * @abstract\n\t     * @template T\n\t     * @param {?} component\n\t     * @return {?}\n\t     */\n\t    ComponentFactoryResolver.prototype.resolveComponentFactory = function (component) { };\n\t    return ComponentFactoryResolver;\n\t}());\n\tComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();\n\tvar CodegenComponentFactoryResolver = (function () {\n\t    /**\n\t     * @param {?} factories\n\t     * @param {?} _parent\n\t     * @param {?} _ngModule\n\t     */\n\t    function CodegenComponentFactoryResolver(factories, _parent, _ngModule) {\n\t        this._parent = _parent;\n\t        this._ngModule = _ngModule;\n\t        this._factories = new Map();\n\t        for (var i = 0; i < factories.length; i++) {\n\t            var factory = factories[i];\n\t            this._factories.set(factory.componentType, factory);\n\t        }\n\t    }\n\t    /**\n\t     * @template T\n\t     * @param {?} component\n\t     * @return {?}\n\t     */\n\t    CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {\n\t        var /** @type {?} */ factory = this._factories.get(component);\n\t        if (!factory && this._parent) {\n\t            factory = this._parent.resolveComponentFactory(component);\n\t        }\n\t        if (!factory) {\n\t            throw noComponentFactoryError(component);\n\t        }\n\t        return new ComponentFactoryBoundToModule(factory, this._ngModule);\n\t    };\n\t    return CodegenComponentFactoryResolver;\n\t}());\n\tvar ComponentFactoryBoundToModule = (function (_super) {\n\t    __extends(ComponentFactoryBoundToModule, _super);\n\t    /**\n\t     * @param {?} factory\n\t     * @param {?} ngModule\n\t     */\n\t    function ComponentFactoryBoundToModule(factory, ngModule) {\n\t        var _this = _super.call(this) || this;\n\t        _this.factory = factory;\n\t        _this.ngModule = ngModule;\n\t        return _this;\n\t    }\n\t    Object.defineProperty(ComponentFactoryBoundToModule.prototype, \"selector\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this.factory.selector; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(ComponentFactoryBoundToModule.prototype, \"componentType\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this.factory.componentType; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(ComponentFactoryBoundToModule.prototype, \"ngContentSelectors\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this.factory.ngContentSelectors; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(ComponentFactoryBoundToModule.prototype, \"inputs\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this.factory.inputs; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(ComponentFactoryBoundToModule.prototype, \"outputs\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this.factory.outputs; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    /**\n\t     * @param {?} injector\n\t     * @param {?=} projectableNodes\n\t     * @param {?=} rootSelectorOrNode\n\t     * @param {?=} ngModule\n\t     * @return {?}\n\t     */\n\t    ComponentFactoryBoundToModule.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\n\t        return this.factory.create(injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);\n\t    };\n\t    return ComponentFactoryBoundToModule;\n\t}(ComponentFactory));\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * Represents an instance of an NgModule created via a {\\@link NgModuleFactory}.\n\t *\n\t * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this\n\t * NgModule Instance.\n\t *\n\t * \\@stable\n\t * @abstract\n\t */\n\tvar NgModuleRef = (function () {\n\t    function NgModuleRef() {\n\t    }\n\t    /**\n\t     * The injector that contains all of the providers of the NgModule.\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    NgModuleRef.prototype.injector = function () { };\n\t    /**\n\t     * The ComponentFactoryResolver to get hold of the ComponentFactories\n\t     * declared in the `entryComponents` property of the module.\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    NgModuleRef.prototype.componentFactoryResolver = function () { };\n\t    /**\n\t     * The NgModule instance.\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    NgModuleRef.prototype.instance = function () { };\n\t    /**\n\t     * Destroys the module instance and all of the data structures associated with it.\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    NgModuleRef.prototype.destroy = function () { };\n\t    /**\n\t     * Allows to register a callback that will be called when the module is destroyed.\n\t     * @abstract\n\t     * @param {?} callback\n\t     * @return {?}\n\t     */\n\t    NgModuleRef.prototype.onDestroy = function (callback) { };\n\t    return NgModuleRef;\n\t}());\n\t/**\n\t * \\@experimental\n\t * @abstract\n\t */\n\tvar NgModuleFactory = (function () {\n\t    function NgModuleFactory() {\n\t    }\n\t    /**\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    NgModuleFactory.prototype.moduleType = function () { };\n\t    /**\n\t     * @abstract\n\t     * @param {?} parentInjector\n\t     * @return {?}\n\t     */\n\t    NgModuleFactory.prototype.create = function (parentInjector) { };\n\t    return NgModuleFactory;\n\t}());\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\tvar trace;\n\tvar events;\n\t/**\n\t * @return {?}\n\t */\n\tfunction detectWTF() {\n\t    var /** @type {?} */ wtf = ((_global) /** TODO #9100 */)['wtf'];\n\t    if (wtf) {\n\t        trace = wtf['trace'];\n\t        if (trace) {\n\t            events = trace['events'];\n\t            return true;\n\t        }\n\t    }\n\t    return false;\n\t}\n\t/**\n\t * @param {?} signature\n\t * @param {?=} flags\n\t * @return {?}\n\t */\n\tfunction createScope$1(signature, flags) {\n\t    if (flags === void 0) { flags = null; }\n\t    return events.createScope(signature, flags);\n\t}\n\t/**\n\t * @template T\n\t * @param {?} scope\n\t * @param {?=} returnValue\n\t * @return {?}\n\t */\n\tfunction leave(scope, returnValue) {\n\t    trace.leaveScope(scope, returnValue);\n\t    return returnValue;\n\t}\n\t/**\n\t * @param {?} rangeType\n\t * @param {?} action\n\t * @return {?}\n\t */\n\tfunction startTimeRange(rangeType, action) {\n\t    return trace.beginTimeRange(rangeType, action);\n\t}\n\t/**\n\t * @param {?} range\n\t * @return {?}\n\t */\n\tfunction endTimeRange(range) {\n\t    trace.endTimeRange(range);\n\t}\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * True if WTF is enabled.\n\t */\n\tvar wtfEnabled = detectWTF();\n\t/**\n\t * @param {?=} arg0\n\t * @param {?=} arg1\n\t * @return {?}\n\t */\n\tfunction noopScope(arg0, arg1) {\n\t    return null;\n\t}\n\t/**\n\t * Create trace scope.\n\t *\n\t * Scopes must be strictly nested and are analogous to stack frames, but\n\t * do not have to follow the stack frames. Instead it is recommended that they follow logical\n\t * nesting. You may want to use\n\t * [Event\n\t * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)\n\t * as they are defined in WTF.\n\t *\n\t * Used to mark scope entry. The return value is used to leave the scope.\n\t *\n\t *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');\n\t *\n\t *     someMethod() {\n\t *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI\n\t *        // DO SOME WORK HERE\n\t *        return wtfLeave(s, 123); // Return value 123\n\t *     }\n\t *\n\t * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can\n\t * negatively impact the performance of your application. For this reason we recommend that\n\t * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and\n\t * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to\n\t * exception, will produce incorrect trace, but presence of exception signifies logic error which\n\t * needs to be fixed before the app should be profiled. Add try-finally only when you expect that\n\t * an exception is expected during normal execution while profiling.\n\t *\n\t * \\@experimental\n\t */\n\tvar wtfCreateScope = wtfEnabled ? createScope$1 : function (signature, flags) { return noopScope; };\n\t/**\n\t * Used to mark end of Scope.\n\t *\n\t * - `scope` to end.\n\t * - `returnValue` (optional) to be passed to the WTF.\n\t *\n\t * Returns the `returnValue for easy chaining.\n\t * \\@experimental\n\t */\n\tvar wtfLeave = wtfEnabled ? leave : function (s, r) { return r; };\n\t/**\n\t * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.\n\t * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been\n\t * enabled.\n\t *\n\t *     someMethod() {\n\t *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');\n\t *        var future = new Future.delay(5).then((_) {\n\t *          wtfEndTimeRange(s);\n\t *        });\n\t *     }\n\t * \\@experimental\n\t */\n\tvar wtfStartTimeRange = wtfEnabled ? startTimeRange : function (rangeType, action) { return null; };\n\t/**\n\t * Ends a async time range operation.\n\t * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been\n\t * enabled.\n\t * \\@experimental\n\t */\n\tvar wtfEndTimeRange = wtfEnabled ? endTimeRange : function (r) { return null; };\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * Use by directives and components to emit custom Events.\n\t *\n\t * ### Examples\n\t *\n\t * In the following example, `Zippy` alternatively emits `open` and `close` events when its\n\t * title gets clicked:\n\t *\n\t * ```\n\t * \\@Component({\n\t *   selector: 'zippy',\n\t *   template: `\n\t *   <div class=\"zippy\">\n\t *     <div (click)=\"toggle()\">Toggle</div>\n\t *     <div [hidden]=\"!visible\">\n\t *       <ng-content></ng-content>\n\t *     </div>\n\t *  </div>`})\n\t * export class Zippy {\n\t *   visible: boolean = true;\n\t *   \\@Output() open: EventEmitter<any> = new EventEmitter();\n\t *   \\@Output() close: EventEmitter<any> = new EventEmitter();\n\t *\n\t *   toggle() {\n\t *     this.visible = !this.visible;\n\t *     if (this.visible) {\n\t *       this.open.emit(null);\n\t *     } else {\n\t *       this.close.emit(null);\n\t *     }\n\t *   }\n\t * }\n\t * ```\n\t *\n\t * The events payload can be accessed by the parameter `$event` on the components output event\n\t * handler:\n\t *\n\t * ```\n\t * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n\t * ```\n\t *\n\t * Uses Rx.Observable but provides an adapter to make it work as specified here:\n\t * https://github.com/jhusain/observable-spec\n\t *\n\t * Once a reference implementation of the spec is available, switch to it.\n\t * \\@stable\n\t */\n\tvar EventEmitter = (function (_super) {\n\t    __extends(EventEmitter, _super);\n\t    /**\n\t     * Creates an instance of {\\@link EventEmitter}, which depending on `isAsync`,\n\t     * delivers events synchronously or asynchronously.\n\t     *\n\t     * @param {?=} isAsync By default, events are delivered synchronously (default value: `false`).\n\t     * Set to `true` for asynchronous event delivery.\n\t     */\n\t    function EventEmitter(isAsync) {\n\t        if (isAsync === void 0) { isAsync = false; }\n\t        var _this = _super.call(this) || this;\n\t        _this.__isAsync = isAsync;\n\t        return _this;\n\t    }\n\t    /**\n\t     * @param {?=} value\n\t     * @return {?}\n\t     */\n\t    EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };\n\t    /**\n\t     * @param {?=} generatorOrNext\n\t     * @param {?=} error\n\t     * @param {?=} complete\n\t     * @return {?}\n\t     */\n\t    EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {\n\t        var /** @type {?} */ schedulerFn;\n\t        var /** @type {?} */ errorFn = function (err) { return null; };\n\t        var /** @type {?} */ completeFn = function () { return null; };\n\t        if (generatorOrNext && typeof generatorOrNext === 'object') {\n\t            schedulerFn = this.__isAsync ? function (value) {\n\t                setTimeout(function () { return generatorOrNext.next(value); });\n\t            } : function (value) { generatorOrNext.next(value); };\n\t            if (generatorOrNext.error) {\n\t                errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :\n\t                    function (err) { generatorOrNext.error(err); };\n\t            }\n\t            if (generatorOrNext.complete) {\n\t                completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :\n\t                    function () { generatorOrNext.complete(); };\n\t            }\n\t        }\n\t        else {\n\t            schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :\n\t                function (value) { generatorOrNext(value); };\n\t            if (error) {\n\t                errorFn =\n\t                    this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };\n\t            }\n\t            if (complete) {\n\t                completeFn =\n\t                    this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };\n\t            }\n\t        }\n\t        return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);\n\t    };\n\t    return EventEmitter;\n\t}(rxjs_Subject.Subject));\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * An injectable service for executing work inside or outside of the Angular zone.\n\t *\n\t * The most common use of this service is to optimize performance when starting a work consisting of\n\t * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n\t * Angular. Such tasks can be kicked off via {\\@link #runOutsideAngular} and if needed, these tasks\n\t * can reenter the Angular zone via {\\@link #run}.\n\t *\n\t * <!-- TODO: add/fix links to:\n\t *   - docs explaining zones and the use of zones in Angular and change-detection\n\t *   - link to runOutsideAngular/run (throughout this file!)\n\t *   -->\n\t *\n\t * ### Example\n\t *\n\t * ```\n\t * import {Component, NgZone} from '\\@angular/core';\n\t * import {NgIf} from '\\@angular/common';\n\t *\n\t * \\@Component({\n\t *   selector: 'ng-zone-demo'.\n\t *   template: `\n\t *     <h2>Demo: NgZone</h2>\n\t *\n\t *     <p>Progress: {{progress}}%</p>\n\t *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n\t *\n\t *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n\t *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n\t *   `,\n\t * })\n\t * export class NgZoneDemo {\n\t *   progress: number = 0;\n\t *   label: string;\n\t *\n\t *   constructor(private _ngZone: NgZone) {}\n\t *\n\t *   // Loop inside the Angular zone\n\t *   // so the UI DOES refresh after each setTimeout cycle\n\t *   processWithinAngularZone() {\n\t *     this.label = 'inside';\n\t *     this.progress = 0;\n\t *     this._increaseProgress(() => console.log('Inside Done!'));\n\t *   }\n\t *\n\t *   // Loop outside of the Angular zone\n\t *   // so the UI DOES NOT refresh after each setTimeout cycle\n\t *   processOutsideOfAngularZone() {\n\t *     this.label = 'outside';\n\t *     this.progress = 0;\n\t *     this._ngZone.runOutsideAngular(() => {\n\t *       this._increaseProgress(() => {\n\t *       // reenter the Angular zone and display done\n\t *       this._ngZone.run(() => {console.log('Outside Done!') });\n\t *     }}));\n\t *   }\n\t *\n\t *   _increaseProgress(doneCallback: () => void) {\n\t *     this.progress += 1;\n\t *     console.log(`Current progress: ${this.progress}%`);\n\t *\n\t *     if (this.progress < 100) {\n\t *       window.setTimeout(() => this._increaseProgress(doneCallback)), 10)\n\t *     } else {\n\t *       doneCallback();\n\t *     }\n\t *   }\n\t * }\n\t * ```\n\t *\n\t * \\@experimental\n\t */\n\tvar NgZone = (function () {\n\t    /**\n\t     * @param {?} __0\n\t     */\n\t    function NgZone(_a) {\n\t        var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;\n\t        this.hasPendingMicrotasks = false;\n\t        this.hasPendingMacrotasks = false;\n\t        /**\n\t         * Whether there are no outstanding microtasks or macrotasks.\n\t         */\n\t        this.isStable = true;\n\t        /**\n\t         * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n\t         */\n\t        this.onUnstable = new EventEmitter(false);\n\t        /**\n\t         * Notifies when there is no more microtasks enqueue in the current VM Turn.\n\t         * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n\t         * For this reason this event can fire multiple times per VM Turn.\n\t         */\n\t        this.onMicrotaskEmpty = new EventEmitter(false);\n\t        /**\n\t         * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n\t         * implies we are about to relinquish VM turn.\n\t         * This event gets called just once.\n\t         */\n\t        this.onStable = new EventEmitter(false);\n\t        /**\n\t         * Notifies that an error has been delivered.\n\t         */\n\t        this.onError = new EventEmitter(false);\n\t        if (typeof Zone == 'undefined') {\n\t            throw new Error('Angular requires Zone.js prolyfill.');\n\t        }\n\t        Zone.assertZonePatched();\n\t        var self = this;\n\t        self._nesting = 0;\n\t        self._outer = self._inner = Zone.current;\n\t        if (Zone['wtfZoneSpec']) {\n\t            self._inner = self._inner.fork(Zone['wtfZoneSpec']);\n\t        }\n\t        if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {\n\t            self._inner = self._inner.fork(Zone['longStackTraceZoneSpec']);\n\t        }\n\t        forkInnerZoneWithAngularBehavior(self);\n\t    }\n\t    /**\n\t     * @return {?}\n\t     */\n\t    NgZone.isInAngularZone = function () { return Zone.current.get('isAngularZone') === true; };\n\t    /**\n\t     * @return {?}\n\t     */\n\t    NgZone.assertInAngularZone = function () {\n\t        if (!NgZone.isInAngularZone()) {\n\t            throw new Error('Expected to be in Angular Zone, but it is not!');\n\t        }\n\t    };\n\t    /**\n\t     * @return {?}\n\t     */\n\t    NgZone.assertNotInAngularZone = function () {\n\t        if (NgZone.isInAngularZone()) {\n\t            throw new Error('Expected to not be in Angular Zone, but it is!');\n\t        }\n\t    };\n\t    /**\n\t     * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n\t     * the function.\n\t     *\n\t     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n\t     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\n\t     *\n\t     * Any future tasks or microtasks scheduled from within this function will continue executing from\n\t     * within the Angular zone.\n\t     *\n\t     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    NgZone.prototype.run = function (fn) { return (((this)))._inner.run(fn); };\n\t    /**\n\t     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n\t     * rethrown.\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    NgZone.prototype.runGuarded = function (fn) { return (((this)))._inner.runGuarded(fn); };\n\t    /**\n\t     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n\t     * the function.\n\t     *\n\t     * Running functions via {\\@link #runOutsideAngular} allows you to escape Angular's zone and do\n\t     * work that\n\t     * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n\t     *\n\t     * Any future tasks or microtasks scheduled from within this function will continue executing from\n\t     * outside of the Angular zone.\n\t     *\n\t     * Use {\\@link #run} to reenter the Angular zone and do work that updates the application model.\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    NgZone.prototype.runOutsideAngular = function (fn) { return (((this)))._outer.run(fn); };\n\t    return NgZone;\n\t}());\n\t/**\n\t * @param {?} zone\n\t * @return {?}\n\t */\n\tfunction checkStable(zone) {\n\t    if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {\n\t        try {\n\t            zone._nesting++;\n\t            zone.onMicrotaskEmpty.emit(null);\n\t        }\n\t        finally {\n\t            zone._nesting--;\n\t            if (!zone.hasPendingMicrotasks) {\n\t                try {\n\t                    zone.runOutsideAngular(function () { return zone.onStable.emit(null); });\n\t                }\n\t                finally {\n\t                    zone.isStable = true;\n\t                }\n\t            }\n\t        }\n\t    }\n\t}\n\t/**\n\t * @param {?} zone\n\t * @return {?}\n\t */\n\tfunction forkInnerZoneWithAngularBehavior(zone) {\n\t    zone._inner = zone._inner.fork({\n\t        name: 'angular',\n\t        properties: /** @type {?} */ ({ 'isAngularZone': true }),\n\t        onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {\n\t            try {\n\t                onEnter(zone);\n\t                return delegate.invokeTask(target, task, applyThis, applyArgs);\n\t            }\n\t            finally {\n\t                onLeave(zone);\n\t            }\n\t        },\n\t        onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {\n\t            try {\n\t                onEnter(zone);\n\t                return delegate.invoke(target, callback, applyThis, applyArgs, source);\n\t            }\n\t            finally {\n\t                onLeave(zone);\n\t            }\n\t        },\n\t        onHasTask: function (delegate, current, target, hasTaskState) {\n\t            delegate.hasTask(target, hasTaskState);\n\t            if (current === target) {\n\t                // We are only interested in hasTask events which originate from our zone\n\t                // (A child hasTask event is not interesting to us)\n\t                if (hasTaskState.change == 'microTask') {\n\t                    zone.hasPendingMicrotasks = hasTaskState.microTask;\n\t                    checkStable(zone);\n\t                }\n\t                else if (hasTaskState.change == 'macroTask') {\n\t                    zone.hasPendingMacrotasks = hasTaskState.macroTask;\n\t                }\n\t            }\n\t        },\n\t        onHandleError: function (delegate, current, target, error) {\n\t            delegate.handleError(target, error);\n\t            zone.runOutsideAngular(function () { return zone.onError.emit(error); });\n\t            return false;\n\t        }\n\t    });\n\t}\n\t/**\n\t * @param {?} zone\n\t * @return {?}\n\t */\n\tfunction onEnter(zone) {\n\t    zone._nesting++;\n\t    if (zone.isStable) {\n\t        zone.isStable = false;\n\t        zone.onUnstable.emit(null);\n\t    }\n\t}\n\t/**\n\t * @param {?} zone\n\t * @return {?}\n\t */\n\tfunction onLeave(zone) {\n\t    zone._nesting--;\n\t    checkStable(zone);\n\t}\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * The Testability service provides testing hooks that can be accessed from\n\t * the browser and by services such as Protractor. Each bootstrapped Angular\n\t * application on the page will have an instance of Testability.\n\t * \\@experimental\n\t */\n\tvar Testability = (function () {\n\t    /**\n\t     * @param {?} _ngZone\n\t     */\n\t    function Testability(_ngZone) {\n\t        this._ngZone = _ngZone;\n\t        /**\n\t         * \\@internal\n\t         */\n\t        this._pendingCount = 0;\n\t        /**\n\t         * \\@internal\n\t         */\n\t        this._isZoneStable = true;\n\t        /**\n\t         * Whether any work was done since the last 'whenStable' callback. This is\n\t         * useful to detect if this could have potentially destabilized another\n\t         * component while it is stabilizing.\n\t         * \\@internal\n\t         */\n\t        this._didWork = false;\n\t        /**\n\t         * \\@internal\n\t         */\n\t        this._callbacks = [];\n\t        this._watchAngularEvents();\n\t    }\n\t    /**\n\t     * \\@internal\n\t     * @return {?}\n\t     */\n\t    Testability.prototype._watchAngularEvents = function () {\n\t        var _this = this;\n\t        this._ngZone.onUnstable.subscribe({\n\t            next: function () {\n\t                _this._didWork = true;\n\t                _this._isZoneStable = false;\n\t            }\n\t        });\n\t        this._ngZone.runOutsideAngular(function () {\n\t            _this._ngZone.onStable.subscribe({\n\t                next: function () {\n\t                    NgZone.assertNotInAngularZone();\n\t                    scheduleMicroTask(function () {\n\t                        _this._isZoneStable = true;\n\t                        _this._runCallbacksIfReady();\n\t                    });\n\t                }\n\t            });\n\t        });\n\t    };\n\t    /**\n\t     * @return {?}\n\t     */\n\t    Testability.prototype.increasePendingRequestCount = function () {\n\t        this._pendingCount += 1;\n\t        this._didWork = true;\n\t        return this._pendingCount;\n\t    };\n\t    /**\n\t     * @return {?}\n\t     */\n\t    Testability.prototype.decreasePendingRequestCount = function () {\n\t        this._pendingCount -= 1;\n\t        if (this._pendingCount < 0) {\n\t            throw new Error('pending async requests below zero');\n\t        }\n\t        this._runCallbacksIfReady();\n\t        return this._pendingCount;\n\t    };\n\t    /**\n\t     * @return {?}\n\t     */\n\t    Testability.prototype.isStable = function () {\n\t        return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;\n\t    };\n\t    /**\n\t     * \\@internal\n\t     * @return {?}\n\t     */\n\t    Testability.prototype._runCallbacksIfReady = function () {\n\t        var _this = this;\n\t        if (this.isStable()) {\n\t            // Schedules the call backs in a new frame so that it is always async.\n\t            scheduleMicroTask(function () {\n\t                while (_this._callbacks.length !== 0) {\n\t                    (((_this._callbacks.pop())))(_this._didWork);\n\t                }\n\t                _this._didWork = false;\n\t            });\n\t        }\n\t        else {\n\t            // Not Ready\n\t            this._didWork = true;\n\t        }\n\t    };\n\t    /**\n\t     * @param {?} callback\n\t     * @return {?}\n\t     */\n\t    Testability.prototype.whenStable = function (callback) {\n\t        this._callbacks.push(callback);\n\t        this._runCallbacksIfReady();\n\t    };\n\t    /**\n\t     * @return {?}\n\t     */\n\t    Testability.prototype.getPendingRequestCount = function () { return this._pendingCount; };\n\t    /**\n\t     * @deprecated use findProviders\n\t     * @param {?} using\n\t     * @param {?} provider\n\t     * @param {?} exactMatch\n\t     * @return {?}\n\t     */\n\t    Testability.prototype.findBindings = function (using, provider, exactMatch) {\n\t        // TODO(juliemr): implement.\n\t        return [];\n\t    };\n\t    /**\n\t     * @param {?} using\n\t     * @param {?} provider\n\t     * @param {?} exactMatch\n\t     * @return {?}\n\t     */\n\t    Testability.prototype.findProviders = function (using, provider, exactMatch) {\n\t        // TODO(juliemr): implement.\n\t        return [];\n\t    };\n\t    return Testability;\n\t}());\n\tTestability.decorators = [\n\t    { type: Injectable },\n\t];\n\t/**\n\t * @nocollapse\n\t */\n\tTestability.ctorParameters = function () { return [\n\t    { type: NgZone, },\n\t]; };\n\t/**\n\t * A global registry of {\\@link Testability} instances for specific elements.\n\t * \\@experimental\n\t */\n\tvar TestabilityRegistry = (function () {\n\t    function TestabilityRegistry() {\n\t        /**\n\t         * \\@internal\n\t         */\n\t        this._applications = new Map();\n\t        _testabilityGetter.addToWindow(this);\n\t    }\n\t    /**\n\t     * @param {?} token\n\t     * @param {?} testability\n\t     * @return {?}\n\t     */\n\t    TestabilityRegistry.prototype.registerApplication = function (token, testability) {\n\t        this._applications.set(token, testability);\n\t    };\n\t    /**\n\t     * @param {?} elem\n\t     * @return {?}\n\t     */\n\t    TestabilityRegistry.prototype.getTestability = function (elem) { return this._applications.get(elem) || null; };\n\t    /**\n\t     * @return {?}\n\t     */\n\t    TestabilityRegistry.prototype.getAllTestabilities = function () { return Array.from(this._applications.values()); };\n\t    /**\n\t     * @return {?}\n\t     */\n\t    TestabilityRegistry.prototype.getAllRootElements = function () { return Array.from(this._applications.keys()); };\n\t    /**\n\t     * @param {?} elem\n\t     * @param {?=} findInAncestors\n\t     * @return {?}\n\t     */\n\t    TestabilityRegistry.prototype.findTestabilityInTree = function (elem, findInAncestors) {\n\t        if (findInAncestors === void 0) { findInAncestors = true; }\n\t        return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);\n\t    };\n\t    return TestabilityRegistry;\n\t}());\n\tTestabilityRegistry.decorators = [\n\t    { type: Injectable },\n\t];\n\t/**\n\t * @nocollapse\n\t */\n\tTestabilityRegistry.ctorParameters = function () { return []; };\n\tvar _NoopGetTestability = (function () {\n\t    function _NoopGetTestability() {\n\t    }\n\t    /**\n\t     * @param {?} registry\n\t     * @return {?}\n\t     */\n\t    _NoopGetTestability.prototype.addToWindow = function (registry) { };\n\t    /**\n\t     * @param {?} registry\n\t     * @param {?} elem\n\t     * @param {?} findInAncestors\n\t     * @return {?}\n\t     */\n\t    _NoopGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {\n\t        return null;\n\t    };\n\t    return _NoopGetTestability;\n\t}());\n\t/**\n\t * Set the {\\@link GetTestability} implementation used by the Angular testing framework.\n\t * \\@experimental\n\t * @param {?} getter\n\t * @return {?}\n\t */\n\tfunction setTestabilityGetter(getter) {\n\t    _testabilityGetter = getter;\n\t}\n\tvar _testabilityGetter = new _NoopGetTestability();\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\tvar _devMode = true;\n\tvar _runModeLocked = false;\n\tvar _platform;\n\tvar ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');\n\t/**\n\t * Disable Angular's development mode, which turns off assertions and other\n\t * checks within the framework.\n\t *\n\t * One important assertion this disables verifies that a change detection pass\n\t * does not result in additional changes to any bindings (also known as\n\t * unidirectional data flow).\n\t *\n\t * \\@stable\n\t * @return {?}\n\t */\n\tfunction enableProdMode() {\n\t    if (_runModeLocked) {\n\t        throw new Error('Cannot enable prod mode after platform setup.');\n\t    }\n\t    _devMode = false;\n\t}\n\t/**\n\t * Returns whether Angular is in development mode. After called once,\n\t * the value is locked and won't change any more.\n\t *\n\t * By default, this is true, unless a user calls `enableProdMode` before calling this.\n\t *\n\t * \\@experimental APIs related to application bootstrap are currently under review.\n\t * @return {?}\n\t */\n\tfunction isDevMode() {\n\t    _runModeLocked = true;\n\t    return _devMode;\n\t}\n\t/**\n\t * A token for third-party components that can register themselves with NgProbe.\n\t *\n\t * \\@experimental\n\t */\n\tvar NgProbeToken = (function () {\n\t    /**\n\t     * @param {?} name\n\t     * @param {?} token\n\t     */\n\t    function NgProbeToken(name, token) {\n\t        this.name = name;\n\t        this.token = token;\n\t    }\n\t    return NgProbeToken;\n\t}());\n\t/**\n\t * Creates a platform.\n\t * Platforms have to be eagerly created via this function.\n\t *\n\t * \\@experimental APIs related to application bootstrap are currently under review.\n\t * @param {?} injector\n\t * @return {?}\n\t */\n\tfunction createPlatform(injector) {\n\t    if (_platform && !_platform.destroyed &&\n\t        !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n\t        throw new Error('There can be only one platform. Destroy the previous one to create a new one.');\n\t    }\n\t    _platform = injector.get(PlatformRef);\n\t    var /** @type {?} */ inits = injector.get(PLATFORM_INITIALIZER, null);\n\t    if (inits)\n\t        inits.forEach(function (init) { return init(); });\n\t    return _platform;\n\t}\n\t/**\n\t * Creates a factory for a platform\n\t *\n\t * \\@experimental APIs related to application bootstrap are currently under review.\n\t * @param {?} parentPlatformFactory\n\t * @param {?} name\n\t * @param {?=} providers\n\t * @return {?}\n\t */\n\tfunction createPlatformFactory(parentPlatformFactory, name, providers) {\n\t    if (providers === void 0) { providers = []; }\n\t    var /** @type {?} */ marker = new InjectionToken(\"Platform: \" + name);\n\t    return function (extraProviders) {\n\t        if (extraProviders === void 0) { extraProviders = []; }\n\t        var /** @type {?} */ platform = getPlatform();\n\t        if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n\t            if (parentPlatformFactory) {\n\t                parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));\n\t            }\n\t            else {\n\t                createPlatform(ReflectiveInjector.resolveAndCreate(providers.concat(extraProviders).concat({ provide: marker, useValue: true })));\n\t            }\n\t        }\n\t        return assertPlatform(marker);\n\t    };\n\t}\n\t/**\n\t * Checks that there currently is a platform which contains the given token as a provider.\n\t *\n\t * \\@experimental APIs related to application bootstrap are currently under review.\n\t * @param {?} requiredToken\n\t * @return {?}\n\t */\n\tfunction assertPlatform(requiredToken) {\n\t    var /** @type {?} */ platform = getPlatform();\n\t    if (!platform) {\n\t        throw new Error('No platform exists!');\n\t    }\n\t    if (!platform.injector.get(requiredToken, null)) {\n\t        throw new Error('A platform with a different configuration has been created. Please destroy it first.');\n\t    }\n\t    return platform;\n\t}\n\t/**\n\t * Destroy the existing platform.\n\t *\n\t * \\@experimental APIs related to application bootstrap are currently under review.\n\t * @return {?}\n\t */\n\tfunction destroyPlatform() {\n\t    if (_platform && !_platform.destroyed) {\n\t        _platform.destroy();\n\t    }\n\t}\n\t/**\n\t * Returns the current platform.\n\t *\n\t * \\@experimental APIs related to application bootstrap are currently under review.\n\t * @return {?}\n\t */\n\tfunction getPlatform() {\n\t    return _platform && !_platform.destroyed ? _platform : null;\n\t}\n\t/**\n\t * The Angular platform is the entry point for Angular on a web page. Each page\n\t * has exactly one platform, and services (such as reflection) which are common\n\t * to every Angular application running on the page are bound in its scope.\n\t *\n\t * A page's platform is initialized implicitly when a platform is created via a platform factory\n\t * (e.g. {\\@link platformBrowser}), or explicitly by calling the {\\@link createPlatform} function.\n\t *\n\t * \\@stable\n\t * @abstract\n\t */\n\tvar PlatformRef = (function () {\n\t    function PlatformRef() {\n\t    }\n\t    /**\n\t     * Creates an instance of an `\\@NgModule` for the given platform\n\t     * for offline compilation.\n\t     *\n\t     * ## Simple Example\n\t     *\n\t     * ```typescript\n\t     * my_module.ts:\n\t     *\n\t     * \\@NgModule({\n\t     *   imports: [BrowserModule]\n\t     * })\n\t     * class MyModule {}\n\t     *\n\t     * main.ts:\n\t     * import {MyModuleNgFactory} from './my_module.ngfactory';\n\t     * import {platformBrowser} from '\\@angular/platform-browser';\n\t     *\n\t     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n\t     * ```\n\t     *\n\t     * \\@experimental APIs related to application bootstrap are currently under review.\n\t     * @abstract\n\t     * @template M\n\t     * @param {?} moduleFactory\n\t     * @return {?}\n\t     */\n\t    PlatformRef.prototype.bootstrapModuleFactory = function (moduleFactory) { };\n\t    /**\n\t     * Creates an instance of an `\\@NgModule` for a given platform using the given runtime compiler.\n\t     *\n\t     * ## Simple Example\n\t     *\n\t     * ```typescript\n\t     * \\@NgModule({\n\t     *   imports: [BrowserModule]\n\t     * })\n\t     * class MyModule {}\n\t     *\n\t     * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n\t     * ```\n\t     * \\@stable\n\t     * @abstract\n\t     * @template M\n\t     * @param {?} moduleType\n\t     * @param {?=} compilerOptions\n\t     * @return {?}\n\t     */\n\t    PlatformRef.prototype.bootstrapModule = function (moduleType, compilerOptions) { };\n\t    /**\n\t     * Register a listener to be called when the platform is disposed.\n\t     * @abstract\n\t     * @param {?} callback\n\t     * @return {?}\n\t     */\n\t    PlatformRef.prototype.onDestroy = function (callback) { };\n\t    /**\n\t     * Retrieve the platform {\\@link Injector}, which is the parent injector for\n\t     * every Angular application on the page and provides singleton providers.\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    PlatformRef.prototype.injector = function () { };\n\t    /**\n\t     * Destroy the Angular platform and all Angular applications on the page.\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    PlatformRef.prototype.destroy = function () { };\n\t    /**\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    PlatformRef.prototype.destroyed = function () { };\n\t    return PlatformRef;\n\t}());\n\t/**\n\t * @param {?} errorHandler\n\t * @param {?} ngZone\n\t * @param {?} callback\n\t * @return {?}\n\t */\n\tfunction _callAndReportToErrorHandler(errorHandler, ngZone, callback) {\n\t    try {\n\t        var /** @type {?} */ result = callback();\n\t        if (isPromise(result)) {\n\t            return result.catch(function (e) {\n\t                ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });\n\t                // rethrow as the exception handler might not do it\n\t                throw e;\n\t            });\n\t        }\n\t        return result;\n\t    }\n\t    catch (e) {\n\t        ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });\n\t        // rethrow as the exception handler might not do it\n\t        throw e;\n\t    }\n\t}\n\t/**\n\t * workaround https://github.com/angular/tsickle/issues/350\n\t * @suppress {checkTypes}\n\t */\n\tvar PlatformRef_ = (function (_super) {\n\t    __extends(PlatformRef_, _super);\n\t    /**\n\t     * @param {?} _injector\n\t     */\n\t    function PlatformRef_(_injector) {\n\t        var _this = _super.call(this) || this;\n\t        _this._injector = _injector;\n\t        _this._modules = [];\n\t        _this._destroyListeners = [];\n\t        _this._destroyed = false;\n\t        return _this;\n\t    }\n\t    /**\n\t     * @param {?} callback\n\t     * @return {?}\n\t     */\n\t    PlatformRef_.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };\n\t    Object.defineProperty(PlatformRef_.prototype, \"injector\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this._injector; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(PlatformRef_.prototype, \"destroyed\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this._destroyed; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    /**\n\t     * @return {?}\n\t     */\n\t    PlatformRef_.prototype.destroy = function () {\n\t        if (this._destroyed) {\n\t            throw new Error('The platform has already been destroyed!');\n\t        }\n\t        this._modules.slice().forEach(function (module) { return module.destroy(); });\n\t        this._destroyListeners.forEach(function (listener) { return listener(); });\n\t        this._destroyed = true;\n\t    };\n\t    /**\n\t     * @template M\n\t     * @param {?} moduleFactory\n\t     * @return {?}\n\t     */\n\t    PlatformRef_.prototype.bootstrapModuleFactory = function (moduleFactory) {\n\t        return this._bootstrapModuleFactoryWithZone(moduleFactory);\n\t    };\n\t    /**\n\t     * @template M\n\t     * @param {?} moduleFactory\n\t     * @param {?=} ngZone\n\t     * @return {?}\n\t     */\n\t    PlatformRef_.prototype._bootstrapModuleFactoryWithZone = function (moduleFactory, ngZone) {\n\t        var _this = this;\n\t        // Note: We need to create the NgZone _before_ we instantiate the module,\n\t        // as instantiating the module creates some providers eagerly.\n\t        // So we create a mini parent injector that just contains the new NgZone and\n\t        // pass that as parent to the NgModuleFactory.\n\t        if (!ngZone)\n\t            ngZone = new NgZone({ enableLongStackTrace: isDevMode() });\n\t        // Attention: Don't use ApplicationRef.run here,\n\t        // as we want to be sure that all possible constructor calls are inside `ngZone.run`!\n\t        return ngZone.run(function () {\n\t            var /** @type {?} */ ngZoneInjector = ReflectiveInjector.resolveAndCreate([{ provide: NgZone, useValue: ngZone }], _this.injector);\n\t            var /** @type {?} */ moduleRef = (moduleFactory.create(ngZoneInjector));\n\t            var /** @type {?} */ exceptionHandler = moduleRef.injector.get(ErrorHandler, null);\n\t            if (!exceptionHandler) {\n\t                throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');\n\t            }\n\t            moduleRef.onDestroy(function () { return remove(_this._modules, moduleRef); }); /** @type {?} */\n\t            ((ngZone)).runOutsideAngular(function () { return ((ngZone)).onError.subscribe({ next: function (error) { exceptionHandler.handleError(error); } }); });\n\t            return _callAndReportToErrorHandler(exceptionHandler, /** @type {?} */ ((ngZone)), function () {\n\t                var /** @type {?} */ initStatus = moduleRef.injector.get(ApplicationInitStatus);\n\t                initStatus.runInitializers();\n\t                return initStatus.donePromise.then(function () {\n\t                    _this._moduleDoBootstrap(moduleRef);\n\t                    return moduleRef;\n\t                });\n\t            });\n\t        });\n\t    };\n\t    /**\n\t     * @template M\n\t     * @param {?} moduleType\n\t     * @param {?=} compilerOptions\n\t     * @return {?}\n\t     */\n\t    PlatformRef_.prototype.bootstrapModule = function (moduleType, compilerOptions) {\n\t        if (compilerOptions === void 0) { compilerOptions = []; }\n\t        return this._bootstrapModuleWithZone(moduleType, compilerOptions);\n\t    };\n\t    /**\n\t     * @template M\n\t     * @param {?} moduleType\n\t     * @param {?=} compilerOptions\n\t     * @param {?=} ngZone\n\t     * @return {?}\n\t     */\n\t    PlatformRef_.prototype._bootstrapModuleWithZone = function (moduleType, compilerOptions, ngZone) {\n\t        var _this = this;\n\t        if (compilerOptions === void 0) { compilerOptions = []; }\n\t        var /** @type {?} */ compilerFactory = this.injector.get(CompilerFactory);\n\t        var /** @type {?} */ compiler = compilerFactory.createCompiler(Array.isArray(compilerOptions) ? compilerOptions : [compilerOptions]);\n\t        return compiler.compileModuleAsync(moduleType)\n\t            .then(function (moduleFactory) { return _this._bootstrapModuleFactoryWithZone(moduleFactory, ngZone); });\n\t    };\n\t    /**\n\t     * @param {?} moduleRef\n\t     * @return {?}\n\t     */\n\t    PlatformRef_.prototype._moduleDoBootstrap = function (moduleRef) {\n\t        var /** @type {?} */ appRef = (moduleRef.injector.get(ApplicationRef));\n\t        if (moduleRef._bootstrapComponents.length > 0) {\n\t            moduleRef._bootstrapComponents.forEach(function (f) { return appRef.bootstrap(f); });\n\t        }\n\t        else if (moduleRef.instance.ngDoBootstrap) {\n\t            moduleRef.instance.ngDoBootstrap(appRef);\n\t        }\n\t        else {\n\t            throw new Error(\"The module \" + stringify(moduleRef.instance.constructor) + \" was bootstrapped, but it does not declare \\\"@NgModule.bootstrap\\\" components nor a \\\"ngDoBootstrap\\\" method. \" +\n\t                \"Please define one of these.\");\n\t        }\n\t        this._modules.push(moduleRef);\n\t    };\n\t    return PlatformRef_;\n\t}(PlatformRef));\n\tPlatformRef_.decorators = [\n\t    { type: Injectable },\n\t];\n\t/**\n\t * @nocollapse\n\t */\n\tPlatformRef_.ctorParameters = function () { return [\n\t    { type: Injector, },\n\t]; };\n\t/**\n\t * A reference to an Angular application running on a page.\n\t *\n\t * \\@stable\n\t * @abstract\n\t */\n\tvar ApplicationRef = (function () {\n\t    function ApplicationRef() {\n\t    }\n\t    /**\n\t     * Bootstrap a new component at the root level of the application.\n\t     *\n\t     * ### Bootstrap process\n\t     *\n\t     * When bootstrapping a new root component into an application, Angular mounts the\n\t     * specified application component onto DOM elements identified by the [componentType]'s\n\t     * selector and kicks off automatic change detection to finish initializing the component.\n\t     *\n\t     * Optionally, a component can be mounted onto a DOM element that does not match the\n\t     * [componentType]'s selector.\n\t     *\n\t     * ### Example\n\t     * {\\@example core/ts/platform/platform.ts region='longform'}\n\t     * @abstract\n\t     * @template C\n\t     * @param {?} componentFactory\n\t     * @param {?=} rootSelectorOrNode\n\t     * @return {?}\n\t     */\n\t    ApplicationRef.prototype.bootstrap = function (componentFactory, rootSelectorOrNode) { };\n\t    /**\n\t     * Invoke this method to explicitly process change detection and its side-effects.\n\t     *\n\t     * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n\t     * further changes are detected. If additional changes are picked up during this second cycle,\n\t     * bindings in the app have side-effects that cannot be resolved in a single change detection\n\t     * pass.\n\t     * In this case, Angular throws an error, since an Angular application can only have one change\n\t     * detection pass during which all change detection must complete.\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    ApplicationRef.prototype.tick = function () { };\n\t    /**\n\t     * Get a list of component types registered to this application.\n\t     * This list is populated even before the component is created.\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    ApplicationRef.prototype.componentTypes = function () { };\n\t    /**\n\t     * Get a list of components registered to this application.\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    ApplicationRef.prototype.components = function () { };\n\t    /**\n\t     * Attaches a view so that it will be dirty checked.\n\t     * The view will be automatically detached when it is destroyed.\n\t     * This will throw if the view is already attached to a ViewContainer.\n\t     * @abstract\n\t     * @param {?} view\n\t     * @return {?}\n\t     */\n\t    ApplicationRef.prototype.attachView = function (view) { };\n\t    /**\n\t     * Detaches a view from dirty checking again.\n\t     * @abstract\n\t     * @param {?} view\n\t     * @return {?}\n\t     */\n\t    ApplicationRef.prototype.detachView = function (view) { };\n\t    /**\n\t     * Returns the number of attached views.\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    ApplicationRef.prototype.viewCount = function () { };\n\t    /**\n\t     * Returns an Observable that indicates when the application is stable or unstable.\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    ApplicationRef.prototype.isStable = function () { };\n\t    return ApplicationRef;\n\t}());\n\t/**\n\t * workaround https://github.com/angular/tsickle/issues/350\n\t * @suppress {checkTypes}\n\t */\n\tvar ApplicationRef_ = (function (_super) {\n\t    __extends(ApplicationRef_, _super);\n\t    /**\n\t     * @param {?} _zone\n\t     * @param {?} _console\n\t     * @param {?} _injector\n\t     * @param {?} _exceptionHandler\n\t     * @param {?} _componentFactoryResolver\n\t     * @param {?} _initStatus\n\t     */\n\t    function ApplicationRef_(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus) {\n\t        var _this = _super.call(this) || this;\n\t        _this._zone = _zone;\n\t        _this._console = _console;\n\t        _this._injector = _injector;\n\t        _this._exceptionHandler = _exceptionHandler;\n\t        _this._componentFactoryResolver = _componentFactoryResolver;\n\t        _this._initStatus = _initStatus;\n\t        _this._bootstrapListeners = [];\n\t        _this._rootComponents = [];\n\t        _this._rootComponentTypes = [];\n\t        _this._views = [];\n\t        _this._runningTick = false;\n\t        _this._enforceNoNewChanges = false;\n\t        _this._stable = true;\n\t        _this._enforceNoNewChanges = isDevMode();\n\t        _this._zone.onMicrotaskEmpty.subscribe({ next: function () { _this._zone.run(function () { _this.tick(); }); } });\n\t        var isCurrentlyStable = new rxjs_Observable.Observable(function (observer) {\n\t            _this._stable = _this._zone.isStable && !_this._zone.hasPendingMacrotasks &&\n\t                !_this._zone.hasPendingMicrotasks;\n\t            _this._zone.runOutsideAngular(function () {\n\t                observer.next(_this._stable);\n\t                observer.complete();\n\t            });\n\t        });\n\t        var isStable = new rxjs_Observable.Observable(function (observer) {\n\t            // Create the subscription to onStable outside the Angular Zone so that\n\t            // the callback is run outside the Angular Zone.\n\t            var stableSub;\n\t            _this._zone.runOutsideAngular(function () {\n\t                stableSub = _this._zone.onStable.subscribe(function () {\n\t                    NgZone.assertNotInAngularZone();\n\t                    // Check whether there are no pending macro/micro tasks in the next tick\n\t                    // to allow for NgZone to update the state.\n\t                    scheduleMicroTask(function () {\n\t                        if (!_this._stable && !_this._zone.hasPendingMacrotasks &&\n\t                            !_this._zone.hasPendingMicrotasks) {\n\t                            _this._stable = true;\n\t                            observer.next(true);\n\t                        }\n\t                    });\n\t                });\n\t            });\n\t            var unstableSub = _this._zone.onUnstable.subscribe(function () {\n\t                NgZone.assertInAngularZone();\n\t                if (_this._stable) {\n\t                    _this._stable = false;\n\t                    _this._zone.runOutsideAngular(function () { observer.next(false); });\n\t                }\n\t            });\n\t            return function () {\n\t                stableSub.unsubscribe();\n\t                unstableSub.unsubscribe();\n\t            };\n\t        });\n\t        _this._isStable = rxjs_observable_merge.merge(isCurrentlyStable, rxjs_operator_share.share.call(isStable));\n\t        return _this;\n\t    }\n\t    /**\n\t     * @param {?} viewRef\n\t     * @return {?}\n\t     */\n\t    ApplicationRef_.prototype.attachView = function (viewRef) {\n\t        var /** @type {?} */ view = ((viewRef));\n\t        this._views.push(view);\n\t        view.attachToAppRef(this);\n\t    };\n\t    /**\n\t     * @param {?} viewRef\n\t     * @return {?}\n\t     */\n\t    ApplicationRef_.prototype.detachView = function (viewRef) {\n\t        var /** @type {?} */ view = ((viewRef));\n\t        remove(this._views, view);\n\t        view.detachFromAppRef();\n\t    };\n\t    /**\n\t     * @template C\n\t     * @param {?} componentOrFactory\n\t     * @param {?=} rootSelectorOrNode\n\t     * @return {?}\n\t     */\n\t    ApplicationRef_.prototype.bootstrap = function (componentOrFactory, rootSelectorOrNode) {\n\t        var _this = this;\n\t        if (!this._initStatus.done) {\n\t            throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');\n\t        }\n\t        var /** @type {?} */ componentFactory;\n\t        if (componentOrFactory instanceof ComponentFactory) {\n\t            componentFactory = componentOrFactory;\n\t        }\n\t        else {\n\t            componentFactory = ((this._componentFactoryResolver.resolveComponentFactory(componentOrFactory)));\n\t        }\n\t        this._rootComponentTypes.push(componentFactory.componentType);\n\t        // Create a factory associated with the current module if it's not bound to some other\n\t        var /** @type {?} */ ngModule = componentFactory instanceof ComponentFactoryBoundToModule ?\n\t            null :\n\t            this._injector.get(NgModuleRef);\n\t        var /** @type {?} */ selectorOrNode = rootSelectorOrNode || componentFactory.selector;\n\t        var /** @type {?} */ compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);\n\t        compRef.onDestroy(function () { _this._unloadComponent(compRef); });\n\t        var /** @type {?} */ testability = compRef.injector.get(Testability, null);\n\t        if (testability) {\n\t            compRef.injector.get(TestabilityRegistry)\n\t                .registerApplication(compRef.location.nativeElement, testability);\n\t        }\n\t        this._loadComponent(compRef);\n\t        if (isDevMode()) {\n\t            this._console.log(\"Angular is running in the development mode. Call enableProdMode() to enable the production mode.\");\n\t        }\n\t        return compRef;\n\t    };\n\t    /**\n\t     * @param {?} componentRef\n\t     * @return {?}\n\t     */\n\t    ApplicationRef_.prototype._loadComponent = function (componentRef) {\n\t        this.attachView(componentRef.hostView);\n\t        this.tick();\n\t        this._rootComponents.push(componentRef);\n\t        // Get the listeners lazily to prevent DI cycles.\n\t        var /** @type {?} */ listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);\n\t        listeners.forEach(function (listener) { return listener(componentRef); });\n\t    };\n\t    /**\n\t     * @param {?} componentRef\n\t     * @return {?}\n\t     */\n\t    ApplicationRef_.prototype._unloadComponent = function (componentRef) {\n\t        this.detachView(componentRef.hostView);\n\t        remove(this._rootComponents, componentRef);\n\t    };\n\t    /**\n\t     * @return {?}\n\t     */\n\t    ApplicationRef_.prototype.tick = function () {\n\t        var _this = this;\n\t        if (this._runningTick) {\n\t            throw new Error('ApplicationRef.tick is called recursively');\n\t        }\n\t        var /** @type {?} */ scope = ApplicationRef_._tickScope();\n\t        try {\n\t            this._runningTick = true;\n\t            this._views.forEach(function (view) { return view.detectChanges(); });\n\t            if (this._enforceNoNewChanges) {\n\t                this._views.forEach(function (view) { return view.checkNoChanges(); });\n\t            }\n\t        }\n\t        catch (e) {\n\t            // Attention: Don't rethrow as it could cancel subscriptions to Observables!\n\t            this._zone.runOutsideAngular(function () { return _this._exceptionHandler.handleError(e); });\n\t        }\n\t        finally {\n\t            this._runningTick = false;\n\t            wtfLeave(scope);\n\t        }\n\t    };\n\t    /**\n\t     * @return {?}\n\t     */\n\t    ApplicationRef_.prototype.ngOnDestroy = function () {\n\t        // TODO(alxhub): Dispose of the NgZone.\n\t        this._views.slice().forEach(function (view) { return view.destroy(); });\n\t    };\n\t    Object.defineProperty(ApplicationRef_.prototype, \"viewCount\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this._views.length; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(ApplicationRef_.prototype, \"componentTypes\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this._rootComponentTypes; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(ApplicationRef_.prototype, \"components\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this._rootComponents; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(ApplicationRef_.prototype, \"isStable\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this._isStable; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    return ApplicationRef_;\n\t}(ApplicationRef));\n\t/**\n\t * \\@internal\n\t */\n\tApplicationRef_._tickScope = wtfCreateScope('ApplicationRef#tick()');\n\tApplicationRef_.decorators = [\n\t    { type: Injectable },\n\t];\n\t/**\n\t * @nocollapse\n\t */\n\tApplicationRef_.ctorParameters = function () { return [\n\t    { type: NgZone, },\n\t    { type: Console, },\n\t    { type: Injector, },\n\t    { type: ErrorHandler, },\n\t    { type: ComponentFactoryResolver, },\n\t    { type: ApplicationInitStatus, },\n\t]; };\n\t/**\n\t * @template T\n\t * @param {?} list\n\t * @param {?} el\n\t * @return {?}\n\t */\n\tfunction remove(list, el) {\n\t    var /** @type {?} */ index = list.indexOf(el);\n\t    if (index > -1) {\n\t        list.splice(index, 1);\n\t    }\n\t}\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t// Public API for Zone\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * @deprecated Use `RendererType2` (and `Renderer2`) instead.\n\t */\n\tvar RenderComponentType = (function () {\n\t    /**\n\t     * @param {?} id\n\t     * @param {?} templateUrl\n\t     * @param {?} slotCount\n\t     * @param {?} encapsulation\n\t     * @param {?} styles\n\t     * @param {?} animations\n\t     */\n\t    function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {\n\t        this.id = id;\n\t        this.templateUrl = templateUrl;\n\t        this.slotCount = slotCount;\n\t        this.encapsulation = encapsulation;\n\t        this.styles = styles;\n\t        this.animations = animations;\n\t    }\n\t    return RenderComponentType;\n\t}());\n\t/**\n\t * @deprecated Debug info is handeled internally in the view engine now.\n\t * @abstract\n\t */\n\tvar RenderDebugInfo = (function () {\n\t    function RenderDebugInfo() {\n\t    }\n\t    /**\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    RenderDebugInfo.prototype.injector = function () { };\n\t    /**\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    RenderDebugInfo.prototype.component = function () { };\n\t    /**\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    RenderDebugInfo.prototype.providerTokens = function () { };\n\t    /**\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    RenderDebugInfo.prototype.references = function () { };\n\t    /**\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    RenderDebugInfo.prototype.context = function () { };\n\t    /**\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    RenderDebugInfo.prototype.source = function () { };\n\t    return RenderDebugInfo;\n\t}());\n\t/**\n\t * @deprecated Use the `Renderer2` instead.\n\t * @abstract\n\t */\n\tvar Renderer = (function () {\n\t    function Renderer() {\n\t    }\n\t    /**\n\t     * @abstract\n\t     * @param {?} selectorOrNode\n\t     * @param {?=} debugInfo\n\t     * @return {?}\n\t     */\n\t    Renderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) { };\n\t    /**\n\t     * @abstract\n\t     * @param {?} parentElement\n\t     * @param {?} name\n\t     * @param {?=} debugInfo\n\t     * @return {?}\n\t     */\n\t    Renderer.prototype.createElement = function (parentElement, name, debugInfo) { };\n\t    /**\n\t     * @abstract\n\t     * @param {?} hostElement\n\t     * @return {?}\n\t     */\n\t    Renderer.prototype.createViewRoot = function (hostElement) { };\n\t    /**\n\t     * @abstract\n\t     * @param {?} parentElement\n\t     * @param {?=} debugInfo\n\t     * @return {?}\n\t     */\n\t    Renderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) { };\n\t    /**\n\t     * @abstract\n\t     * @param {?} parentElement\n\t     * @param {?} value\n\t     * @param {?=} debugInfo\n\t     * @return {?}\n\t     */\n\t    Renderer.prototype.createText = function (parentElement, value, debugInfo) { };\n\t    /**\n\t     * @abstract\n\t     * @param {?} parentElement\n\t     * @param {?} nodes\n\t     * @return {?}\n\t     */\n\t    Renderer.prototype.projectNodes = function (parentElement, nodes) { };\n\t    /**\n\t     * @abstract\n\t     * @param {?} node\n\t     * @param {?} viewRootNodes\n\t     * @return {?}\n\t     */\n\t    Renderer.prototype.attachViewAfter = function (node, viewRootNodes) { };\n\t    /**\n\t     * @abstract\n\t     * @param {?} viewRootNodes\n\t     * @return {?}\n\t     */\n\t    Renderer.prototype.detachView = function (viewRootNodes) { };\n\t    /**\n\t     * @abstract\n\t     * @param {?} hostElement\n\t     * @param {?} viewAllNodes\n\t     * @return {?}\n\t     */\n\t    Renderer.prototype.destroyView = function (hostElement, viewAllNodes) { };\n\t    /**\n\t     * @abstract\n\t     * @param {?} renderElement\n\t     * @param {?} name\n\t     * @param {?} callback\n\t     * @return {?}\n\t     */\n\t    Renderer.prototype.listen = function (renderElement, name, callback) { };\n\t    /**\n\t     * @abstract\n\t     * @param {?} target\n\t     * @param {?} name\n\t     * @param {?} callback\n\t     * @return {?}\n\t     */\n\t    Renderer.prototype.listenGlobal = function (target, name, callback) { };\n\t    /**\n\t     * @abstract\n\t     * @param {?} renderElement\n\t     * @param {?} propertyName\n\t     * @param {?} propertyValue\n\t     * @return {?}\n\t     */\n\t    Renderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) { };\n\t    /**\n\t     * @abstract\n\t     * @param {?} renderElement\n\t     * @param {?} attributeName\n\t     * @param {?} attributeValue\n\t     * @return {?}\n\t     */\n\t    Renderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) { };\n\t    /**\n\t     * Used only in debug mode to serialize property changes to dom nodes as attributes.\n\t     * @abstract\n\t     * @param {?} renderElement\n\t     * @param {?} propertyName\n\t     * @param {?} propertyValue\n\t     * @return {?}\n\t     */\n\t    Renderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { };\n\t    /**\n\t     * @abstract\n\t     * @param {?} renderElement\n\t     * @param {?} className\n\t     * @param {?} isAdd\n\t     * @return {?}\n\t     */\n\t    Renderer.prototype.setElementClass = function (renderElement, className, isAdd) { };\n\t    /**\n\t     * @abstract\n\t     * @param {?} renderElement\n\t     * @param {?} styleName\n\t     * @param {?} styleValue\n\t     * @return {?}\n\t     */\n\t    Renderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) { };\n\t    /**\n\t     * @abstract\n\t     * @param {?} renderElement\n\t     * @param {?} methodName\n\t     * @param {?=} args\n\t     * @return {?}\n\t     */\n\t    Renderer.prototype.invokeElementMethod = function (renderElement, methodName, args) { };\n\t    /**\n\t     * @abstract\n\t     * @param {?} renderNode\n\t     * @param {?} text\n\t     * @return {?}\n\t     */\n\t    Renderer.prototype.setText = function (renderNode, text) { };\n\t    /**\n\t     * @abstract\n\t     * @param {?} element\n\t     * @param {?} startingStyles\n\t     * @param {?} keyframes\n\t     * @param {?} duration\n\t     * @param {?} delay\n\t     * @param {?} easing\n\t     * @param {?=} previousPlayers\n\t     * @return {?}\n\t     */\n\t    Renderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) { };\n\t    return Renderer;\n\t}());\n\tvar Renderer2Interceptor = new InjectionToken('Renderer2Interceptor');\n\t/**\n\t * Injectable service that provides a low-level interface for modifying the UI.\n\t *\n\t * Use this service to bypass Angular's templating and make custom UI changes that can't be\n\t * expressed declaratively. For example if you need to set a property or an attribute whose name is\n\t * not statically known, use {\\@link Renderer#setElementProperty} or {\\@link\n\t * Renderer#setElementAttribute}\n\t * respectively.\n\t *\n\t * If you are implementing a custom renderer, you must implement this interface.\n\t *\n\t * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n\t *\n\t * @deprecated Use `RendererFactory2` instead.\n\t * @abstract\n\t */\n\tvar RootRenderer = (function () {\n\t    function RootRenderer() {\n\t    }\n\t    /**\n\t     * @abstract\n\t     * @param {?} componentType\n\t     * @return {?}\n\t     */\n\t    RootRenderer.prototype.renderComponent = function (componentType) { };\n\t    return RootRenderer;\n\t}());\n\t/**\n\t * \\@experimental\n\t * @abstract\n\t */\n\tvar RendererFactory2 = (function () {\n\t    function RendererFactory2() {\n\t    }\n\t    /**\n\t     * @abstract\n\t     * @param {?} hostElement\n\t     * @param {?} type\n\t     * @return {?}\n\t     */\n\t    RendererFactory2.prototype.createRenderer = function (hostElement, type) { };\n\t    /**\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    RendererFactory2.prototype.begin = function () { };\n\t    /**\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    RendererFactory2.prototype.end = function () { };\n\t    /**\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    RendererFactory2.prototype.whenRenderingDone = function () { };\n\t    return RendererFactory2;\n\t}());\n\tvar RendererStyleFlags2 = {};\n\tRendererStyleFlags2.Important = 1;\n\tRendererStyleFlags2.DashCase = 2;\n\tRendererStyleFlags2[RendererStyleFlags2.Important] = \"Important\";\n\tRendererStyleFlags2[RendererStyleFlags2.DashCase] = \"DashCase\";\n\t/**\n\t * \\@experimental\n\t * @abstract\n\t */\n\tvar Renderer2 = (function () {\n\t    function Renderer2() {\n\t    }\n\t    /**\n\t     * This field can be used to store arbitrary data on this renderer instance.\n\t     * This is useful for renderers that delegate to other renderers.\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    Renderer2.prototype.data = function () { };\n\t    /**\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    Renderer2.prototype.destroy = function () { };\n\t    /**\n\t     * @abstract\n\t     * @param {?} name\n\t     * @param {?=} namespace\n\t     * @return {?}\n\t     */\n\t    Renderer2.prototype.createElement = function (name, namespace) { };\n\t    /**\n\t     * @abstract\n\t     * @param {?} value\n\t     * @return {?}\n\t     */\n\t    Renderer2.prototype.createComment = function (value) { };\n\t    /**\n\t     * @abstract\n\t     * @param {?} value\n\t     * @return {?}\n\t     */\n\t    Renderer2.prototype.createText = function (value) { };\n\t    /**\n\t     * @abstract\n\t     * @param {?} parent\n\t     * @param {?} newChild\n\t     * @return {?}\n\t     */\n\t    Renderer2.prototype.appendChild = function (parent, newChild) { };\n\t    /**\n\t     * @abstract\n\t     * @param {?} parent\n\t     * @param {?} newChild\n\t     * @param {?} refChild\n\t     * @return {?}\n\t     */\n\t    Renderer2.prototype.insertBefore = function (parent, newChild, refChild) { };\n\t    /**\n\t     * @abstract\n\t     * @param {?} parent\n\t     * @param {?} oldChild\n\t     * @return {?}\n\t     */\n\t    Renderer2.prototype.removeChild = function (parent, oldChild) { };\n\t    /**\n\t     * @abstract\n\t     * @param {?} selectorOrNode\n\t     * @return {?}\n\t     */\n\t    Renderer2.prototype.selectRootElement = function (selectorOrNode) { };\n\t    /**\n\t     * Attention: On WebWorkers, this will always return a value,\n\t     * as we are asking for a result synchronously. I.e.\n\t     * the caller can't rely on checking whether this is null or not.\n\t     * @abstract\n\t     * @param {?} node\n\t     * @return {?}\n\t     */\n\t    Renderer2.prototype.parentNode = function (node) { };\n\t    /**\n\t     * Attention: On WebWorkers, this will always return a value,\n\t     * as we are asking for a result synchronously. I.e.\n\t     * the caller can't rely on checking whether this is null or not.\n\t     * @abstract\n\t     * @param {?} node\n\t     * @return {?}\n\t     */\n\t    Renderer2.prototype.nextSibling = function (node) { };\n\t    /**\n\t     * @abstract\n\t     * @param {?} el\n\t     * @param {?} name\n\t     * @param {?} value\n\t     * @param {?=} namespace\n\t     * @return {?}\n\t     */\n\t    Renderer2.prototype.setAttribute = function (el, name, value, namespace) { };\n\t    /**\n\t     * @abstract\n\t     * @param {?} el\n\t     * @param {?} name\n\t     * @param {?=} namespace\n\t     * @return {?}\n\t     */\n\t    Renderer2.prototype.removeAttribute = function (el, name, namespace) { };\n\t    /**\n\t     * @abstract\n\t     * @param {?} el\n\t     * @param {?} name\n\t     * @return {?}\n\t     */\n\t    Renderer2.prototype.addClass = function (el, name) { };\n\t    /**\n\t     * @abstract\n\t     * @param {?} el\n\t     * @param {?} name\n\t     * @return {?}\n\t     */\n\t    Renderer2.prototype.removeClass = function (el, name) { };\n\t    /**\n\t     * @abstract\n\t     * @param {?} el\n\t     * @param {?} style\n\t     * @param {?} value\n\t     * @param {?=} flags\n\t     * @return {?}\n\t     */\n\t    Renderer2.prototype.setStyle = function (el, style, value, flags) { };\n\t    /**\n\t     * @abstract\n\t     * @param {?} el\n\t     * @param {?} style\n\t     * @param {?=} flags\n\t     * @return {?}\n\t     */\n\t    Renderer2.prototype.removeStyle = function (el, style, flags) { };\n\t    /**\n\t     * @abstract\n\t     * @param {?} el\n\t     * @param {?} name\n\t     * @param {?} value\n\t     * @return {?}\n\t     */\n\t    Renderer2.prototype.setProperty = function (el, name, value) { };\n\t    /**\n\t     * @abstract\n\t     * @param {?} node\n\t     * @param {?} value\n\t     * @return {?}\n\t     */\n\t    Renderer2.prototype.setValue = function (node, value) { };\n\t    /**\n\t     * @abstract\n\t     * @param {?} target\n\t     * @param {?} eventName\n\t     * @param {?} callback\n\t     * @return {?}\n\t     */\n\t    Renderer2.prototype.listen = function (target, eventName, callback) { };\n\t    return Renderer2;\n\t}());\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t// Public API for render\n\tvar ElementRef = (function () {\n\t    /**\n\t     * @param {?} nativeElement\n\t     */\n\t    function ElementRef(nativeElement) {\n\t        this.nativeElement = nativeElement;\n\t    }\n\t    return ElementRef;\n\t}());\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * Used to load ng module factories.\n\t * \\@stable\n\t * @abstract\n\t */\n\tvar NgModuleFactoryLoader = (function () {\n\t    function NgModuleFactoryLoader() {\n\t    }\n\t    /**\n\t     * @abstract\n\t     * @param {?} path\n\t     * @return {?}\n\t     */\n\t    NgModuleFactoryLoader.prototype.load = function (path) { };\n\t    return NgModuleFactoryLoader;\n\t}());\n\tvar moduleFactories = new Map();\n\t/**\n\t * Registers a loaded module. Should only be called from generated NgModuleFactory code.\n\t * \\@experimental\n\t * @param {?} id\n\t * @param {?} factory\n\t * @return {?}\n\t */\n\tfunction registerModuleFactory(id, factory) {\n\t    var /** @type {?} */ existing = moduleFactories.get(id);\n\t    if (existing) {\n\t        throw new Error(\"Duplicate module registered for \" + id + \" - \" + existing.moduleType.name + \" vs \" + factory.moduleType.name);\n\t    }\n\t    moduleFactories.set(id, factory);\n\t}\n\t/**\n\t * @return {?}\n\t */\n\t/**\n\t * Returns the NgModuleFactory with the given id, if it exists and has been loaded.\n\t * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module\n\t * cannot be found.\n\t * \\@experimental\n\t * @param {?} id\n\t * @return {?}\n\t */\n\tfunction getModuleFactory(id) {\n\t    var /** @type {?} */ factory = moduleFactories.get(id);\n\t    if (!factory)\n\t        throw new Error(\"No module with ID \" + id + \" loaded\");\n\t    return factory;\n\t}\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * An unmodifiable list of items that Angular keeps up to date when the state\n\t * of the application changes.\n\t *\n\t * The type of object that {\\@link ViewChildren}, {\\@link ContentChildren}, and {\\@link QueryList}\n\t * provide.\n\t *\n\t * Implements an iterable interface, therefore it can be used in both ES6\n\t * javascript `for (var i of items)` loops as well as in Angular templates with\n\t * `*ngFor=\"let i of myList\"`.\n\t *\n\t * Changes can be observed by subscribing to the changes `Observable`.\n\t *\n\t * NOTE: In the future this class will implement an `Observable` interface.\n\t *\n\t * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))\n\t * ```typescript\n\t * \\@Component({...})\n\t * class Container {\n\t *   \\@ViewChildren(Item) items:QueryList<Item>;\n\t * }\n\t * ```\n\t * \\@stable\n\t */\n\tvar QueryList = (function () {\n\t    function QueryList() {\n\t        this._dirty = true;\n\t        this._results = [];\n\t        this._emitter = new EventEmitter();\n\t    }\n\t    Object.defineProperty(QueryList.prototype, \"changes\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this._emitter; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(QueryList.prototype, \"length\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this._results.length; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(QueryList.prototype, \"first\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this._results[0]; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(QueryList.prototype, \"last\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this._results[this.length - 1]; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    /**\n\t     * See\n\t     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n\t     * @template U\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    QueryList.prototype.map = function (fn) { return this._results.map(fn); };\n\t    /**\n\t     * See\n\t     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    QueryList.prototype.filter = function (fn) {\n\t        return this._results.filter(fn);\n\t    };\n\t    /**\n\t     * See\n\t     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    QueryList.prototype.find = function (fn) {\n\t        return this._results.find(fn);\n\t    };\n\t    /**\n\t     * See\n\t     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n\t     * @template U\n\t     * @param {?} fn\n\t     * @param {?} init\n\t     * @return {?}\n\t     */\n\t    QueryList.prototype.reduce = function (fn, init) {\n\t        return this._results.reduce(fn, init);\n\t    };\n\t    /**\n\t     * See\n\t     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    QueryList.prototype.forEach = function (fn) { this._results.forEach(fn); };\n\t    /**\n\t     * See\n\t     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    QueryList.prototype.some = function (fn) {\n\t        return this._results.some(fn);\n\t    };\n\t    /**\n\t     * @return {?}\n\t     */\n\t    QueryList.prototype.toArray = function () { return this._results.slice(); };\n\t    /**\n\t     * @return {?}\n\t     */\n\t    QueryList.prototype[getSymbolIterator()] = function () { return ((this._results))[getSymbolIterator()](); };\n\t    /**\n\t     * @return {?}\n\t     */\n\t    QueryList.prototype.toString = function () { return this._results.toString(); };\n\t    /**\n\t     * @param {?} res\n\t     * @return {?}\n\t     */\n\t    QueryList.prototype.reset = function (res) {\n\t        this._results = flatten(res);\n\t        this._dirty = false;\n\t    };\n\t    /**\n\t     * @return {?}\n\t     */\n\t    QueryList.prototype.notifyOnChanges = function () { this._emitter.emit(this); };\n\t    /**\n\t     * internal\n\t     * @return {?}\n\t     */\n\t    QueryList.prototype.setDirty = function () { this._dirty = true; };\n\t    Object.defineProperty(QueryList.prototype, \"dirty\", {\n\t        /**\n\t         * internal\n\t         * @return {?}\n\t         */\n\t        get: function () { return this._dirty; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    /**\n\t     * internal\n\t     * @return {?}\n\t     */\n\t    QueryList.prototype.destroy = function () {\n\t        this._emitter.complete();\n\t        this._emitter.unsubscribe();\n\t    };\n\t    return QueryList;\n\t}());\n\t/**\n\t * @template T\n\t * @param {?} list\n\t * @return {?}\n\t */\n\tfunction flatten(list) {\n\t    return list.reduce(function (flat, item) {\n\t        var /** @type {?} */ flatItem = Array.isArray(item) ? flatten(item) : item;\n\t        return ((flat)).concat(flatItem);\n\t    }, []);\n\t}\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\tvar _SEPARATOR = '#';\n\tvar FACTORY_CLASS_SUFFIX = 'NgFactory';\n\t/**\n\t * Configuration for SystemJsNgModuleLoader.\n\t * token.\n\t *\n\t * \\@experimental\n\t * @abstract\n\t */\n\tvar SystemJsNgModuleLoaderConfig = (function () {\n\t    function SystemJsNgModuleLoaderConfig() {\n\t    }\n\t    return SystemJsNgModuleLoaderConfig;\n\t}());\n\tvar DEFAULT_CONFIG = {\n\t    factoryPathPrefix: '',\n\t    factoryPathSuffix: '.ngfactory',\n\t};\n\t/**\n\t * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory\n\t * \\@experimental\n\t */\n\tvar SystemJsNgModuleLoader = (function () {\n\t    /**\n\t     * @param {?} _compiler\n\t     * @param {?=} config\n\t     */\n\t    function SystemJsNgModuleLoader(_compiler, config) {\n\t        this._compiler = _compiler;\n\t        this._config = config || DEFAULT_CONFIG;\n\t    }\n\t    /**\n\t     * @param {?} path\n\t     * @return {?}\n\t     */\n\t    SystemJsNgModuleLoader.prototype.load = function (path) {\n\t        var /** @type {?} */ offlineMode = this._compiler instanceof Compiler;\n\t        return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);\n\t    };\n\t    /**\n\t     * @param {?} path\n\t     * @return {?}\n\t     */\n\t    SystemJsNgModuleLoader.prototype.loadAndCompile = function (path) {\n\t        var _this = this;\n\t        var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];\n\t        if (exportName === undefined) {\n\t            exportName = 'default';\n\t        }\n\t        return System.import(module)\n\t            .then(function (module) { return module[exportName]; })\n\t            .then(function (type) { return checkNotEmpty(type, module, exportName); })\n\t            .then(function (type) { return _this._compiler.compileModuleAsync(type); });\n\t    };\n\t    /**\n\t     * @param {?} path\n\t     * @return {?}\n\t     */\n\t    SystemJsNgModuleLoader.prototype.loadFactory = function (path) {\n\t        var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];\n\t        var /** @type {?} */ factoryClassSuffix = FACTORY_CLASS_SUFFIX;\n\t        if (exportName === undefined) {\n\t            exportName = 'default';\n\t            factoryClassSuffix = '';\n\t        }\n\t        return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)\n\t            .then(function (module) { return module[exportName + factoryClassSuffix]; })\n\t            .then(function (factory) { return checkNotEmpty(factory, module, exportName); });\n\t    };\n\t    return SystemJsNgModuleLoader;\n\t}());\n\tSystemJsNgModuleLoader.decorators = [\n\t    { type: Injectable },\n\t];\n\t/**\n\t * @nocollapse\n\t */\n\tSystemJsNgModuleLoader.ctorParameters = function () { return [\n\t    { type: Compiler, },\n\t    { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional },] },\n\t]; };\n\t/**\n\t * @param {?} value\n\t * @param {?} modulePath\n\t * @param {?} exportName\n\t * @return {?}\n\t */\n\tfunction checkNotEmpty(value, modulePath, exportName) {\n\t    if (!value) {\n\t        throw new Error(\"Cannot find '\" + exportName + \"' in '\" + modulePath + \"'\");\n\t    }\n\t    return value;\n\t}\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * Represents an Embedded Template that can be used to instantiate Embedded Views.\n\t *\n\t * You can access a `TemplateRef`, in two ways. Via a directive placed on a `<ng-template>` element\n\t * (or directive prefixed with `*`) and have the `TemplateRef` for this Embedded View injected into\n\t * the constructor of the directive using the `TemplateRef` Token. Alternatively you can query for\n\t * the `TemplateRef` from a Component or a Directive via {\\@link Query}.\n\t *\n\t * To instantiate Embedded Views based on a Template, use\n\t * {\\@link ViewContainerRef#createEmbeddedView}, which will create the View and attach it to the\n\t * View Container.\n\t * \\@stable\n\t * @abstract\n\t */\n\tvar TemplateRef = (function () {\n\t    function TemplateRef() {\n\t    }\n\t    /**\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    TemplateRef.prototype.elementRef = function () { };\n\t    /**\n\t     * @abstract\n\t     * @param {?} context\n\t     * @return {?}\n\t     */\n\t    TemplateRef.prototype.createEmbeddedView = function (context) { };\n\t    return TemplateRef;\n\t}());\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * Represents a container where one or more Views can be attached.\n\t *\n\t * The container can contain two kinds of Views. Host Views, created by instantiating a\n\t * {\\@link Component} via {\\@link #createComponent}, and Embedded Views, created by instantiating an\n\t * {\\@link TemplateRef Embedded Template} via {\\@link #createEmbeddedView}.\n\t *\n\t * The location of the View Container within the containing View is specified by the Anchor\n\t * `element`. Each View Container can have only one Anchor Element and each Anchor Element can only\n\t * have a single View Container.\n\t *\n\t * Root elements of Views attached to this container become siblings of the Anchor Element in\n\t * the Rendered View.\n\t *\n\t * To access a `ViewContainerRef` of an Element, you can either place a {\\@link Directive} injected\n\t * with `ViewContainerRef` on the Element, or you obtain it via a {\\@link ViewChild} query.\n\t * \\@stable\n\t * @abstract\n\t */\n\tvar ViewContainerRef = (function () {\n\t    function ViewContainerRef() {\n\t    }\n\t    /**\n\t     * Anchor element that specifies the location of this container in the containing View.\n\t     * <!-- TODO: rename to anchorElement -->\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    ViewContainerRef.prototype.element = function () { };\n\t    /**\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    ViewContainerRef.prototype.injector = function () { };\n\t    /**\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    ViewContainerRef.prototype.parentInjector = function () { };\n\t    /**\n\t     * Destroys all Views in this container.\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    ViewContainerRef.prototype.clear = function () { };\n\t    /**\n\t     * Returns the {\\@link ViewRef} for the View located in this container at the specified index.\n\t     * @abstract\n\t     * @param {?} index\n\t     * @return {?}\n\t     */\n\t    ViewContainerRef.prototype.get = function (index) { };\n\t    /**\n\t     * Returns the number of Views currently attached to this container.\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    ViewContainerRef.prototype.length = function () { };\n\t    /**\n\t     * Instantiates an Embedded View based on the {\\@link TemplateRef `templateRef`} and inserts it\n\t     * into this container at the specified `index`.\n\t     *\n\t     * If `index` is not specified, the new View will be inserted as the last View in the container.\n\t     *\n\t     * Returns the {\\@link ViewRef} for the newly created View.\n\t     * @abstract\n\t     * @template C\n\t     * @param {?} templateRef\n\t     * @param {?=} context\n\t     * @param {?=} index\n\t     * @return {?}\n\t     */\n\t    ViewContainerRef.prototype.createEmbeddedView = function (templateRef, context, index) { };\n\t    /**\n\t     * Instantiates a single {\\@link Component} and inserts its Host View into this container at the\n\t     * specified `index`.\n\t     *\n\t     * The component is instantiated using its {\\@link ComponentFactory} which can be\n\t     * obtained via {\\@link ComponentFactoryResolver#resolveComponentFactory}.\n\t     *\n\t     * If `index` is not specified, the new View will be inserted as the last View in the container.\n\t     *\n\t     * You can optionally specify the {\\@link Injector} that will be used as parent for the Component.\n\t     *\n\t     * Returns the {\\@link ComponentRef} of the Host View created for the newly instantiated Component.\n\t     * @abstract\n\t     * @template C\n\t     * @param {?} componentFactory\n\t     * @param {?=} index\n\t     * @param {?=} injector\n\t     * @param {?=} projectableNodes\n\t     * @param {?=} ngModule\n\t     * @return {?}\n\t     */\n\t    ViewContainerRef.prototype.createComponent = function (componentFactory, index, injector, projectableNodes, ngModule) { };\n\t    /**\n\t     * Inserts a View identified by a {\\@link ViewRef} into the container at the specified `index`.\n\t     *\n\t     * If `index` is not specified, the new View will be inserted as the last View in the container.\n\t     *\n\t     * Returns the inserted {\\@link ViewRef}.\n\t     * @abstract\n\t     * @param {?} viewRef\n\t     * @param {?=} index\n\t     * @return {?}\n\t     */\n\t    ViewContainerRef.prototype.insert = function (viewRef, index) { };\n\t    /**\n\t     * Moves a View identified by a {\\@link ViewRef} into the container at the specified `index`.\n\t     *\n\t     * Returns the inserted {\\@link ViewRef}.\n\t     * @abstract\n\t     * @param {?} viewRef\n\t     * @param {?} currentIndex\n\t     * @return {?}\n\t     */\n\t    ViewContainerRef.prototype.move = function (viewRef, currentIndex) { };\n\t    /**\n\t     * Returns the index of the View, specified via {\\@link ViewRef}, within the current container or\n\t     * `-1` if this container doesn't contain the View.\n\t     * @abstract\n\t     * @param {?} viewRef\n\t     * @return {?}\n\t     */\n\t    ViewContainerRef.prototype.indexOf = function (viewRef) { };\n\t    /**\n\t     * Destroys a View attached to this container at the specified `index`.\n\t     *\n\t     * If `index` is not specified, the last View in the container will be removed.\n\t     * @abstract\n\t     * @param {?=} index\n\t     * @return {?}\n\t     */\n\t    ViewContainerRef.prototype.remove = function (index) { };\n\t    /**\n\t     * Use along with {\\@link #insert} to move a View within the current container.\n\t     *\n\t     * If the `index` param is omitted, the last {\\@link ViewRef} is detached.\n\t     * @abstract\n\t     * @param {?=} index\n\t     * @return {?}\n\t     */\n\t    ViewContainerRef.prototype.detach = function (index) { };\n\t    return ViewContainerRef;\n\t}());\n\t/**\n\t * \\@stable\n\t * @abstract\n\t */\n\tvar ChangeDetectorRef = (function () {\n\t    function ChangeDetectorRef() {\n\t    }\n\t    /**\n\t     * Marks all {\\@link ChangeDetectionStrategy#OnPush} ancestors as to be checked.\n\t     *\n\t     * <!-- TODO: Add a link to a chapter on OnPush components -->\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/GC512b?p=preview))\n\t     *\n\t     * ```typescript\n\t     * \\@Component({\n\t     *   selector: 'cmp',\n\t     *   changeDetection: ChangeDetectionStrategy.OnPush,\n\t     *   template: `Number of ticks: {{numberOfTicks}}`\n\t     * })\n\t     * class Cmp {\n\t     *   numberOfTicks = 0;\n\t     *\n\t     *   constructor(private ref: ChangeDetectorRef) {\n\t     *     setInterval(() => {\n\t     *       this.numberOfTicks++;\n\t     *       // the following is required, otherwise the view will not be updated\n\t     *       this.ref.markForCheck();\n\t     *     }, 1000);\n\t     *   }\n\t     * }\n\t     *\n\t     * \\@Component({\n\t     *   selector: 'app',\n\t     *   changeDetection: ChangeDetectionStrategy.OnPush,\n\t     *   template: `\n\t     *     <cmp><cmp>\n\t     *   `,\n\t     * })\n\t     * class App {\n\t     * }\n\t     * ```\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    ChangeDetectorRef.prototype.markForCheck = function () { };\n\t    /**\n\t     * Detaches the change detector from the change detector tree.\n\t     *\n\t     * The detached change detector will not be checked until it is reattached.\n\t     *\n\t     * This can also be used in combination with {\\@link ChangeDetectorRef#detectChanges} to implement\n\t     * local change\n\t     * detection checks.\n\t     *\n\t     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n\t     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n\t     *\n\t     * ### Example\n\t     *\n\t     * The following example defines a component with a large list of readonly data.\n\t     * Imagine the data changes constantly, many times per second. For performance reasons,\n\t     * we want to check and update the list every five seconds. We can do that by detaching\n\t     * the component's change detector and doing a local check every five seconds.\n\t     *\n\t     * ```typescript\n\t     * class DataProvider {\n\t     *   // in a real application the returned data will be different every time\n\t     *   get data() {\n\t     *     return [1,2,3,4,5];\n\t     *   }\n\t     * }\n\t     *\n\t     * \\@Component({\n\t     *   selector: 'giant-list',\n\t     *   template: `\n\t     *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n\t     *   `,\n\t     * })\n\t     * class GiantList {\n\t     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n\t     *     ref.detach();\n\t     *     setInterval(() => {\n\t     *       this.ref.detectChanges();\n\t     *     }, 5000);\n\t     *   }\n\t     * }\n\t     *\n\t     * \\@Component({\n\t     *   selector: 'app',\n\t     *   providers: [DataProvider],\n\t     *   template: `\n\t     *     <giant-list><giant-list>\n\t     *   `,\n\t     * })\n\t     * class App {\n\t     * }\n\t     * ```\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    ChangeDetectorRef.prototype.detach = function () { };\n\t    /**\n\t     * Checks the change detector and its children.\n\t     *\n\t     * This can also be used in combination with {\\@link ChangeDetectorRef#detach} to implement local\n\t     * change detection\n\t     * checks.\n\t     *\n\t     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n\t     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n\t     *\n\t     * ### Example\n\t     *\n\t     * The following example defines a component with a large list of readonly data.\n\t     * Imagine, the data changes constantly, many times per second. For performance reasons,\n\t     * we want to check and update the list every five seconds.\n\t     *\n\t     * We can do that by detaching the component's change detector and doing a local change detection\n\t     * check\n\t     * every five seconds.\n\t     *\n\t     * See {\\@link ChangeDetectorRef#detach} for more information.\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    ChangeDetectorRef.prototype.detectChanges = function () { };\n\t    /**\n\t     * Checks the change detector and its children, and throws if any changes are detected.\n\t     *\n\t     * This is used in development mode to verify that running change detection doesn't introduce\n\t     * other changes.\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    ChangeDetectorRef.prototype.checkNoChanges = function () { };\n\t    /**\n\t     * Reattach the change detector to the change detector tree.\n\t     *\n\t     * This also marks OnPush ancestors as to be checked. This reattached change detector will be\n\t     * checked during the next change detection run.\n\t     *\n\t     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/aUhZha?p=preview))\n\t     *\n\t     * The following example creates a component displaying `live` data. The component will detach\n\t     * its change detector from the main change detector tree when the component's live property\n\t     * is set to false.\n\t     *\n\t     * ```typescript\n\t     * class DataProvider {\n\t     *   data = 1;\n\t     *\n\t     *   constructor() {\n\t     *     setInterval(() => {\n\t     *       this.data = this.data * 2;\n\t     *     }, 500);\n\t     *   }\n\t     * }\n\t     *\n\t     * \\@Component({\n\t     *   selector: 'live-data',\n\t     *   inputs: ['live'],\n\t     *   template: 'Data: {{dataProvider.data}}'\n\t     * })\n\t     * class LiveData {\n\t     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n\t     *\n\t     *   set live(value) {\n\t     *     if (value) {\n\t     *       this.ref.reattach();\n\t     *     } else {\n\t     *       this.ref.detach();\n\t     *     }\n\t     *   }\n\t     * }\n\t     *\n\t     * \\@Component({\n\t     *   selector: 'app',\n\t     *   providers: [DataProvider],\n\t     *   template: `\n\t     *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n\t     *     <live-data [live]=\"live\"><live-data>\n\t     *   `,\n\t     * })\n\t     * class App {\n\t     *   live = true;\n\t     * }\n\t     * ```\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    ChangeDetectorRef.prototype.reattach = function () { };\n\t    return ChangeDetectorRef;\n\t}());\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * \\@stable\n\t * @abstract\n\t */\n\tvar ViewRef = (function (_super) {\n\t    __extends(ViewRef, _super);\n\t    function ViewRef() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    /**\n\t     * Destroys the view and all of the data structures associated with it.\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    ViewRef.prototype.destroy = function () { };\n\t    /**\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    ViewRef.prototype.destroyed = function () { };\n\t    /**\n\t     * @abstract\n\t     * @param {?} callback\n\t     * @return {?}\n\t     */\n\t    ViewRef.prototype.onDestroy = function (callback) { };\n\t    return ViewRef;\n\t}(ChangeDetectorRef));\n\t/**\n\t * Represents an Angular View.\n\t *\n\t * <!-- TODO: move the next two paragraphs to the dev guide -->\n\t * A View is a fundamental building block of the application UI. It is the smallest grouping of\n\t * Elements which are created and destroyed together.\n\t *\n\t * Properties of elements in a View can change, but the structure (number and order) of elements in\n\t * a View cannot. Changing the structure of Elements can only be done by inserting, moving or\n\t * removing nested Views via a {\\@link ViewContainerRef}. Each View can contain many View Containers.\n\t * <!-- /TODO -->\n\t *\n\t * ### Example\n\t *\n\t * Given this template...\n\t *\n\t * ```\n\t * Count: {{items.length}}\n\t * <ul>\n\t *   <li *ngFor=\"let  item of items\">{{item}}</li>\n\t * </ul>\n\t * ```\n\t *\n\t * We have two {\\@link TemplateRef}s:\n\t *\n\t * Outer {\\@link TemplateRef}:\n\t * ```\n\t * Count: {{items.length}}\n\t * <ul>\n\t *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n\t * </ul>\n\t * ```\n\t *\n\t * Inner {\\@link TemplateRef}:\n\t * ```\n\t *   <li>{{item}}</li>\n\t * ```\n\t *\n\t * Notice that the original template is broken down into two separate {\\@link TemplateRef}s.\n\t *\n\t * The outer/inner {\\@link TemplateRef}s are then assembled into views like so:\n\t *\n\t * ```\n\t * <!-- ViewRef: outer-0 -->\n\t * Count: 2\n\t * <ul>\n\t *   <ng-template view-container-ref></ng-template>\n\t *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n\t *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n\t * </ul>\n\t * <!-- /ViewRef: outer-0 -->\n\t * ```\n\t * \\@experimental\n\t * @abstract\n\t */\n\tvar EmbeddedViewRef = (function (_super) {\n\t    __extends(EmbeddedViewRef, _super);\n\t    function EmbeddedViewRef() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    /**\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    EmbeddedViewRef.prototype.context = function () { };\n\t    /**\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    EmbeddedViewRef.prototype.rootNodes = function () { };\n\t    return EmbeddedViewRef;\n\t}(ViewRef));\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t// Public API for compiler\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\tvar EventListener = (function () {\n\t    /**\n\t     * @param {?} name\n\t     * @param {?} callback\n\t     */\n\t    function EventListener(name, callback) {\n\t        this.name = name;\n\t        this.callback = callback;\n\t    }\n\t    return EventListener;\n\t}());\n\t/**\n\t * \\@experimental All debugging apis are currently experimental.\n\t */\n\tvar DebugNode = (function () {\n\t    /**\n\t     * @param {?} nativeNode\n\t     * @param {?} parent\n\t     * @param {?} _debugContext\n\t     */\n\t    function DebugNode(nativeNode, parent, _debugContext) {\n\t        this._debugContext = _debugContext;\n\t        this.nativeNode = nativeNode;\n\t        if (parent && parent instanceof DebugElement) {\n\t            parent.addChild(this);\n\t        }\n\t        else {\n\t            this.parent = null;\n\t        }\n\t        this.listeners = [];\n\t    }\n\t    Object.defineProperty(DebugNode.prototype, \"injector\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this._debugContext.injector; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(DebugNode.prototype, \"componentInstance\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this._debugContext.component; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(DebugNode.prototype, \"context\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this._debugContext.context; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(DebugNode.prototype, \"references\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this._debugContext.references; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(DebugNode.prototype, \"providerTokens\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this._debugContext.providerTokens; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(DebugNode.prototype, \"source\", {\n\t        /**\n\t         * @deprecated since v4\n\t         * @return {?}\n\t         */\n\t        get: function () { return 'Deprecated since v4'; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    return DebugNode;\n\t}());\n\t/**\n\t * \\@experimental All debugging apis are currently experimental.\n\t */\n\tvar DebugElement = (function (_super) {\n\t    __extends(DebugElement, _super);\n\t    /**\n\t     * @param {?} nativeNode\n\t     * @param {?} parent\n\t     * @param {?} _debugContext\n\t     */\n\t    function DebugElement(nativeNode, parent, _debugContext) {\n\t        var _this = _super.call(this, nativeNode, parent, _debugContext) || this;\n\t        _this.properties = {};\n\t        _this.attributes = {};\n\t        _this.classes = {};\n\t        _this.styles = {};\n\t        _this.childNodes = [];\n\t        _this.nativeElement = nativeNode;\n\t        return _this;\n\t    }\n\t    /**\n\t     * @param {?} child\n\t     * @return {?}\n\t     */\n\t    DebugElement.prototype.addChild = function (child) {\n\t        if (child) {\n\t            this.childNodes.push(child);\n\t            child.parent = this;\n\t        }\n\t    };\n\t    /**\n\t     * @param {?} child\n\t     * @return {?}\n\t     */\n\t    DebugElement.prototype.removeChild = function (child) {\n\t        var /** @type {?} */ childIndex = this.childNodes.indexOf(child);\n\t        if (childIndex !== -1) {\n\t            child.parent = null;\n\t            this.childNodes.splice(childIndex, 1);\n\t        }\n\t    };\n\t    /**\n\t     * @param {?} child\n\t     * @param {?} newChildren\n\t     * @return {?}\n\t     */\n\t    DebugElement.prototype.insertChildrenAfter = function (child, newChildren) {\n\t        var _this = this;\n\t        var /** @type {?} */ siblingIndex = this.childNodes.indexOf(child);\n\t        if (siblingIndex !== -1) {\n\t            (_a = this.childNodes).splice.apply(_a, [siblingIndex + 1, 0].concat(newChildren));\n\t            newChildren.forEach(function (c) {\n\t                if (c.parent) {\n\t                    c.parent.removeChild(c);\n\t                }\n\t                c.parent = _this;\n\t            });\n\t        }\n\t        var _a;\n\t    };\n\t    /**\n\t     * @param {?} refChild\n\t     * @param {?} newChild\n\t     * @return {?}\n\t     */\n\t    DebugElement.prototype.insertBefore = function (refChild, newChild) {\n\t        var /** @type {?} */ refIndex = this.childNodes.indexOf(refChild);\n\t        if (refIndex === -1) {\n\t            this.addChild(newChild);\n\t        }\n\t        else {\n\t            if (newChild.parent) {\n\t                newChild.parent.removeChild(newChild);\n\t            }\n\t            newChild.parent = this;\n\t            this.childNodes.splice(refIndex, 0, newChild);\n\t        }\n\t    };\n\t    /**\n\t     * @param {?} predicate\n\t     * @return {?}\n\t     */\n\t    DebugElement.prototype.query = function (predicate) {\n\t        var /** @type {?} */ results = this.queryAll(predicate);\n\t        return results[0] || null;\n\t    };\n\t    /**\n\t     * @param {?} predicate\n\t     * @return {?}\n\t     */\n\t    DebugElement.prototype.queryAll = function (predicate) {\n\t        var /** @type {?} */ matches = [];\n\t        _queryElementChildren(this, predicate, matches);\n\t        return matches;\n\t    };\n\t    /**\n\t     * @param {?} predicate\n\t     * @return {?}\n\t     */\n\t    DebugElement.prototype.queryAllNodes = function (predicate) {\n\t        var /** @type {?} */ matches = [];\n\t        _queryNodeChildren(this, predicate, matches);\n\t        return matches;\n\t    };\n\t    Object.defineProperty(DebugElement.prototype, \"children\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () {\n\t            return (this.childNodes.filter(function (node) { return node instanceof DebugElement; }));\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    /**\n\t     * @param {?} eventName\n\t     * @param {?} eventObj\n\t     * @return {?}\n\t     */\n\t    DebugElement.prototype.triggerEventHandler = function (eventName, eventObj) {\n\t        this.listeners.forEach(function (listener) {\n\t            if (listener.name == eventName) {\n\t                listener.callback(eventObj);\n\t            }\n\t        });\n\t    };\n\t    return DebugElement;\n\t}(DebugNode));\n\t/**\n\t * \\@experimental\n\t * @param {?} debugEls\n\t * @return {?}\n\t */\n\tfunction asNativeElements(debugEls) {\n\t    return debugEls.map(function (el) { return el.nativeElement; });\n\t}\n\t/**\n\t * @param {?} element\n\t * @param {?} predicate\n\t * @param {?} matches\n\t * @return {?}\n\t */\n\tfunction _queryElementChildren(element, predicate, matches) {\n\t    element.childNodes.forEach(function (node) {\n\t        if (node instanceof DebugElement) {\n\t            if (predicate(node)) {\n\t                matches.push(node);\n\t            }\n\t            _queryElementChildren(node, predicate, matches);\n\t        }\n\t    });\n\t}\n\t/**\n\t * @param {?} parentNode\n\t * @param {?} predicate\n\t * @param {?} matches\n\t * @return {?}\n\t */\n\tfunction _queryNodeChildren(parentNode, predicate, matches) {\n\t    if (parentNode instanceof DebugElement) {\n\t        parentNode.childNodes.forEach(function (node) {\n\t            if (predicate(node)) {\n\t                matches.push(node);\n\t            }\n\t            if (node instanceof DebugElement) {\n\t                _queryNodeChildren(node, predicate, matches);\n\t            }\n\t        });\n\t    }\n\t}\n\t// Need to keep the nodes in a global Map so that multiple angular apps are supported.\n\tvar _nativeNodeToDebugNode = new Map();\n\t/**\n\t * \\@experimental\n\t * @param {?} nativeNode\n\t * @return {?}\n\t */\n\tfunction getDebugNode(nativeNode) {\n\t    return _nativeNodeToDebugNode.get(nativeNode) || null;\n\t}\n\t/**\n\t * @return {?}\n\t */\n\t/**\n\t * @param {?} node\n\t * @return {?}\n\t */\n\tfunction indexDebugNode(node) {\n\t    _nativeNodeToDebugNode.set(node.nativeNode, node);\n\t}\n\t/**\n\t * @param {?} node\n\t * @return {?}\n\t */\n\tfunction removeDebugNodeFromIndex(node) {\n\t    _nativeNodeToDebugNode.delete(node.nativeNode);\n\t}\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * @param {?} a\n\t * @param {?} b\n\t * @return {?}\n\t */\n\tfunction devModeEqual(a, b) {\n\t    var /** @type {?} */ isListLikeIterableA = isListLikeIterable(a);\n\t    var /** @type {?} */ isListLikeIterableB = isListLikeIterable(b);\n\t    if (isListLikeIterableA && isListLikeIterableB) {\n\t        return areIterablesEqual(a, b, devModeEqual);\n\t    }\n\t    else {\n\t        var /** @type {?} */ isAObject = a && (typeof a === 'object' || typeof a === 'function');\n\t        var /** @type {?} */ isBObject = b && (typeof b === 'object' || typeof b === 'function');\n\t        if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n\t            return true;\n\t        }\n\t        else {\n\t            return looseIdentical(a, b);\n\t        }\n\t    }\n\t}\n\t/**\n\t * Indicates that the result of a {\\@link Pipe} transformation has changed even though the\n\t * reference\n\t * has not changed.\n\t *\n\t * The wrapped value will be unwrapped by change detection, and the unwrapped value will be stored.\n\t *\n\t * Example:\n\t *\n\t * ```\n\t * if (this._latestValue === this._latestReturnedValue) {\n\t *    return this._latestReturnedValue;\n\t *  } else {\n\t *    this._latestReturnedValue = this._latestValue;\n\t *    return WrappedValue.wrap(this._latestValue); // this will force update\n\t *  }\n\t * ```\n\t * \\@stable\n\t */\n\tvar WrappedValue = (function () {\n\t    /**\n\t     * @param {?} wrapped\n\t     */\n\t    function WrappedValue(wrapped) {\n\t        this.wrapped = wrapped;\n\t    }\n\t    /**\n\t     * @param {?} value\n\t     * @return {?}\n\t     */\n\t    WrappedValue.wrap = function (value) { return new WrappedValue(value); };\n\t    return WrappedValue;\n\t}());\n\t/**\n\t * Helper class for unwrapping WrappedValue s\n\t */\n\tvar ValueUnwrapper = (function () {\n\t    function ValueUnwrapper() {\n\t        this.hasWrappedValue = false;\n\t    }\n\t    /**\n\t     * @param {?} value\n\t     * @return {?}\n\t     */\n\t    ValueUnwrapper.prototype.unwrap = function (value) {\n\t        if (value instanceof WrappedValue) {\n\t            this.hasWrappedValue = true;\n\t            return value.wrapped;\n\t        }\n\t        return value;\n\t    };\n\t    /**\n\t     * @return {?}\n\t     */\n\t    ValueUnwrapper.prototype.reset = function () { this.hasWrappedValue = false; };\n\t    return ValueUnwrapper;\n\t}());\n\t/**\n\t * Represents a basic change from a previous to a new value.\n\t * \\@stable\n\t */\n\tvar SimpleChange = (function () {\n\t    /**\n\t     * @param {?} previousValue\n\t     * @param {?} currentValue\n\t     * @param {?} firstChange\n\t     */\n\t    function SimpleChange(previousValue, currentValue, firstChange) {\n\t        this.previousValue = previousValue;\n\t        this.currentValue = currentValue;\n\t        this.firstChange = firstChange;\n\t    }\n\t    /**\n\t     * Check whether the new value is the first value assigned.\n\t     * @return {?}\n\t     */\n\t    SimpleChange.prototype.isFirstChange = function () { return this.firstChange; };\n\t    return SimpleChange;\n\t}());\n\t/**\n\t * @param {?} obj\n\t * @return {?}\n\t */\n\tfunction isListLikeIterable(obj) {\n\t    if (!isJsObject(obj))\n\t        return false;\n\t    return Array.isArray(obj) ||\n\t        (!(obj instanceof Map) &&\n\t            getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop\n\t}\n\t/**\n\t * @param {?} a\n\t * @param {?} b\n\t * @param {?} comparator\n\t * @return {?}\n\t */\n\tfunction areIterablesEqual(a, b, comparator) {\n\t    var /** @type {?} */ iterator1 = a[getSymbolIterator()]();\n\t    var /** @type {?} */ iterator2 = b[getSymbolIterator()]();\n\t    while (true) {\n\t        var /** @type {?} */ item1 = iterator1.next();\n\t        var /** @type {?} */ item2 = iterator2.next();\n\t        if (item1.done && item2.done)\n\t            return true;\n\t        if (item1.done || item2.done)\n\t            return false;\n\t        if (!comparator(item1.value, item2.value))\n\t            return false;\n\t    }\n\t}\n\t/**\n\t * @param {?} obj\n\t * @param {?} fn\n\t * @return {?}\n\t */\n\tfunction iterateListLike(obj, fn) {\n\t    if (Array.isArray(obj)) {\n\t        for (var /** @type {?} */ i = 0; i < obj.length; i++) {\n\t            fn(obj[i]);\n\t        }\n\t    }\n\t    else {\n\t        var /** @type {?} */ iterator = obj[getSymbolIterator()]();\n\t        var /** @type {?} */ item = void 0;\n\t        while (!((item = iterator.next()).done)) {\n\t            fn(item.value);\n\t        }\n\t    }\n\t}\n\t/**\n\t * @param {?} o\n\t * @return {?}\n\t */\n\tfunction isJsObject(o) {\n\t    return o !== null && (typeof o === 'function' || typeof o === 'object');\n\t}\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\tvar DefaultIterableDifferFactory = (function () {\n\t    function DefaultIterableDifferFactory() {\n\t    }\n\t    /**\n\t     * @param {?} obj\n\t     * @return {?}\n\t     */\n\t    DefaultIterableDifferFactory.prototype.supports = function (obj) { return isListLikeIterable(obj); };\n\t    /**\n\t     * @deprecated v4.0.0 - ChangeDetectorRef is not used and is no longer a parameter\n\t     * @template V\n\t     * @param {?=} cdRefOrTrackBy\n\t     * @param {?=} trackByFn\n\t     * @return {?}\n\t     */\n\t    DefaultIterableDifferFactory.prototype.create = function (cdRefOrTrackBy, trackByFn) {\n\t        return new DefaultIterableDiffer(trackByFn || (cdRefOrTrackBy));\n\t    };\n\t    return DefaultIterableDifferFactory;\n\t}());\n\tvar trackByIdentity = function (index, item) { return item; };\n\t/**\n\t * @deprecated v4.0.0 - Should not be part of public API.\n\t */\n\tvar DefaultIterableDiffer = (function () {\n\t    /**\n\t     * @param {?=} trackByFn\n\t     */\n\t    function DefaultIterableDiffer(trackByFn) {\n\t        this._length = 0;\n\t        this._collection = null;\n\t        this._linkedRecords = null;\n\t        this._unlinkedRecords = null;\n\t        this._previousItHead = null;\n\t        this._itHead = null;\n\t        this._itTail = null;\n\t        this._additionsHead = null;\n\t        this._additionsTail = null;\n\t        this._movesHead = null;\n\t        this._movesTail = null;\n\t        this._removalsHead = null;\n\t        this._removalsTail = null;\n\t        this._identityChangesHead = null;\n\t        this._identityChangesTail = null;\n\t        this._trackByFn = trackByFn || trackByIdentity;\n\t    }\n\t    Object.defineProperty(DefaultIterableDiffer.prototype, \"collection\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this._collection; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(DefaultIterableDiffer.prototype, \"length\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this._length; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    /**\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    DefaultIterableDiffer.prototype.forEachItem = function (fn) {\n\t        var /** @type {?} */ record;\n\t        for (record = this._itHead; record !== null; record = record._next) {\n\t            fn(record);\n\t        }\n\t    };\n\t    /**\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    DefaultIterableDiffer.prototype.forEachOperation = function (fn) {\n\t        var /** @type {?} */ nextIt = this._itHead;\n\t        var /** @type {?} */ nextRemove = this._removalsHead;\n\t        var /** @type {?} */ addRemoveOffset = 0;\n\t        var /** @type {?} */ moveOffsets = null;\n\t        while (nextIt || nextRemove) {\n\t            // Figure out which is the next record to process\n\t            // Order: remove, add, move\n\t            var /** @type {?} */ record = !nextRemove ||\n\t                nextIt && ((nextIt.currentIndex)) <\n\t                    getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? ((nextIt)) :\n\t                nextRemove;\n\t            var /** @type {?} */ adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\n\t            var /** @type {?} */ currentIndex = record.currentIndex;\n\t            // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\n\t            if (record === nextRemove) {\n\t                addRemoveOffset--;\n\t                nextRemove = nextRemove._nextRemoved;\n\t            }\n\t            else {\n\t                nextIt = ((nextIt))._next;\n\t                if (record.previousIndex == null) {\n\t                    addRemoveOffset++;\n\t                }\n\t                else {\n\t                    // INVARIANT:  currentIndex < previousIndex\n\t                    if (!moveOffsets)\n\t                        moveOffsets = [];\n\t                    var /** @type {?} */ localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\n\t                    var /** @type {?} */ localCurrentIndex = ((currentIndex)) - addRemoveOffset;\n\t                    if (localMovePreviousIndex != localCurrentIndex) {\n\t                        for (var /** @type {?} */ i = 0; i < localMovePreviousIndex; i++) {\n\t                            var /** @type {?} */ offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);\n\t                            var /** @type {?} */ index = offset + i;\n\t                            if (localCurrentIndex <= index && index < localMovePreviousIndex) {\n\t                                moveOffsets[i] = offset + 1;\n\t                            }\n\t                        }\n\t                        var /** @type {?} */ previousIndex = record.previousIndex;\n\t                        moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\n\t                    }\n\t                }\n\t            }\n\t            if (adjPreviousIndex !== currentIndex) {\n\t                fn(record, adjPreviousIndex, currentIndex);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    DefaultIterableDiffer.prototype.forEachPreviousItem = function (fn) {\n\t        var /** @type {?} */ record;\n\t        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n\t            fn(record);\n\t        }\n\t    };\n\t    /**\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    DefaultIterableDiffer.prototype.forEachAddedItem = function (fn) {\n\t        var /** @type {?} */ record;\n\t        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n\t            fn(record);\n\t        }\n\t    };\n\t    /**\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    DefaultIterableDiffer.prototype.forEachMovedItem = function (fn) {\n\t        var /** @type {?} */ record;\n\t        for (record = this._movesHead; record !== null; record = record._nextMoved) {\n\t            fn(record);\n\t        }\n\t    };\n\t    /**\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    DefaultIterableDiffer.prototype.forEachRemovedItem = function (fn) {\n\t        var /** @type {?} */ record;\n\t        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n\t            fn(record);\n\t        }\n\t    };\n\t    /**\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    DefaultIterableDiffer.prototype.forEachIdentityChange = function (fn) {\n\t        var /** @type {?} */ record;\n\t        for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n\t            fn(record);\n\t        }\n\t    };\n\t    /**\n\t     * @param {?} collection\n\t     * @return {?}\n\t     */\n\t    DefaultIterableDiffer.prototype.diff = function (collection) {\n\t        if (collection == null)\n\t            collection = [];\n\t        if (!isListLikeIterable(collection)) {\n\t            throw new Error(\"Error trying to diff '\" + stringify(collection) + \"'. Only arrays and iterables are allowed\");\n\t        }\n\t        if (this.check(collection)) {\n\t            return this;\n\t        }\n\t        else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t     * @return {?}\n\t     */\n\t    DefaultIterableDiffer.prototype.onDestroy = function () { };\n\t    /**\n\t     * @param {?} collection\n\t     * @return {?}\n\t     */\n\t    DefaultIterableDiffer.prototype.check = function (collection) {\n\t        var _this = this;\n\t        this._reset();\n\t        var /** @type {?} */ record = this._itHead;\n\t        var /** @type {?} */ mayBeDirty = false;\n\t        var /** @type {?} */ index;\n\t        var /** @type {?} */ item;\n\t        var /** @type {?} */ itemTrackBy;\n\t        if (Array.isArray(collection)) {\n\t            this._length = collection.length;\n\t            for (var /** @type {?} */ index_1 = 0; index_1 < this._length; index_1++) {\n\t                item = collection[index_1];\n\t                itemTrackBy = this._trackByFn(index_1, item);\n\t                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n\t                    record = this._mismatch(record, item, itemTrackBy, index_1);\n\t                    mayBeDirty = true;\n\t                }\n\t                else {\n\t                    if (mayBeDirty) {\n\t                        // TODO(misko): can we limit this to duplicates only?\n\t                        record = this._verifyReinsertion(record, item, itemTrackBy, index_1);\n\t                    }\n\t                    if (!looseIdentical(record.item, item))\n\t                        this._addIdentityChange(record, item);\n\t                }\n\t                record = record._next;\n\t            }\n\t        }\n\t        else {\n\t            index = 0;\n\t            iterateListLike(collection, function (item) {\n\t                itemTrackBy = _this._trackByFn(index, item);\n\t                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n\t                    record = _this._mismatch(record, item, itemTrackBy, index);\n\t                    mayBeDirty = true;\n\t                }\n\t                else {\n\t                    if (mayBeDirty) {\n\t                        // TODO(misko): can we limit this to duplicates only?\n\t                        record = _this._verifyReinsertion(record, item, itemTrackBy, index);\n\t                    }\n\t                    if (!looseIdentical(record.item, item))\n\t                        _this._addIdentityChange(record, item);\n\t                }\n\t                record = record._next;\n\t                index++;\n\t            });\n\t            this._length = index;\n\t        }\n\t        this._truncate(record);\n\t        this._collection = collection;\n\t        return this.isDirty;\n\t    };\n\t    Object.defineProperty(DefaultIterableDiffer.prototype, \"isDirty\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () {\n\t            return this._additionsHead !== null || this._movesHead !== null ||\n\t                this._removalsHead !== null || this._identityChangesHead !== null;\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    /**\n\t     * Reset the state of the change objects to show no changes. This means set previousKey to\n\t     * currentKey, and clear all of the queues (additions, moves, removals).\n\t     * Set the previousIndexes of moved and added items to their currentIndexes\n\t     * Reset the list of additions, moves and removals\n\t     *\n\t     * \\@internal\n\t     * @return {?}\n\t     */\n\t    DefaultIterableDiffer.prototype._reset = function () {\n\t        if (this.isDirty) {\n\t            var /** @type {?} */ record = void 0;\n\t            var /** @type {?} */ nextRecord = void 0;\n\t            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n\t                record._nextPrevious = record._next;\n\t            }\n\t            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n\t                record.previousIndex = record.currentIndex;\n\t            }\n\t            this._additionsHead = this._additionsTail = null;\n\t            for (record = this._movesHead; record !== null; record = nextRecord) {\n\t                record.previousIndex = record.currentIndex;\n\t                nextRecord = record._nextMoved;\n\t            }\n\t            this._movesHead = this._movesTail = null;\n\t            this._removalsHead = this._removalsTail = null;\n\t            this._identityChangesHead = this._identityChangesTail = null;\n\t            // todo(vicb) when assert gets supported\n\t            // assert(!this.isDirty);\n\t        }\n\t    };\n\t    /**\n\t     * This is the core function which handles differences between collections.\n\t     *\n\t     * - `record` is the record which we saw at this position last time. If null then it is a new\n\t     *   item.\n\t     * - `item` is the current item in the collection\n\t     * - `index` is the position of the item in the collection\n\t     *\n\t     * \\@internal\n\t     * @param {?} record\n\t     * @param {?} item\n\t     * @param {?} itemTrackBy\n\t     * @param {?} index\n\t     * @return {?}\n\t     */\n\t    DefaultIterableDiffer.prototype._mismatch = function (record, item, itemTrackBy, index) {\n\t        // The previous record after which we will append the current one.\n\t        var /** @type {?} */ previousRecord;\n\t        if (record === null) {\n\t            previousRecord = this._itTail;\n\t        }\n\t        else {\n\t            previousRecord = record._prev;\n\t            // Remove the record from the collection since we know it does not match the item.\n\t            this._remove(record);\n\t        }\n\t        // Attempt to see if we have seen the item before.\n\t        record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n\t        if (record !== null) {\n\t            // We have seen this before, we need to move it forward in the collection.\n\t            // But first we need to check if identity changed, so we can update in view if necessary\n\t            if (!looseIdentical(record.item, item))\n\t                this._addIdentityChange(record, item);\n\t            this._moveAfter(record, previousRecord, index);\n\t        }\n\t        else {\n\t            // Never seen it, check evicted list.\n\t            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n\t            if (record !== null) {\n\t                // It is an item which we have evicted earlier: reinsert it back into the list.\n\t                // But first we need to check if identity changed, so we can update in view if necessary\n\t                if (!looseIdentical(record.item, item))\n\t                    this._addIdentityChange(record, item);\n\t                this._reinsertAfter(record, previousRecord, index);\n\t            }\n\t            else {\n\t                // It is a new item: add it.\n\t                record =\n\t                    this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);\n\t            }\n\t        }\n\t        return record;\n\t    };\n\t    /**\n\t     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n\t     *\n\t     * Use case: `[a, a]` => `[b, a, a]`\n\t     *\n\t     * If we did not have this check then the insertion of `b` would:\n\t     *   1) evict first `a`\n\t     *   2) insert `b` at `0` index.\n\t     *   3) leave `a` at index `1` as is. <-- this is wrong!\n\t     *   3) reinsert `a` at index 2. <-- this is wrong!\n\t     *\n\t     * The correct behavior is:\n\t     *   1) evict first `a`\n\t     *   2) insert `b` at `0` index.\n\t     *   3) reinsert `a` at index 1.\n\t     *   3) move `a` at from `1` to `2`.\n\t     *\n\t     *\n\t     * Double check that we have not evicted a duplicate item. We need to check if the item type may\n\t     * have already been removed:\n\t     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n\t     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n\t     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n\t     * at the end.\n\t     *\n\t     * \\@internal\n\t     * @param {?} record\n\t     * @param {?} item\n\t     * @param {?} itemTrackBy\n\t     * @param {?} index\n\t     * @return {?}\n\t     */\n\t    DefaultIterableDiffer.prototype._verifyReinsertion = function (record, item, itemTrackBy, index) {\n\t        var /** @type {?} */ reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n\t        if (reinsertRecord !== null) {\n\t            record = this._reinsertAfter(reinsertRecord, /** @type {?} */ ((record._prev)), index);\n\t        }\n\t        else if (record.currentIndex != index) {\n\t            record.currentIndex = index;\n\t            this._addToMoves(record, index);\n\t        }\n\t        return record;\n\t    };\n\t    /**\n\t     * Get rid of any excess {\\@link IterableChangeRecord_}s from the previous collection\n\t     *\n\t     * - `record` The first excess {\\@link IterableChangeRecord_}.\n\t     *\n\t     * \\@internal\n\t     * @param {?} record\n\t     * @return {?}\n\t     */\n\t    DefaultIterableDiffer.prototype._truncate = function (record) {\n\t        // Anything after that needs to be removed;\n\t        while (record !== null) {\n\t            var /** @type {?} */ nextRecord = record._next;\n\t            this._addToRemovals(this._unlink(record));\n\t            record = nextRecord;\n\t        }\n\t        if (this._unlinkedRecords !== null) {\n\t            this._unlinkedRecords.clear();\n\t        }\n\t        if (this._additionsTail !== null) {\n\t            this._additionsTail._nextAdded = null;\n\t        }\n\t        if (this._movesTail !== null) {\n\t            this._movesTail._nextMoved = null;\n\t        }\n\t        if (this._itTail !== null) {\n\t            this._itTail._next = null;\n\t        }\n\t        if (this._removalsTail !== null) {\n\t            this._removalsTail._nextRemoved = null;\n\t        }\n\t        if (this._identityChangesTail !== null) {\n\t            this._identityChangesTail._nextIdentityChange = null;\n\t        }\n\t    };\n\t    /**\n\t     * \\@internal\n\t     * @param {?} record\n\t     * @param {?} prevRecord\n\t     * @param {?} index\n\t     * @return {?}\n\t     */\n\t    DefaultIterableDiffer.prototype._reinsertAfter = function (record, prevRecord, index) {\n\t        if (this._unlinkedRecords !== null) {\n\t            this._unlinkedRecords.remove(record);\n\t        }\n\t        var /** @type {?} */ prev = record._prevRemoved;\n\t        var /** @type {?} */ next = record._nextRemoved;\n\t        if (prev === null) {\n\t            this._removalsHead = next;\n\t        }\n\t        else {\n\t            prev._nextRemoved = next;\n\t        }\n\t        if (next === null) {\n\t            this._removalsTail = prev;\n\t        }\n\t        else {\n\t            next._prevRemoved = prev;\n\t        }\n\t        this._insertAfter(record, prevRecord, index);\n\t        this._addToMoves(record, index);\n\t        return record;\n\t    };\n\t    /**\n\t     * \\@internal\n\t     * @param {?} record\n\t     * @param {?} prevRecord\n\t     * @param {?} index\n\t     * @return {?}\n\t     */\n\t    DefaultIterableDiffer.prototype._moveAfter = function (record, prevRecord, index) {\n\t        this._unlink(record);\n\t        this._insertAfter(record, prevRecord, index);\n\t        this._addToMoves(record, index);\n\t        return record;\n\t    };\n\t    /**\n\t     * \\@internal\n\t     * @param {?} record\n\t     * @param {?} prevRecord\n\t     * @param {?} index\n\t     * @return {?}\n\t     */\n\t    DefaultIterableDiffer.prototype._addAfter = function (record, prevRecord, index) {\n\t        this._insertAfter(record, prevRecord, index);\n\t        if (this._additionsTail === null) {\n\t            // todo(vicb)\n\t            // assert(this._additionsHead === null);\n\t            this._additionsTail = this._additionsHead = record;\n\t        }\n\t        else {\n\t            // todo(vicb)\n\t            // assert(_additionsTail._nextAdded === null);\n\t            // assert(record._nextAdded === null);\n\t            this._additionsTail = this._additionsTail._nextAdded = record;\n\t        }\n\t        return record;\n\t    };\n\t    /**\n\t     * \\@internal\n\t     * @param {?} record\n\t     * @param {?} prevRecord\n\t     * @param {?} index\n\t     * @return {?}\n\t     */\n\t    DefaultIterableDiffer.prototype._insertAfter = function (record, prevRecord, index) {\n\t        // todo(vicb)\n\t        // assert(record != prevRecord);\n\t        // assert(record._next === null);\n\t        // assert(record._prev === null);\n\t        var /** @type {?} */ next = prevRecord === null ? this._itHead : prevRecord._next;\n\t        // todo(vicb)\n\t        // assert(next != record);\n\t        // assert(prevRecord != record);\n\t        record._next = next;\n\t        record._prev = prevRecord;\n\t        if (next === null) {\n\t            this._itTail = record;\n\t        }\n\t        else {\n\t            next._prev = record;\n\t        }\n\t        if (prevRecord === null) {\n\t            this._itHead = record;\n\t        }\n\t        else {\n\t            prevRecord._next = record;\n\t        }\n\t        if (this._linkedRecords === null) {\n\t            this._linkedRecords = new _DuplicateMap();\n\t        }\n\t        this._linkedRecords.put(record);\n\t        record.currentIndex = index;\n\t        return record;\n\t    };\n\t    /**\n\t     * \\@internal\n\t     * @param {?} record\n\t     * @return {?}\n\t     */\n\t    DefaultIterableDiffer.prototype._remove = function (record) {\n\t        return this._addToRemovals(this._unlink(record));\n\t    };\n\t    /**\n\t     * \\@internal\n\t     * @param {?} record\n\t     * @return {?}\n\t     */\n\t    DefaultIterableDiffer.prototype._unlink = function (record) {\n\t        if (this._linkedRecords !== null) {\n\t            this._linkedRecords.remove(record);\n\t        }\n\t        var /** @type {?} */ prev = record._prev;\n\t        var /** @type {?} */ next = record._next;\n\t        // todo(vicb)\n\t        // assert((record._prev = null) === null);\n\t        // assert((record._next = null) === null);\n\t        if (prev === null) {\n\t            this._itHead = next;\n\t        }\n\t        else {\n\t            prev._next = next;\n\t        }\n\t        if (next === null) {\n\t            this._itTail = prev;\n\t        }\n\t        else {\n\t            next._prev = prev;\n\t        }\n\t        return record;\n\t    };\n\t    /**\n\t     * \\@internal\n\t     * @param {?} record\n\t     * @param {?} toIndex\n\t     * @return {?}\n\t     */\n\t    DefaultIterableDiffer.prototype._addToMoves = function (record, toIndex) {\n\t        // todo(vicb)\n\t        // assert(record._nextMoved === null);\n\t        if (record.previousIndex === toIndex) {\n\t            return record;\n\t        }\n\t        if (this._movesTail === null) {\n\t            // todo(vicb)\n\t            // assert(_movesHead === null);\n\t            this._movesTail = this._movesHead = record;\n\t        }\n\t        else {\n\t            // todo(vicb)\n\t            // assert(_movesTail._nextMoved === null);\n\t            this._movesTail = this._movesTail._nextMoved = record;\n\t        }\n\t        return record;\n\t    };\n\t    /**\n\t     * @param {?} record\n\t     * @return {?}\n\t     */\n\t    DefaultIterableDiffer.prototype._addToRemovals = function (record) {\n\t        if (this._unlinkedRecords === null) {\n\t            this._unlinkedRecords = new _DuplicateMap();\n\t        }\n\t        this._unlinkedRecords.put(record);\n\t        record.currentIndex = null;\n\t        record._nextRemoved = null;\n\t        if (this._removalsTail === null) {\n\t            // todo(vicb)\n\t            // assert(_removalsHead === null);\n\t            this._removalsTail = this._removalsHead = record;\n\t            record._prevRemoved = null;\n\t        }\n\t        else {\n\t            // todo(vicb)\n\t            // assert(_removalsTail._nextRemoved === null);\n\t            // assert(record._nextRemoved === null);\n\t            record._prevRemoved = this._removalsTail;\n\t            this._removalsTail = this._removalsTail._nextRemoved = record;\n\t        }\n\t        return record;\n\t    };\n\t    /**\n\t     * \\@internal\n\t     * @param {?} record\n\t     * @param {?} item\n\t     * @return {?}\n\t     */\n\t    DefaultIterableDiffer.prototype._addIdentityChange = function (record, item) {\n\t        record.item = item;\n\t        if (this._identityChangesTail === null) {\n\t            this._identityChangesTail = this._identityChangesHead = record;\n\t        }\n\t        else {\n\t            this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n\t        }\n\t        return record;\n\t    };\n\t    /**\n\t     * @return {?}\n\t     */\n\t    DefaultIterableDiffer.prototype.toString = function () {\n\t        var /** @type {?} */ list = [];\n\t        this.forEachItem(function (record) { return list.push(record); });\n\t        var /** @type {?} */ previous = [];\n\t        this.forEachPreviousItem(function (record) { return previous.push(record); });\n\t        var /** @type {?} */ additions = [];\n\t        this.forEachAddedItem(function (record) { return additions.push(record); });\n\t        var /** @type {?} */ moves = [];\n\t        this.forEachMovedItem(function (record) { return moves.push(record); });\n\t        var /** @type {?} */ removals = [];\n\t        this.forEachRemovedItem(function (record) { return removals.push(record); });\n\t        var /** @type {?} */ identityChanges = [];\n\t        this.forEachIdentityChange(function (record) { return identityChanges.push(record); });\n\t        return 'collection: ' + list.join(', ') + '\\n' +\n\t            'previous: ' + previous.join(', ') + '\\n' +\n\t            'additions: ' + additions.join(', ') + '\\n' +\n\t            'moves: ' + moves.join(', ') + '\\n' +\n\t            'removals: ' + removals.join(', ') + '\\n' +\n\t            'identityChanges: ' + identityChanges.join(', ') + '\\n';\n\t    };\n\t    return DefaultIterableDiffer;\n\t}());\n\t/**\n\t * \\@stable\n\t */\n\tvar IterableChangeRecord_ = (function () {\n\t    /**\n\t     * @param {?} item\n\t     * @param {?} trackById\n\t     */\n\t    function IterableChangeRecord_(item, trackById) {\n\t        this.item = item;\n\t        this.trackById = trackById;\n\t        this.currentIndex = null;\n\t        this.previousIndex = null;\n\t        /**\n\t         * \\@internal\n\t         */\n\t        this._nextPrevious = null;\n\t        /**\n\t         * \\@internal\n\t         */\n\t        this._prev = null;\n\t        /**\n\t         * \\@internal\n\t         */\n\t        this._next = null;\n\t        /**\n\t         * \\@internal\n\t         */\n\t        this._prevDup = null;\n\t        /**\n\t         * \\@internal\n\t         */\n\t        this._nextDup = null;\n\t        /**\n\t         * \\@internal\n\t         */\n\t        this._prevRemoved = null;\n\t        /**\n\t         * \\@internal\n\t         */\n\t        this._nextRemoved = null;\n\t        /**\n\t         * \\@internal\n\t         */\n\t        this._nextAdded = null;\n\t        /**\n\t         * \\@internal\n\t         */\n\t        this._nextMoved = null;\n\t        /**\n\t         * \\@internal\n\t         */\n\t        this._nextIdentityChange = null;\n\t    }\n\t    /**\n\t     * @return {?}\n\t     */\n\t    IterableChangeRecord_.prototype.toString = function () {\n\t        return this.previousIndex === this.currentIndex ? stringify(this.item) :\n\t            stringify(this.item) + '[' +\n\t                stringify(this.previousIndex) + '->' + stringify(this.currentIndex) + ']';\n\t    };\n\t    return IterableChangeRecord_;\n\t}());\n\tvar _DuplicateItemRecordList = (function () {\n\t    function _DuplicateItemRecordList() {\n\t        /**\n\t         * \\@internal\n\t         */\n\t        this._head = null;\n\t        /**\n\t         * \\@internal\n\t         */\n\t        this._tail = null;\n\t    }\n\t    /**\n\t     * Append the record to the list of duplicates.\n\t     *\n\t     * Note: by design all records in the list of duplicates hold the same value in record.item.\n\t     * @param {?} record\n\t     * @return {?}\n\t     */\n\t    _DuplicateItemRecordList.prototype.add = function (record) {\n\t        if (this._head === null) {\n\t            this._head = this._tail = record;\n\t            record._nextDup = null;\n\t            record._prevDup = null;\n\t        }\n\t        else {\n\t            ((\n\t            // todo(vicb)\n\t            // assert(record.item ==  _head.item ||\n\t            //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n\t            this._tail))._nextDup = record;\n\t            record._prevDup = this._tail;\n\t            record._nextDup = null;\n\t            this._tail = record;\n\t        }\n\t    };\n\t    /**\n\t     * @param {?} trackById\n\t     * @param {?} atOrAfterIndex\n\t     * @return {?}\n\t     */\n\t    _DuplicateItemRecordList.prototype.get = function (trackById, atOrAfterIndex) {\n\t        var /** @type {?} */ record;\n\t        for (record = this._head; record !== null; record = record._nextDup) {\n\t            if ((atOrAfterIndex === null || atOrAfterIndex <= ((record.currentIndex))) &&\n\t                looseIdentical(record.trackById, trackById)) {\n\t                return record;\n\t            }\n\t        }\n\t        return null;\n\t    };\n\t    /**\n\t     * Remove one {\\@link IterableChangeRecord_} from the list of duplicates.\n\t     *\n\t     * Returns whether the list of duplicates is empty.\n\t     * @param {?} record\n\t     * @return {?}\n\t     */\n\t    _DuplicateItemRecordList.prototype.remove = function (record) {\n\t        // todo(vicb)\n\t        // assert(() {\n\t        //  // verify that the record being removed is in the list.\n\t        //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {\n\t        //    if (identical(cursor, record)) return true;\n\t        //  }\n\t        //  return false;\n\t        //});\n\t        var /** @type {?} */ prev = record._prevDup;\n\t        var /** @type {?} */ next = record._nextDup;\n\t        if (prev === null) {\n\t            this._head = next;\n\t        }\n\t        else {\n\t            prev._nextDup = next;\n\t        }\n\t        if (next === null) {\n\t            this._tail = prev;\n\t        }\n\t        else {\n\t            next._prevDup = prev;\n\t        }\n\t        return this._head === null;\n\t    };\n\t    return _DuplicateItemRecordList;\n\t}());\n\tvar _DuplicateMap = (function () {\n\t    function _DuplicateMap() {\n\t        this.map = new Map();\n\t    }\n\t    /**\n\t     * @param {?} record\n\t     * @return {?}\n\t     */\n\t    _DuplicateMap.prototype.put = function (record) {\n\t        var /** @type {?} */ key = record.trackById;\n\t        var /** @type {?} */ duplicates = this.map.get(key);\n\t        if (!duplicates) {\n\t            duplicates = new _DuplicateItemRecordList();\n\t            this.map.set(key, duplicates);\n\t        }\n\t        duplicates.add(record);\n\t    };\n\t    /**\n\t     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n\t     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n\t     *\n\t     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n\t     * have any more `a`s needs to return the second `a`.\n\t     * @param {?} trackById\n\t     * @param {?} atOrAfterIndex\n\t     * @return {?}\n\t     */\n\t    _DuplicateMap.prototype.get = function (trackById, atOrAfterIndex) {\n\t        var /** @type {?} */ key = trackById;\n\t        var /** @type {?} */ recordList = this.map.get(key);\n\t        return recordList ? recordList.get(trackById, atOrAfterIndex) : null;\n\t    };\n\t    /**\n\t     * Removes a {\\@link IterableChangeRecord_} from the list of duplicates.\n\t     *\n\t     * The list of duplicates also is removed from the map if it gets empty.\n\t     * @param {?} record\n\t     * @return {?}\n\t     */\n\t    _DuplicateMap.prototype.remove = function (record) {\n\t        var /** @type {?} */ key = record.trackById;\n\t        var /** @type {?} */ recordList = ((this.map.get(key)));\n\t        // Remove the list of duplicates when it gets empty\n\t        if (recordList.remove(record)) {\n\t            this.map.delete(key);\n\t        }\n\t        return record;\n\t    };\n\t    Object.defineProperty(_DuplicateMap.prototype, \"isEmpty\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this.map.size === 0; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    /**\n\t     * @return {?}\n\t     */\n\t    _DuplicateMap.prototype.clear = function () { this.map.clear(); };\n\t    /**\n\t     * @return {?}\n\t     */\n\t    _DuplicateMap.prototype.toString = function () { return '_DuplicateMap(' + stringify(this.map) + ')'; };\n\t    return _DuplicateMap;\n\t}());\n\t/**\n\t * @param {?} item\n\t * @param {?} addRemoveOffset\n\t * @param {?} moveOffsets\n\t * @return {?}\n\t */\n\tfunction getPreviousIndex(item, addRemoveOffset, moveOffsets) {\n\t    var /** @type {?} */ previousIndex = item.previousIndex;\n\t    if (previousIndex === null)\n\t        return previousIndex;\n\t    var /** @type {?} */ moveOffset = 0;\n\t    if (moveOffsets && previousIndex < moveOffsets.length) {\n\t        moveOffset = moveOffsets[previousIndex];\n\t    }\n\t    return previousIndex + addRemoveOffset + moveOffset;\n\t}\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\tvar DefaultKeyValueDifferFactory = (function () {\n\t    function DefaultKeyValueDifferFactory() {\n\t    }\n\t    /**\n\t     * @param {?} obj\n\t     * @return {?}\n\t     */\n\t    DefaultKeyValueDifferFactory.prototype.supports = function (obj) { return obj instanceof Map || isJsObject(obj); };\n\t    /**\n\t     * @deprecated v4.0.0 - ChangeDetectorRef is not used and is no longer a parameter\n\t     * @template K, V\n\t     * @param {?=} cd\n\t     * @return {?}\n\t     */\n\t    DefaultKeyValueDifferFactory.prototype.create = function (cd) {\n\t        return new DefaultKeyValueDiffer();\n\t    };\n\t    return DefaultKeyValueDifferFactory;\n\t}());\n\tvar DefaultKeyValueDiffer = (function () {\n\t    function DefaultKeyValueDiffer() {\n\t        this._records = new Map();\n\t        this._mapHead = null;\n\t        this._appendAfter = null;\n\t        this._previousMapHead = null;\n\t        this._changesHead = null;\n\t        this._changesTail = null;\n\t        this._additionsHead = null;\n\t        this._additionsTail = null;\n\t        this._removalsHead = null;\n\t        this._removalsTail = null;\n\t    }\n\t    Object.defineProperty(DefaultKeyValueDiffer.prototype, \"isDirty\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () {\n\t            return this._additionsHead !== null || this._changesHead !== null ||\n\t                this._removalsHead !== null;\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    /**\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    DefaultKeyValueDiffer.prototype.forEachItem = function (fn) {\n\t        var /** @type {?} */ record;\n\t        for (record = this._mapHead; record !== null; record = record._next) {\n\t            fn(record);\n\t        }\n\t    };\n\t    /**\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    DefaultKeyValueDiffer.prototype.forEachPreviousItem = function (fn) {\n\t        var /** @type {?} */ record;\n\t        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n\t            fn(record);\n\t        }\n\t    };\n\t    /**\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    DefaultKeyValueDiffer.prototype.forEachChangedItem = function (fn) {\n\t        var /** @type {?} */ record;\n\t        for (record = this._changesHead; record !== null; record = record._nextChanged) {\n\t            fn(record);\n\t        }\n\t    };\n\t    /**\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    DefaultKeyValueDiffer.prototype.forEachAddedItem = function (fn) {\n\t        var /** @type {?} */ record;\n\t        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n\t            fn(record);\n\t        }\n\t    };\n\t    /**\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    DefaultKeyValueDiffer.prototype.forEachRemovedItem = function (fn) {\n\t        var /** @type {?} */ record;\n\t        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n\t            fn(record);\n\t        }\n\t    };\n\t    /**\n\t     * @param {?=} map\n\t     * @return {?}\n\t     */\n\t    DefaultKeyValueDiffer.prototype.diff = function (map) {\n\t        if (!map) {\n\t            map = new Map();\n\t        }\n\t        else if (!(map instanceof Map || isJsObject(map))) {\n\t            throw new Error(\"Error trying to diff '\" + stringify(map) + \"'. Only maps and objects are allowed\");\n\t        }\n\t        return this.check(map) ? this : null;\n\t    };\n\t    /**\n\t     * @return {?}\n\t     */\n\t    DefaultKeyValueDiffer.prototype.onDestroy = function () { };\n\t    /**\n\t     * Check the current state of the map vs the previous.\n\t     * The algorithm is optimised for when the keys do no change.\n\t     * @param {?} map\n\t     * @return {?}\n\t     */\n\t    DefaultKeyValueDiffer.prototype.check = function (map) {\n\t        var _this = this;\n\t        this._reset();\n\t        var /** @type {?} */ insertBefore = this._mapHead;\n\t        this._appendAfter = null;\n\t        this._forEach(map, function (value, key) {\n\t            if (insertBefore && insertBefore.key === key) {\n\t                _this._maybeAddToChanges(insertBefore, value);\n\t                _this._appendAfter = insertBefore;\n\t                insertBefore = insertBefore._next;\n\t            }\n\t            else {\n\t                var /** @type {?} */ record = _this._getOrCreateRecordForKey(key, value);\n\t                insertBefore = _this._insertBeforeOrAppend(insertBefore, record);\n\t            }\n\t        });\n\t        // Items remaining at the end of the list have been deleted\n\t        if (insertBefore) {\n\t            if (insertBefore._prev) {\n\t                insertBefore._prev._next = null;\n\t            }\n\t            this._removalsHead = insertBefore;\n\t            for (var /** @type {?} */ record = insertBefore; record !== null; record = record._nextRemoved) {\n\t                if (record === this._mapHead) {\n\t                    this._mapHead = null;\n\t                }\n\t                this._records.delete(record.key);\n\t                record._nextRemoved = record._next;\n\t                record.previousValue = record.currentValue;\n\t                record.currentValue = null;\n\t                record._prev = null;\n\t                record._next = null;\n\t            }\n\t        }\n\t        // Make sure tails have no next records from previous runs\n\t        if (this._changesTail)\n\t            this._changesTail._nextChanged = null;\n\t        if (this._additionsTail)\n\t            this._additionsTail._nextAdded = null;\n\t        return this.isDirty;\n\t    };\n\t    /**\n\t     * Inserts a record before `before` or append at the end of the list when `before` is null.\n\t     *\n\t     * Notes:\n\t     * - This method appends at `this._appendAfter`,\n\t     * - This method updates `this._appendAfter`,\n\t     * - The return value is the new value for the insertion pointer.\n\t     * @param {?} before\n\t     * @param {?} record\n\t     * @return {?}\n\t     */\n\t    DefaultKeyValueDiffer.prototype._insertBeforeOrAppend = function (before, record) {\n\t        if (before) {\n\t            var /** @type {?} */ prev = before._prev;\n\t            record._next = before;\n\t            record._prev = prev;\n\t            before._prev = record;\n\t            if (prev) {\n\t                prev._next = record;\n\t            }\n\t            if (before === this._mapHead) {\n\t                this._mapHead = record;\n\t            }\n\t            this._appendAfter = before;\n\t            return before;\n\t        }\n\t        if (this._appendAfter) {\n\t            this._appendAfter._next = record;\n\t            record._prev = this._appendAfter;\n\t        }\n\t        else {\n\t            this._mapHead = record;\n\t        }\n\t        this._appendAfter = record;\n\t        return null;\n\t    };\n\t    /**\n\t     * @param {?} key\n\t     * @param {?} value\n\t     * @return {?}\n\t     */\n\t    DefaultKeyValueDiffer.prototype._getOrCreateRecordForKey = function (key, value) {\n\t        if (this._records.has(key)) {\n\t            var /** @type {?} */ record_1 = ((this._records.get(key)));\n\t            this._maybeAddToChanges(record_1, value);\n\t            var /** @type {?} */ prev = record_1._prev;\n\t            var /** @type {?} */ next = record_1._next;\n\t            if (prev) {\n\t                prev._next = next;\n\t            }\n\t            if (next) {\n\t                next._prev = prev;\n\t            }\n\t            record_1._next = null;\n\t            record_1._prev = null;\n\t            return record_1;\n\t        }\n\t        var /** @type {?} */ record = new KeyValueChangeRecord_(key);\n\t        this._records.set(key, record);\n\t        record.currentValue = value;\n\t        this._addToAdditions(record);\n\t        return record;\n\t    };\n\t    /**\n\t     * \\@internal\n\t     * @return {?}\n\t     */\n\t    DefaultKeyValueDiffer.prototype._reset = function () {\n\t        if (this.isDirty) {\n\t            var /** @type {?} */ record = void 0;\n\t            // let `_previousMapHead` contain the state of the map before the changes\n\t            this._previousMapHead = this._mapHead;\n\t            for (record = this._previousMapHead; record !== null; record = record._next) {\n\t                record._nextPrevious = record._next;\n\t            }\n\t            // Update `record.previousValue` with the value of the item before the changes\n\t            // We need to update all changed items (that's those which have been added and changed)\n\t            for (record = this._changesHead; record !== null; record = record._nextChanged) {\n\t                record.previousValue = record.currentValue;\n\t            }\n\t            for (record = this._additionsHead; record != null; record = record._nextAdded) {\n\t                record.previousValue = record.currentValue;\n\t            }\n\t            this._changesHead = this._changesTail = null;\n\t            this._additionsHead = this._additionsTail = null;\n\t            this._removalsHead = null;\n\t        }\n\t    };\n\t    /**\n\t     * @param {?} record\n\t     * @param {?} newValue\n\t     * @return {?}\n\t     */\n\t    DefaultKeyValueDiffer.prototype._maybeAddToChanges = function (record, newValue) {\n\t        if (!looseIdentical(newValue, record.currentValue)) {\n\t            record.previousValue = record.currentValue;\n\t            record.currentValue = newValue;\n\t            this._addToChanges(record);\n\t        }\n\t    };\n\t    /**\n\t     * @param {?} record\n\t     * @return {?}\n\t     */\n\t    DefaultKeyValueDiffer.prototype._addToAdditions = function (record) {\n\t        if (this._additionsHead === null) {\n\t            this._additionsHead = this._additionsTail = record;\n\t        }\n\t        else {\n\t            ((this._additionsTail))._nextAdded = record;\n\t            this._additionsTail = record;\n\t        }\n\t    };\n\t    /**\n\t     * @param {?} record\n\t     * @return {?}\n\t     */\n\t    DefaultKeyValueDiffer.prototype._addToChanges = function (record) {\n\t        if (this._changesHead === null) {\n\t            this._changesHead = this._changesTail = record;\n\t        }\n\t        else {\n\t            ((this._changesTail))._nextChanged = record;\n\t            this._changesTail = record;\n\t        }\n\t    };\n\t    /**\n\t     * \\@internal\n\t     * @template K, V\n\t     * @param {?} obj\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    DefaultKeyValueDiffer.prototype._forEach = function (obj, fn) {\n\t        if (obj instanceof Map) {\n\t            obj.forEach(fn);\n\t        }\n\t        else {\n\t            Object.keys(obj).forEach(function (k) { return fn(obj[k], k); });\n\t        }\n\t    };\n\t    return DefaultKeyValueDiffer;\n\t}());\n\t/**\n\t * \\@stable\n\t */\n\tvar KeyValueChangeRecord_ = (function () {\n\t    /**\n\t     * @param {?} key\n\t     */\n\t    function KeyValueChangeRecord_(key) {\n\t        this.key = key;\n\t        this.previousValue = null;\n\t        this.currentValue = null;\n\t        /**\n\t         * \\@internal\n\t         */\n\t        this._nextPrevious = null;\n\t        /**\n\t         * \\@internal\n\t         */\n\t        this._next = null;\n\t        /**\n\t         * \\@internal\n\t         */\n\t        this._prev = null;\n\t        /**\n\t         * \\@internal\n\t         */\n\t        this._nextAdded = null;\n\t        /**\n\t         * \\@internal\n\t         */\n\t        this._nextRemoved = null;\n\t        /**\n\t         * \\@internal\n\t         */\n\t        this._nextChanged = null;\n\t    }\n\t    return KeyValueChangeRecord_;\n\t}());\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n\t * \\@stable\n\t */\n\tvar IterableDiffers = (function () {\n\t    /**\n\t     * @param {?} factories\n\t     */\n\t    function IterableDiffers(factories) {\n\t        this.factories = factories;\n\t    }\n\t    /**\n\t     * @param {?} factories\n\t     * @param {?=} parent\n\t     * @return {?}\n\t     */\n\t    IterableDiffers.create = function (factories, parent) {\n\t        if (parent != null) {\n\t            var /** @type {?} */ copied = parent.factories.slice();\n\t            factories = factories.concat(copied);\n\t            return new IterableDiffers(factories);\n\t        }\n\t        else {\n\t            return new IterableDiffers(factories);\n\t        }\n\t    };\n\t    /**\n\t     * Takes an array of {\\@link IterableDifferFactory} and returns a provider used to extend the\n\t     * inherited {\\@link IterableDiffers} instance with the provided factories and return a new\n\t     * {\\@link IterableDiffers} instance.\n\t     *\n\t     * The following example shows how to extend an existing list of factories,\n\t     * which will only be applied to the injector for this component and its children.\n\t     * This step is all that's required to make a new {\\@link IterableDiffer} available.\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```\n\t     * \\@Component({\n\t     *   viewProviders: [\n\t     *     IterableDiffers.extend([new ImmutableListDiffer()])\n\t     *   ]\n\t     * })\n\t     * ```\n\t     * @param {?} factories\n\t     * @return {?}\n\t     */\n\t    IterableDiffers.extend = function (factories) {\n\t        return {\n\t            provide: IterableDiffers,\n\t            useFactory: function (parent) {\n\t                if (!parent) {\n\t                    // Typically would occur when calling IterableDiffers.extend inside of dependencies passed\n\t                    // to\n\t                    // bootstrap(), which would override default pipes instead of extending them.\n\t                    throw new Error('Cannot extend IterableDiffers without a parent injector');\n\t                }\n\t                return IterableDiffers.create(factories, parent);\n\t            },\n\t            // Dependency technically isn't optional, but we can provide a better error message this way.\n\t            deps: [[IterableDiffers, new SkipSelf(), new Optional()]]\n\t        };\n\t    };\n\t    /**\n\t     * @param {?} iterable\n\t     * @return {?}\n\t     */\n\t    IterableDiffers.prototype.find = function (iterable) {\n\t        var /** @type {?} */ factory = this.factories.find(function (f) { return f.supports(iterable); });\n\t        if (factory != null) {\n\t            return factory;\n\t        }\n\t        else {\n\t            throw new Error(\"Cannot find a differ supporting object '\" + iterable + \"' of type '\" + getTypeNameForDebugging(iterable) + \"'\");\n\t        }\n\t    };\n\t    return IterableDiffers;\n\t}());\n\t/**\n\t * @param {?} type\n\t * @return {?}\n\t */\n\tfunction getTypeNameForDebugging(type) {\n\t    return type['name'] || typeof type;\n\t}\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n\t * \\@stable\n\t */\n\tvar KeyValueDiffers = (function () {\n\t    /**\n\t     * @param {?} factories\n\t     */\n\t    function KeyValueDiffers(factories) {\n\t        this.factories = factories;\n\t    }\n\t    /**\n\t     * @template S\n\t     * @param {?} factories\n\t     * @param {?=} parent\n\t     * @return {?}\n\t     */\n\t    KeyValueDiffers.create = function (factories, parent) {\n\t        if (parent) {\n\t            var /** @type {?} */ copied = parent.factories.slice();\n\t            factories = factories.concat(copied);\n\t        }\n\t        return new KeyValueDiffers(factories);\n\t    };\n\t    /**\n\t     * Takes an array of {\\@link KeyValueDifferFactory} and returns a provider used to extend the\n\t     * inherited {\\@link KeyValueDiffers} instance with the provided factories and return a new\n\t     * {\\@link KeyValueDiffers} instance.\n\t     *\n\t     * The following example shows how to extend an existing list of factories,\n\t     * which will only be applied to the injector for this component and its children.\n\t     * This step is all that's required to make a new {\\@link KeyValueDiffer} available.\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```\n\t     * \\@Component({\n\t     *   viewProviders: [\n\t     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n\t     *   ]\n\t     * })\n\t     * ```\n\t     * @template S\n\t     * @param {?} factories\n\t     * @return {?}\n\t     */\n\t    KeyValueDiffers.extend = function (factories) {\n\t        return {\n\t            provide: KeyValueDiffers,\n\t            useFactory: function (parent) {\n\t                if (!parent) {\n\t                    // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed\n\t                    // to bootstrap(), which would override default pipes instead of extending them.\n\t                    throw new Error('Cannot extend KeyValueDiffers without a parent injector');\n\t                }\n\t                return KeyValueDiffers.create(factories, parent);\n\t            },\n\t            // Dependency technically isn't optional, but we can provide a better error message this way.\n\t            deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]\n\t        };\n\t    };\n\t    /**\n\t     * @param {?} kv\n\t     * @return {?}\n\t     */\n\t    KeyValueDiffers.prototype.find = function (kv) {\n\t        var /** @type {?} */ factory = this.factories.find(function (f) { return f.supports(kv); });\n\t        if (factory) {\n\t            return factory;\n\t        }\n\t        throw new Error(\"Cannot find a differ supporting object '\" + kv + \"'\");\n\t    };\n\t    return KeyValueDiffers;\n\t}());\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * Structural diffing for `Object`s and `Map`s.\n\t */\n\tvar keyValDiff = [new DefaultKeyValueDifferFactory()];\n\t/**\n\t * Structural diffing for `Iterable` types such as `Array`s.\n\t */\n\tvar iterableDiff = [new DefaultIterableDifferFactory()];\n\tvar defaultIterableDiffers = new IterableDiffers(iterableDiff);\n\tvar defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * @module\n\t * @description\n\t * Change detection enables data binding in Angular.\n\t */\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * @return {?}\n\t */\n\tfunction _reflector() {\n\t    return reflector;\n\t}\n\tvar _CORE_PLATFORM_PROVIDERS = [\n\t    // Set a default platform name for platforms that don't set it explicitly.\n\t    { provide: PLATFORM_ID, useValue: 'unknown' },\n\t    PlatformRef_,\n\t    { provide: PlatformRef, useExisting: PlatformRef_ },\n\t    { provide: Reflector, useFactory: _reflector, deps: [] },\n\t    TestabilityRegistry,\n\t    Console,\n\t];\n\t/**\n\t * This platform has to be included in any other platform\n\t *\n\t * \\@experimental\n\t */\n\tvar platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * \\@experimental i18n support is experimental.\n\t */\n\tvar LOCALE_ID = new InjectionToken('LocaleId');\n\t/**\n\t * \\@experimental i18n support is experimental.\n\t */\n\tvar TRANSLATIONS = new InjectionToken('Translations');\n\t/**\n\t * \\@experimental i18n support is experimental.\n\t */\n\tvar TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');\n\tvar MissingTranslationStrategy = {};\n\tMissingTranslationStrategy.Error = 0;\n\tMissingTranslationStrategy.Warning = 1;\n\tMissingTranslationStrategy.Ignore = 2;\n\tMissingTranslationStrategy[MissingTranslationStrategy.Error] = \"Error\";\n\tMissingTranslationStrategy[MissingTranslationStrategy.Warning] = \"Warning\";\n\tMissingTranslationStrategy[MissingTranslationStrategy.Ignore] = \"Ignore\";\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * @return {?}\n\t */\n\tfunction _iterableDiffersFactory() {\n\t    return defaultIterableDiffers;\n\t}\n\t/**\n\t * @return {?}\n\t */\n\tfunction _keyValueDiffersFactory() {\n\t    return defaultKeyValueDiffers;\n\t}\n\t/**\n\t * @param {?=} locale\n\t * @return {?}\n\t */\n\tfunction _localeFactory(locale) {\n\t    return locale || 'en-US';\n\t}\n\t/**\n\t * This module includes the providers of \\@angular/core that are needed\n\t * to bootstrap components via `ApplicationRef`.\n\t *\n\t * \\@experimental\n\t */\n\tvar ApplicationModule = (function () {\n\t    /**\n\t     * @param {?} appRef\n\t     */\n\t    function ApplicationModule(appRef) {\n\t    }\n\t    return ApplicationModule;\n\t}());\n\tApplicationModule.decorators = [\n\t    { type: NgModule, args: [{\n\t                providers: [\n\t                    ApplicationRef_,\n\t                    { provide: ApplicationRef, useExisting: ApplicationRef_ },\n\t                    ApplicationInitStatus,\n\t                    Compiler,\n\t                    APP_ID_RANDOM_PROVIDER,\n\t                    { provide: IterableDiffers, useFactory: _iterableDiffersFactory },\n\t                    { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory },\n\t                    {\n\t                        provide: LOCALE_ID,\n\t                        useFactory: _localeFactory,\n\t                        deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]\n\t                    },\n\t                ]\n\t            },] },\n\t];\n\t/**\n\t * @nocollapse\n\t */\n\tApplicationModule.ctorParameters = function () { return [\n\t    { type: ApplicationRef, },\n\t]; };\n\tvar SecurityContext = {};\n\tSecurityContext.NONE = 0;\n\tSecurityContext.HTML = 1;\n\tSecurityContext.STYLE = 2;\n\tSecurityContext.SCRIPT = 3;\n\tSecurityContext.URL = 4;\n\tSecurityContext.RESOURCE_URL = 5;\n\tSecurityContext[SecurityContext.NONE] = \"NONE\";\n\tSecurityContext[SecurityContext.HTML] = \"HTML\";\n\tSecurityContext[SecurityContext.STYLE] = \"STYLE\";\n\tSecurityContext[SecurityContext.SCRIPT] = \"SCRIPT\";\n\tSecurityContext[SecurityContext.URL] = \"URL\";\n\tSecurityContext[SecurityContext.RESOURCE_URL] = \"RESOURCE_URL\";\n\t/**\n\t * Sanitizer is used by the views to sanitize potentially dangerous values.\n\t *\n\t * \\@stable\n\t * @abstract\n\t */\n\tvar Sanitizer = (function () {\n\t    function Sanitizer() {\n\t    }\n\t    /**\n\t     * @abstract\n\t     * @param {?} context\n\t     * @param {?} value\n\t     * @return {?}\n\t     */\n\t    Sanitizer.prototype.sanitize = function (context, value) { };\n\t    return Sanitizer;\n\t}());\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * Node instance data.\n\t *\n\t * We have a separate type per NodeType to save memory\n\t * (TextData | ElementData | ProviderData | PureExpressionData | QueryList<any>)\n\t *\n\t * To keep our code monomorphic,\n\t * we prohibit using `NodeData` directly but enforce the use of accessors (`asElementData`, ...).\n\t * This way, no usage site can get a `NodeData` from view.nodes and then use it for different\n\t * purposes.\n\t */\n\t/**\n\t * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n\t * @param {?} view\n\t * @param {?} index\n\t * @return {?}\n\t */\n\tfunction asTextData(view, index) {\n\t    return (view.nodes[index]);\n\t}\n\t/**\n\t * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n\t * @param {?} view\n\t * @param {?} index\n\t * @return {?}\n\t */\n\tfunction asElementData(view, index) {\n\t    return (view.nodes[index]);\n\t}\n\t/**\n\t * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n\t * @param {?} view\n\t * @param {?} index\n\t * @return {?}\n\t */\n\tfunction asProviderData(view, index) {\n\t    return (view.nodes[index]);\n\t}\n\t/**\n\t * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n\t * @param {?} view\n\t * @param {?} index\n\t * @return {?}\n\t */\n\tfunction asPureExpressionData(view, index) {\n\t    return (view.nodes[index]);\n\t}\n\t/**\n\t * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n\t * @param {?} view\n\t * @param {?} index\n\t * @return {?}\n\t */\n\tfunction asQueryList(view, index) {\n\t    return (view.nodes[index]);\n\t}\n\t/**\n\t * @abstract\n\t */\n\tvar DebugContext = (function () {\n\t    function DebugContext() {\n\t    }\n\t    /**\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    DebugContext.prototype.view = function () { };\n\t    /**\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    DebugContext.prototype.nodeIndex = function () { };\n\t    /**\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    DebugContext.prototype.injector = function () { };\n\t    /**\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    DebugContext.prototype.component = function () { };\n\t    /**\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    DebugContext.prototype.providerTokens = function () { };\n\t    /**\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    DebugContext.prototype.references = function () { };\n\t    /**\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    DebugContext.prototype.context = function () { };\n\t    /**\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    DebugContext.prototype.componentRenderElement = function () { };\n\t    /**\n\t     * @abstract\n\t     * @return {?}\n\t     */\n\t    DebugContext.prototype.renderNode = function () { };\n\t    /**\n\t     * @abstract\n\t     * @param {?} console\n\t     * @param {...?} values\n\t     * @return {?}\n\t     */\n\t    DebugContext.prototype.logError = function (console) {\n\t        var values = [];\n\t        for (var _i = 1; _i < arguments.length; _i++) {\n\t            values[_i - 1] = arguments[_i];\n\t        }\n\t    };\n\t    return DebugContext;\n\t}());\n\t/**\n\t * This object is used to prevent cycles in the source files and to have a place where\n\t * debug mode can hook it. It is lazily filled when `isDevMode` is known.\n\t */\n\tvar Services = {\n\t    setCurrentNode: undefined,\n\t    createRootView: undefined,\n\t    createEmbeddedView: undefined,\n\t    createComponentView: undefined,\n\t    createNgModuleRef: undefined,\n\t    overrideProvider: undefined,\n\t    clearProviderOverrides: undefined,\n\t    checkAndUpdateView: undefined,\n\t    checkNoChangesView: undefined,\n\t    destroyView: undefined,\n\t    resolveDep: undefined,\n\t    createDebugContext: undefined,\n\t    handleEvent: undefined,\n\t    updateDirectives: undefined,\n\t    updateRenderer: undefined,\n\t    dirtyParentQueries: undefined,\n\t};\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * @param {?} context\n\t * @param {?} oldValue\n\t * @param {?} currValue\n\t * @param {?} isFirstCheck\n\t * @return {?}\n\t */\n\tfunction expressionChangedAfterItHasBeenCheckedError(context, oldValue, currValue, isFirstCheck) {\n\t    var /** @type {?} */ msg = \"ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '\" + oldValue + \"'. Current value: '\" + currValue + \"'.\";\n\t    if (isFirstCheck) {\n\t        msg +=\n\t            \" It seems like the view has been created after its parent and its children have been dirty checked.\" +\n\t                \" Has it been created in a change detection hook ?\";\n\t    }\n\t    return viewDebugError(msg, context);\n\t}\n\t/**\n\t * @param {?} err\n\t * @param {?} context\n\t * @return {?}\n\t */\n\tfunction viewWrappedDebugError(err, context) {\n\t    if (!(err instanceof Error)) {\n\t        // errors that are not Error instances don't have a stack,\n\t        // so it is ok to wrap them into a new Error object...\n\t        err = new Error(err.toString());\n\t    }\n\t    _addDebugContext(err, context);\n\t    return err;\n\t}\n\t/**\n\t * @param {?} msg\n\t * @param {?} context\n\t * @return {?}\n\t */\n\tfunction viewDebugError(msg, context) {\n\t    var /** @type {?} */ err = new Error(msg);\n\t    _addDebugContext(err, context);\n\t    return err;\n\t}\n\t/**\n\t * @param {?} err\n\t * @param {?} context\n\t * @return {?}\n\t */\n\tfunction _addDebugContext(err, context) {\n\t    ((err))[ERROR_DEBUG_CONTEXT] = context;\n\t    ((err))[ERROR_LOGGER] = context.logError.bind(context);\n\t}\n\t/**\n\t * @param {?} err\n\t * @return {?}\n\t */\n\tfunction isViewDebugError(err) {\n\t    return !!getDebugContext(err);\n\t}\n\t/**\n\t * @param {?} action\n\t * @return {?}\n\t */\n\tfunction viewDestroyedError(action) {\n\t    return new Error(\"ViewDestroyedError: Attempt to use a destroyed view: \" + action);\n\t}\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\tvar NOOP = function () { };\n\tvar _tokenKeyCache = new Map();\n\t/**\n\t * @param {?} token\n\t * @return {?}\n\t */\n\tfunction tokenKey(token) {\n\t    var /** @type {?} */ key = _tokenKeyCache.get(token);\n\t    if (!key) {\n\t        key = stringify(token) + '_' + _tokenKeyCache.size;\n\t        _tokenKeyCache.set(token, key);\n\t    }\n\t    return key;\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} nodeIdx\n\t * @param {?} bindingIdx\n\t * @param {?} value\n\t * @return {?}\n\t */\n\tfunction unwrapValue(view, nodeIdx, bindingIdx, value) {\n\t    if (value instanceof WrappedValue) {\n\t        value = value.wrapped;\n\t        var /** @type {?} */ globalBindingIdx = view.def.nodes[nodeIdx].bindingIndex + bindingIdx;\n\t        var /** @type {?} */ oldValue = view.oldValues[globalBindingIdx];\n\t        if (oldValue instanceof WrappedValue) {\n\t            oldValue = oldValue.wrapped;\n\t        }\n\t        view.oldValues[globalBindingIdx] = new WrappedValue(oldValue);\n\t    }\n\t    return value;\n\t}\n\tvar UNDEFINED_RENDERER_TYPE_ID = '$$undefined';\n\tvar EMPTY_RENDERER_TYPE_ID = '$$empty';\n\t/**\n\t * @param {?} values\n\t * @return {?}\n\t */\n\tfunction createRendererType2(values) {\n\t    return {\n\t        id: UNDEFINED_RENDERER_TYPE_ID,\n\t        styles: values.styles,\n\t        encapsulation: values.encapsulation,\n\t        data: values.data\n\t    };\n\t}\n\tvar _renderCompCount = 0;\n\t/**\n\t * @param {?=} type\n\t * @return {?}\n\t */\n\tfunction resolveRendererType2(type) {\n\t    if (type && type.id === UNDEFINED_RENDERER_TYPE_ID) {\n\t        // first time we see this RendererType2. Initialize it...\n\t        var /** @type {?} */ isFilled = ((type.encapsulation != null && type.encapsulation !== ViewEncapsulation.None) ||\n\t            type.styles.length || Object.keys(type.data).length);\n\t        if (isFilled) {\n\t            type.id = \"c\" + _renderCompCount++;\n\t        }\n\t        else {\n\t            type.id = EMPTY_RENDERER_TYPE_ID;\n\t        }\n\t    }\n\t    if (type && type.id === EMPTY_RENDERER_TYPE_ID) {\n\t        type = null;\n\t    }\n\t    return type || null;\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} def\n\t * @param {?} bindingIdx\n\t * @param {?} value\n\t * @return {?}\n\t */\n\tfunction checkBinding(view, def, bindingIdx, value) {\n\t    var /** @type {?} */ oldValues = view.oldValues;\n\t    if ((view.state & 2 /* FirstCheck */) ||\n\t        !looseIdentical(oldValues[def.bindingIndex + bindingIdx], value)) {\n\t        return true;\n\t    }\n\t    return false;\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} def\n\t * @param {?} bindingIdx\n\t * @param {?} value\n\t * @return {?}\n\t */\n\tfunction checkAndUpdateBinding(view, def, bindingIdx, value) {\n\t    if (checkBinding(view, def, bindingIdx, value)) {\n\t        view.oldValues[def.bindingIndex + bindingIdx] = value;\n\t        return true;\n\t    }\n\t    return false;\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} def\n\t * @param {?} bindingIdx\n\t * @param {?} value\n\t * @return {?}\n\t */\n\tfunction checkBindingNoChanges(view, def, bindingIdx, value) {\n\t    var /** @type {?} */ oldValue = view.oldValues[def.bindingIndex + bindingIdx];\n\t    if ((view.state & 1 /* BeforeFirstCheck */) || !devModeEqual(oldValue, value)) {\n\t        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, def.nodeIndex), oldValue, value, (view.state & 1 /* BeforeFirstCheck */) !== 0);\n\t    }\n\t}\n\t/**\n\t * @param {?} view\n\t * @return {?}\n\t */\n\tfunction markParentViewsForCheck(view) {\n\t    var /** @type {?} */ currView = view;\n\t    while (currView) {\n\t        if (currView.def.flags & 2 /* OnPush */) {\n\t            currView.state |= 8 /* ChecksEnabled */;\n\t        }\n\t        currView = currView.viewContainerParent || currView.parent;\n\t    }\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} endView\n\t * @return {?}\n\t */\n\tfunction markParentViewsForCheckProjectedViews(view, endView) {\n\t    var /** @type {?} */ currView = view;\n\t    while (currView && currView !== endView) {\n\t        currView.state |= 64 /* CheckProjectedViews */;\n\t        currView = currView.viewContainerParent || currView.parent;\n\t    }\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} nodeIndex\n\t * @param {?} eventName\n\t * @param {?} event\n\t * @return {?}\n\t */\n\tfunction dispatchEvent(view, nodeIndex, eventName, event) {\n\t    var /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];\n\t    var /** @type {?} */ startView = nodeDef.flags & 33554432 /* ComponentView */ ? asElementData(view, nodeIndex).componentView : view;\n\t    markParentViewsForCheck(startView);\n\t    return Services.handleEvent(view, nodeIndex, eventName, event);\n\t}\n\t/**\n\t * @param {?} view\n\t * @return {?}\n\t */\n\tfunction declaredViewContainer(view) {\n\t    if (view.parent) {\n\t        var /** @type {?} */ parentView = view.parent;\n\t        return asElementData(parentView, /** @type {?} */ ((view.parentNodeDef)).nodeIndex);\n\t    }\n\t    return null;\n\t}\n\t/**\n\t * for component views, this is the host element.\n\t * for embedded views, this is the index of the parent node\n\t * that contains the view container.\n\t * @param {?} view\n\t * @return {?}\n\t */\n\tfunction viewParentEl(view) {\n\t    var /** @type {?} */ parentView = view.parent;\n\t    if (parentView) {\n\t        return ((view.parentNodeDef)).parent;\n\t    }\n\t    else {\n\t        return null;\n\t    }\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} def\n\t * @return {?}\n\t */\n\tfunction renderNode(view, def) {\n\t    switch (def.flags & 201347067 /* Types */) {\n\t        case 1 /* TypeElement */:\n\t            return asElementData(view, def.nodeIndex).renderElement;\n\t        case 2 /* TypeText */:\n\t            return asTextData(view, def.nodeIndex).renderText;\n\t    }\n\t}\n\t/**\n\t * @param {?} target\n\t * @param {?} name\n\t * @return {?}\n\t */\n\tfunction elementEventFullName(target, name) {\n\t    return target ? target + \":\" + name : name;\n\t}\n\t/**\n\t * @param {?} view\n\t * @return {?}\n\t */\n\tfunction isComponentView(view) {\n\t    return !!view.parent && !!(((view.parentNodeDef)).flags & 32768 /* Component */);\n\t}\n\t/**\n\t * @param {?} view\n\t * @return {?}\n\t */\n\tfunction isEmbeddedView(view) {\n\t    return !!view.parent && !(((view.parentNodeDef)).flags & 32768 /* Component */);\n\t}\n\t/**\n\t * @param {?} queryId\n\t * @return {?}\n\t */\n\tfunction filterQueryId(queryId) {\n\t    return 1 << (queryId % 32);\n\t}\n\t/**\n\t * @param {?} matchedQueriesDsl\n\t * @return {?}\n\t */\n\tfunction splitMatchedQueriesDsl(matchedQueriesDsl) {\n\t    var /** @type {?} */ matchedQueries = {};\n\t    var /** @type {?} */ matchedQueryIds = 0;\n\t    var /** @type {?} */ references = {};\n\t    if (matchedQueriesDsl) {\n\t        matchedQueriesDsl.forEach(function (_a) {\n\t            var queryId = _a[0], valueType = _a[1];\n\t            if (typeof queryId === 'number') {\n\t                matchedQueries[queryId] = valueType;\n\t                matchedQueryIds |= filterQueryId(queryId);\n\t            }\n\t            else {\n\t                references[queryId] = valueType;\n\t            }\n\t        });\n\t    }\n\t    return { matchedQueries: matchedQueries, references: references, matchedQueryIds: matchedQueryIds };\n\t}\n\t/**\n\t * @param {?} deps\n\t * @return {?}\n\t */\n\tfunction splitDepsDsl(deps) {\n\t    return deps.map(function (value) {\n\t        var /** @type {?} */ token;\n\t        var /** @type {?} */ flags;\n\t        if (Array.isArray(value)) {\n\t            flags = value[0], token = value[1];\n\t        }\n\t        else {\n\t            flags = 0 /* None */;\n\t            token = value;\n\t        }\n\t        return { flags: flags, token: token, tokenKey: tokenKey(token) };\n\t    });\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} renderHost\n\t * @param {?} def\n\t * @return {?}\n\t */\n\tfunction getParentRenderElement(view, renderHost, def) {\n\t    var /** @type {?} */ renderParent = def.renderParent;\n\t    if (renderParent) {\n\t        if ((renderParent.flags & 1 /* TypeElement */) === 0 ||\n\t            (renderParent.flags & 33554432 /* ComponentView */) === 0 ||\n\t            (((renderParent.element)).componentRendererType && ((((renderParent.element)).componentRendererType)).encapsulation ===\n\t                ViewEncapsulation.Native)) {\n\t            // only children of non components, or children of components with native encapsulation should\n\t            // be attached.\n\t            return asElementData(view, /** @type {?} */ ((def.renderParent)).nodeIndex).renderElement;\n\t        }\n\t    }\n\t    else {\n\t        return renderHost;\n\t    }\n\t}\n\tvar DEFINITION_CACHE = new WeakMap();\n\t/**\n\t * @template D\n\t * @param {?} factory\n\t * @return {?}\n\t */\n\tfunction resolveDefinition(factory) {\n\t    var /** @type {?} */ value = (((DEFINITION_CACHE.get(factory))));\n\t    if (!value) {\n\t        value = factory(function () { return NOOP; });\n\t        value.factory = factory;\n\t        DEFINITION_CACHE.set(factory, value);\n\t    }\n\t    return value;\n\t}\n\t/**\n\t * @param {?} view\n\t * @return {?}\n\t */\n\tfunction rootRenderNodes(view) {\n\t    var /** @type {?} */ renderNodes = [];\n\t    visitRootRenderNodes(view, 0 /* Collect */, undefined, undefined, renderNodes);\n\t    return renderNodes;\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} action\n\t * @param {?} parentNode\n\t * @param {?} nextSibling\n\t * @param {?=} target\n\t * @return {?}\n\t */\n\tfunction visitRootRenderNodes(view, action, parentNode, nextSibling, target) {\n\t    // We need to re-compute the parent node in case the nodes have been moved around manually\n\t    if (action === 3 /* RemoveChild */) {\n\t        parentNode = view.renderer.parentNode(renderNode(view, /** @type {?} */ ((view.def.lastRenderRootNode))));\n\t    }\n\t    visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} action\n\t * @param {?} startIndex\n\t * @param {?} endIndex\n\t * @param {?} parentNode\n\t * @param {?} nextSibling\n\t * @param {?=} target\n\t * @return {?}\n\t */\n\tfunction visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {\n\t    for (var /** @type {?} */ i = startIndex; i <= endIndex; i++) {\n\t        var /** @type {?} */ nodeDef = view.def.nodes[i];\n\t        if (nodeDef.flags & (1 /* TypeElement */ | 2 /* TypeText */ | 8 /* TypeNgContent */)) {\n\t            visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);\n\t        }\n\t        // jump to next sibling\n\t        i += nodeDef.childCount;\n\t    }\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} ngContentIndex\n\t * @param {?} action\n\t * @param {?} parentNode\n\t * @param {?} nextSibling\n\t * @param {?=} target\n\t * @return {?}\n\t */\n\tfunction visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {\n\t    var /** @type {?} */ compView = view;\n\t    while (compView && !isComponentView(compView)) {\n\t        compView = compView.parent;\n\t    }\n\t    var /** @type {?} */ hostView = ((compView)).parent;\n\t    var /** @type {?} */ hostElDef = viewParentEl(/** @type {?} */ ((compView)));\n\t    var /** @type {?} */ startIndex = ((hostElDef)).nodeIndex + 1;\n\t    var /** @type {?} */ endIndex = ((hostElDef)).nodeIndex + ((hostElDef)).childCount;\n\t    for (var /** @type {?} */ i = startIndex; i <= endIndex; i++) {\n\t        var /** @type {?} */ nodeDef = ((hostView)).def.nodes[i];\n\t        if (nodeDef.ngContentIndex === ngContentIndex) {\n\t            visitRenderNode(/** @type {?} */ ((hostView)), nodeDef, action, parentNode, nextSibling, target);\n\t        }\n\t        // jump to next sibling\n\t        i += nodeDef.childCount;\n\t    }\n\t    if (!((hostView)).parent) {\n\t        // a root view\n\t        var /** @type {?} */ projectedNodes = view.root.projectableNodes[ngContentIndex];\n\t        if (projectedNodes) {\n\t            for (var /** @type {?} */ i = 0; i < projectedNodes.length; i++) {\n\t                execRenderNodeAction(view, projectedNodes[i], action, parentNode, nextSibling, target);\n\t            }\n\t        }\n\t    }\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} nodeDef\n\t * @param {?} action\n\t * @param {?} parentNode\n\t * @param {?} nextSibling\n\t * @param {?=} target\n\t * @return {?}\n\t */\n\tfunction visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {\n\t    if (nodeDef.flags & 8 /* TypeNgContent */) {\n\t        visitProjectedRenderNodes(view, /** @type {?} */ ((nodeDef.ngContent)).index, action, parentNode, nextSibling, target);\n\t    }\n\t    else {\n\t        var /** @type {?} */ rn = renderNode(view, nodeDef);\n\t        if (action === 3 /* RemoveChild */ && (nodeDef.flags & 33554432 /* ComponentView */) &&\n\t            (nodeDef.bindingFlags & 48 /* CatSyntheticProperty */)) {\n\t            // Note: we might need to do both actions.\n\t            if (nodeDef.bindingFlags & (16 /* SyntheticProperty */)) {\n\t                execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n\t            }\n\t            if (nodeDef.bindingFlags & (32 /* SyntheticHostProperty */)) {\n\t                var /** @type {?} */ compView = asElementData(view, nodeDef.nodeIndex).componentView;\n\t                execRenderNodeAction(compView, rn, action, parentNode, nextSibling, target);\n\t            }\n\t        }\n\t        else {\n\t            execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n\t        }\n\t        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n\t            var /** @type {?} */ embeddedViews = ((asElementData(view, nodeDef.nodeIndex).viewContainer))._embeddedViews;\n\t            for (var /** @type {?} */ k = 0; k < embeddedViews.length; k++) {\n\t                visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);\n\t            }\n\t        }\n\t        if (nodeDef.flags & 1 /* TypeElement */ && !((nodeDef.element)).name) {\n\t            visitSiblingRenderNodes(view, action, nodeDef.nodeIndex + 1, nodeDef.nodeIndex + nodeDef.childCount, parentNode, nextSibling, target);\n\t        }\n\t    }\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} renderNode\n\t * @param {?} action\n\t * @param {?} parentNode\n\t * @param {?} nextSibling\n\t * @param {?=} target\n\t * @return {?}\n\t */\n\tfunction execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {\n\t    var /** @type {?} */ renderer = view.renderer;\n\t    switch (action) {\n\t        case 1 /* AppendChild */:\n\t            renderer.appendChild(parentNode, renderNode);\n\t            break;\n\t        case 2 /* InsertBefore */:\n\t            renderer.insertBefore(parentNode, renderNode, nextSibling);\n\t            break;\n\t        case 3 /* RemoveChild */:\n\t            renderer.removeChild(parentNode, renderNode);\n\t            break;\n\t        case 0 /* Collect */:\n\t            ((target)).push(renderNode);\n\t            break;\n\t    }\n\t}\n\tvar NS_PREFIX_RE = /^:([^:]+):(.+)$/;\n\t/**\n\t * @param {?} name\n\t * @return {?}\n\t */\n\tfunction splitNamespace(name) {\n\t    if (name[0] === ':') {\n\t        var /** @type {?} */ match = ((name.match(NS_PREFIX_RE)));\n\t        return [match[1], match[2]];\n\t    }\n\t    return ['', name];\n\t}\n\t/**\n\t * @param {?} bindings\n\t * @return {?}\n\t */\n\tfunction calcBindingFlags(bindings) {\n\t    var /** @type {?} */ flags = 0;\n\t    for (var /** @type {?} */ i = 0; i < bindings.length; i++) {\n\t        flags |= bindings[i].flags;\n\t    }\n\t    return flags;\n\t}\n\t/**\n\t * @param {?} valueCount\n\t * @param {?} constAndInterp\n\t * @return {?}\n\t */\n\tfunction interpolate(valueCount, constAndInterp) {\n\t    var /** @type {?} */ result = '';\n\t    for (var /** @type {?} */ i = 0; i < valueCount * 2; i = i + 2) {\n\t        result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);\n\t    }\n\t    return result + constAndInterp[valueCount * 2];\n\t}\n\t/**\n\t * @param {?} valueCount\n\t * @param {?} c0\n\t * @param {?} a1\n\t * @param {?} c1\n\t * @param {?=} a2\n\t * @param {?=} c2\n\t * @param {?=} a3\n\t * @param {?=} c3\n\t * @param {?=} a4\n\t * @param {?=} c4\n\t * @param {?=} a5\n\t * @param {?=} c5\n\t * @param {?=} a6\n\t * @param {?=} c6\n\t * @param {?=} a7\n\t * @param {?=} c7\n\t * @param {?=} a8\n\t * @param {?=} c8\n\t * @param {?=} a9\n\t * @param {?=} c9\n\t * @return {?}\n\t */\n\tfunction inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {\n\t    switch (valueCount) {\n\t        case 1:\n\t            return c0 + _toStringWithNull(a1) + c1;\n\t        case 2:\n\t            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;\n\t        case 3:\n\t            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n\t                c3;\n\t        case 4:\n\t            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n\t                c3 + _toStringWithNull(a4) + c4;\n\t        case 5:\n\t            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n\t                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;\n\t        case 6:\n\t            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n\t                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;\n\t        case 7:\n\t            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n\t                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n\t                c6 + _toStringWithNull(a7) + c7;\n\t        case 8:\n\t            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n\t                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n\t                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;\n\t        case 9:\n\t            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n\t                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n\t                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;\n\t        default:\n\t            throw new Error(\"Does not support more than 9 expressions\");\n\t    }\n\t}\n\t/**\n\t * @param {?} v\n\t * @return {?}\n\t */\n\tfunction _toStringWithNull(v) {\n\t    return v != null ? v.toString() : '';\n\t}\n\tvar EMPTY_ARRAY = [];\n\tvar EMPTY_MAP = {};\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * @param {?} flags\n\t * @param {?} matchedQueriesDsl\n\t * @param {?} ngContentIndex\n\t * @param {?} childCount\n\t * @param {?=} handleEvent\n\t * @param {?=} templateFactory\n\t * @return {?}\n\t */\n\tfunction anchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {\n\t    flags |= 1 /* TypeElement */;\n\t    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;\n\t    var /** @type {?} */ template = templateFactory ? resolveDefinition(templateFactory) : null;\n\t    return {\n\t        // will bet set by the view definition\n\t        nodeIndex: -1,\n\t        parent: null,\n\t        renderParent: null,\n\t        bindingIndex: -1,\n\t        outputIndex: -1,\n\t        // regular values\n\t        flags: flags,\n\t        checkIndex: -1,\n\t        childFlags: 0,\n\t        directChildFlags: 0,\n\t        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,\n\t        bindings: [],\n\t        bindingFlags: 0,\n\t        outputs: [],\n\t        element: {\n\t            ns: null,\n\t            name: null,\n\t            attrs: null, template: template,\n\t            componentProvider: null,\n\t            componentView: null,\n\t            componentRendererType: null,\n\t            publicProviders: null,\n\t            allProviders: null,\n\t            handleEvent: handleEvent || NOOP\n\t        },\n\t        provider: null,\n\t        text: null,\n\t        query: null,\n\t        ngContent: null\n\t    };\n\t}\n\t/**\n\t * @param {?} checkIndex\n\t * @param {?} flags\n\t * @param {?} matchedQueriesDsl\n\t * @param {?} ngContentIndex\n\t * @param {?} childCount\n\t * @param {?} namespaceAndName\n\t * @param {?=} fixedAttrs\n\t * @param {?=} bindings\n\t * @param {?=} outputs\n\t * @param {?=} handleEvent\n\t * @param {?=} componentView\n\t * @param {?=} componentRendererType\n\t * @return {?}\n\t */\n\tfunction elementDef(checkIndex, flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName, fixedAttrs, bindings, outputs, handleEvent, componentView, componentRendererType) {\n\t    if (fixedAttrs === void 0) { fixedAttrs = []; }\n\t    if (!handleEvent) {\n\t        handleEvent = NOOP;\n\t    }\n\t    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;\n\t    var /** @type {?} */ ns = ((null));\n\t    var /** @type {?} */ name = ((null));\n\t    if (namespaceAndName) {\n\t        _b = splitNamespace(namespaceAndName), ns = _b[0], name = _b[1];\n\t    }\n\t    bindings = bindings || [];\n\t    var /** @type {?} */ bindingDefs = new Array(bindings.length);\n\t    for (var /** @type {?} */ i = 0; i < bindings.length; i++) {\n\t        var _c = bindings[i], bindingFlags = _c[0], namespaceAndName_1 = _c[1], suffixOrSecurityContext = _c[2];\n\t        var _d = splitNamespace(namespaceAndName_1), ns_1 = _d[0], name_1 = _d[1];\n\t        var /** @type {?} */ securityContext = ((undefined));\n\t        var /** @type {?} */ suffix = ((undefined));\n\t        switch (bindingFlags & 15 /* Types */) {\n\t            case 4 /* TypeElementStyle */:\n\t                suffix = (suffixOrSecurityContext);\n\t                break;\n\t            case 1 /* TypeElementAttribute */:\n\t            case 8 /* TypeProperty */:\n\t                securityContext = (suffixOrSecurityContext);\n\t                break;\n\t        }\n\t        bindingDefs[i] =\n\t            { flags: bindingFlags, ns: ns_1, name: name_1, nonMinifiedName: name_1, securityContext: securityContext, suffix: suffix };\n\t    }\n\t    outputs = outputs || [];\n\t    var /** @type {?} */ outputDefs = new Array(outputs.length);\n\t    for (var /** @type {?} */ i = 0; i < outputs.length; i++) {\n\t        var _e = outputs[i], target = _e[0], eventName = _e[1];\n\t        outputDefs[i] = {\n\t            type: 0 /* ElementOutput */,\n\t            target: /** @type {?} */ (target), eventName: eventName,\n\t            propName: null\n\t        };\n\t    }\n\t    fixedAttrs = fixedAttrs || [];\n\t    var /** @type {?} */ attrs = (fixedAttrs.map(function (_a) {\n\t        var namespaceAndName = _a[0], value = _a[1];\n\t        var _b = splitNamespace(namespaceAndName), ns = _b[0], name = _b[1];\n\t        return [ns, name, value];\n\t    }));\n\t    componentRendererType = resolveRendererType2(componentRendererType);\n\t    if (componentView) {\n\t        flags |= 33554432 /* ComponentView */;\n\t    }\n\t    flags |= 1 /* TypeElement */;\n\t    return {\n\t        // will bet set by the view definition\n\t        nodeIndex: -1,\n\t        parent: null,\n\t        renderParent: null,\n\t        bindingIndex: -1,\n\t        outputIndex: -1,\n\t        // regular values\n\t        checkIndex: checkIndex,\n\t        flags: flags,\n\t        childFlags: 0,\n\t        directChildFlags: 0,\n\t        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,\n\t        bindings: bindingDefs,\n\t        bindingFlags: calcBindingFlags(bindingDefs),\n\t        outputs: outputDefs,\n\t        element: {\n\t            ns: ns,\n\t            name: name,\n\t            attrs: attrs,\n\t            template: null,\n\t            // will bet set by the view definition\n\t            componentProvider: null,\n\t            componentView: componentView || null,\n\t            componentRendererType: componentRendererType,\n\t            publicProviders: null,\n\t            allProviders: null,\n\t            handleEvent: handleEvent || NOOP,\n\t        },\n\t        provider: null,\n\t        text: null,\n\t        query: null,\n\t        ngContent: null\n\t    };\n\t    var _b;\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} renderHost\n\t * @param {?} def\n\t * @return {?}\n\t */\n\tfunction createElement(view, renderHost, def) {\n\t    var /** @type {?} */ elDef = ((def.element));\n\t    var /** @type {?} */ rootSelectorOrNode = view.root.selectorOrNode;\n\t    var /** @type {?} */ renderer = view.renderer;\n\t    var /** @type {?} */ el;\n\t    if (view.parent || !rootSelectorOrNode) {\n\t        if (elDef.name) {\n\t            el = renderer.createElement(elDef.name, elDef.ns);\n\t        }\n\t        else {\n\t            el = renderer.createComment('');\n\t        }\n\t        var /** @type {?} */ parentEl = getParentRenderElement(view, renderHost, def);\n\t        if (parentEl) {\n\t            renderer.appendChild(parentEl, el);\n\t        }\n\t    }\n\t    else {\n\t        el = renderer.selectRootElement(rootSelectorOrNode);\n\t    }\n\t    if (elDef.attrs) {\n\t        for (var /** @type {?} */ i = 0; i < elDef.attrs.length; i++) {\n\t            var _a = elDef.attrs[i], ns = _a[0], name = _a[1], value = _a[2];\n\t            renderer.setAttribute(el, name, value, ns);\n\t        }\n\t    }\n\t    return el;\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} compView\n\t * @param {?} def\n\t * @param {?} el\n\t * @return {?}\n\t */\n\tfunction listenToElementOutputs(view, compView, def, el) {\n\t    for (var /** @type {?} */ i = 0; i < def.outputs.length; i++) {\n\t        var /** @type {?} */ output = def.outputs[i];\n\t        var /** @type {?} */ handleEventClosure = renderEventHandlerClosure(view, def.nodeIndex, elementEventFullName(output.target, output.eventName));\n\t        var /** @type {?} */ listenTarget = output.target;\n\t        var /** @type {?} */ listenerView = view;\n\t        if (output.target === 'component') {\n\t            listenTarget = null;\n\t            listenerView = compView;\n\t        }\n\t        var /** @type {?} */ disposable = (listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure)); /** @type {?} */\n\t        ((view.disposables))[def.outputIndex + i] = disposable;\n\t    }\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} index\n\t * @param {?} eventName\n\t * @return {?}\n\t */\n\tfunction renderEventHandlerClosure(view, index, eventName) {\n\t    return function (event) {\n\t        try {\n\t            return dispatchEvent(view, index, eventName, event);\n\t        }\n\t        catch (e) {\n\t            // Attention: Don't rethrow, to keep in sync with directive events.\n\t            view.root.errorHandler.handleError(e);\n\t        }\n\t    };\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} def\n\t * @param {?} v0\n\t * @param {?} v1\n\t * @param {?} v2\n\t * @param {?} v3\n\t * @param {?} v4\n\t * @param {?} v5\n\t * @param {?} v6\n\t * @param {?} v7\n\t * @param {?} v8\n\t * @param {?} v9\n\t * @return {?}\n\t */\n\tfunction checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n\t    var /** @type {?} */ bindLen = def.bindings.length;\n\t    var /** @type {?} */ changed = false;\n\t    if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0))\n\t        changed = true;\n\t    if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1))\n\t        changed = true;\n\t    if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2))\n\t        changed = true;\n\t    if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3))\n\t        changed = true;\n\t    if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4))\n\t        changed = true;\n\t    if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5))\n\t        changed = true;\n\t    if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6))\n\t        changed = true;\n\t    if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7))\n\t        changed = true;\n\t    if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8))\n\t        changed = true;\n\t    if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9))\n\t        changed = true;\n\t    return changed;\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} def\n\t * @param {?} values\n\t * @return {?}\n\t */\n\tfunction checkAndUpdateElementDynamic(view, def, values) {\n\t    var /** @type {?} */ changed = false;\n\t    for (var /** @type {?} */ i = 0; i < values.length; i++) {\n\t        if (checkAndUpdateElementValue(view, def, i, values[i]))\n\t            changed = true;\n\t    }\n\t    return changed;\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} def\n\t * @param {?} bindingIdx\n\t * @param {?} value\n\t * @return {?}\n\t */\n\tfunction checkAndUpdateElementValue(view, def, bindingIdx, value) {\n\t    if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {\n\t        return false;\n\t    }\n\t    var /** @type {?} */ binding = def.bindings[bindingIdx];\n\t    var /** @type {?} */ elData = asElementData(view, def.nodeIndex);\n\t    var /** @type {?} */ renderNode$$1 = elData.renderElement;\n\t    var /** @type {?} */ name = ((binding.name));\n\t    switch (binding.flags & 15 /* Types */) {\n\t        case 1 /* TypeElementAttribute */:\n\t            setElementAttribute(view, binding, renderNode$$1, binding.ns, name, value);\n\t            break;\n\t        case 2 /* TypeElementClass */:\n\t            setElementClass(view, renderNode$$1, name, value);\n\t            break;\n\t        case 4 /* TypeElementStyle */:\n\t            setElementStyle(view, binding, renderNode$$1, name, value);\n\t            break;\n\t        case 8 /* TypeProperty */:\n\t            var /** @type {?} */ bindView = (def.flags & 33554432 /* ComponentView */ &&\n\t                binding.flags & 32 /* SyntheticHostProperty */) ?\n\t                elData.componentView :\n\t                view;\n\t            setElementProperty(bindView, binding, renderNode$$1, name, value);\n\t            break;\n\t    }\n\t    return true;\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} binding\n\t * @param {?} renderNode\n\t * @param {?} ns\n\t * @param {?} name\n\t * @param {?} value\n\t * @return {?}\n\t */\n\tfunction setElementAttribute(view, binding, renderNode$$1, ns, name, value) {\n\t    var /** @type {?} */ securityContext = binding.securityContext;\n\t    var /** @type {?} */ renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\n\t    renderValue = renderValue != null ? renderValue.toString() : null;\n\t    var /** @type {?} */ renderer = view.renderer;\n\t    if (value != null) {\n\t        renderer.setAttribute(renderNode$$1, name, renderValue, ns);\n\t    }\n\t    else {\n\t        renderer.removeAttribute(renderNode$$1, name, ns);\n\t    }\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} renderNode\n\t * @param {?} name\n\t * @param {?} value\n\t * @return {?}\n\t */\n\tfunction setElementClass(view, renderNode$$1, name, value) {\n\t    var /** @type {?} */ renderer = view.renderer;\n\t    if (value) {\n\t        renderer.addClass(renderNode$$1, name);\n\t    }\n\t    else {\n\t        renderer.removeClass(renderNode$$1, name);\n\t    }\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} binding\n\t * @param {?} renderNode\n\t * @param {?} name\n\t * @param {?} value\n\t * @return {?}\n\t */\n\tfunction setElementStyle(view, binding, renderNode$$1, name, value) {\n\t    var /** @type {?} */ renderValue = view.root.sanitizer.sanitize(SecurityContext.STYLE, /** @type {?} */ (value));\n\t    if (renderValue != null) {\n\t        renderValue = renderValue.toString();\n\t        var /** @type {?} */ unit = binding.suffix;\n\t        if (unit != null) {\n\t            renderValue = renderValue + unit;\n\t        }\n\t    }\n\t    else {\n\t        renderValue = null;\n\t    }\n\t    var /** @type {?} */ renderer = view.renderer;\n\t    if (renderValue != null) {\n\t        renderer.setStyle(renderNode$$1, name, renderValue);\n\t    }\n\t    else {\n\t        renderer.removeStyle(renderNode$$1, name);\n\t    }\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} binding\n\t * @param {?} renderNode\n\t * @param {?} name\n\t * @param {?} value\n\t * @return {?}\n\t */\n\tfunction setElementProperty(view, binding, renderNode$$1, name, value) {\n\t    var /** @type {?} */ securityContext = binding.securityContext;\n\t    var /** @type {?} */ renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\n\t    view.renderer.setProperty(renderNode$$1, name, renderValue);\n\t}\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\tvar UNDEFINED_VALUE = new Object();\n\tvar InjectorRefTokenKey$1 = tokenKey(Injector);\n\tvar NgModuleRefTokenKey = tokenKey(NgModuleRef);\n\t/**\n\t * @param {?} flags\n\t * @param {?} token\n\t * @param {?} value\n\t * @param {?} deps\n\t * @return {?}\n\t */\n\tfunction moduleProvideDef(flags, token, value, deps) {\n\t    var /** @type {?} */ depDefs = splitDepsDsl(deps);\n\t    return {\n\t        // will bet set by the module definition\n\t        index: -1,\n\t        deps: depDefs, flags: flags, token: token, value: value\n\t    };\n\t}\n\t/**\n\t * @param {?} providers\n\t * @return {?}\n\t */\n\tfunction moduleDef(providers) {\n\t    var /** @type {?} */ providersByKey = {};\n\t    for (var /** @type {?} */ i = 0; i < providers.length; i++) {\n\t        var /** @type {?} */ provider = providers[i];\n\t        provider.index = i;\n\t        providersByKey[tokenKey(provider.token)] = provider;\n\t    }\n\t    return {\n\t        // Will be filled later...\n\t        factory: null,\n\t        providersByKey: providersByKey,\n\t        providers: providers\n\t    };\n\t}\n\t/**\n\t * @param {?} data\n\t * @return {?}\n\t */\n\tfunction initNgModule(data) {\n\t    var /** @type {?} */ def = data._def;\n\t    var /** @type {?} */ providers = data._providers = new Array(def.providers.length);\n\t    for (var /** @type {?} */ i = 0; i < def.providers.length; i++) {\n\t        var /** @type {?} */ provDef = def.providers[i];\n\t        if (!(provDef.flags & 4096 /* LazyProvider */)) {\n\t            providers[i] = _createProviderInstance$1(data, provDef);\n\t        }\n\t    }\n\t}\n\t/**\n\t * @param {?} data\n\t * @param {?} depDef\n\t * @param {?=} notFoundValue\n\t * @return {?}\n\t */\n\tfunction resolveNgModuleDep(data, depDef, notFoundValue) {\n\t    if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n\t    if (depDef.flags & 8 /* Value */) {\n\t        return depDef.token;\n\t    }\n\t    if (depDef.flags & 2 /* Optional */) {\n\t        notFoundValue = null;\n\t    }\n\t    if (depDef.flags & 1 /* SkipSelf */) {\n\t        return data._parent.get(depDef.token, notFoundValue);\n\t    }\n\t    var /** @type {?} */ tokenKey$$1 = depDef.tokenKey;\n\t    switch (tokenKey$$1) {\n\t        case InjectorRefTokenKey$1:\n\t        case NgModuleRefTokenKey:\n\t            return data;\n\t    }\n\t    var /** @type {?} */ providerDef = data._def.providersByKey[tokenKey$$1];\n\t    if (providerDef) {\n\t        var /** @type {?} */ providerInstance = data._providers[providerDef.index];\n\t        if (providerInstance === undefined) {\n\t            providerInstance = data._providers[providerDef.index] =\n\t                _createProviderInstance$1(data, providerDef);\n\t        }\n\t        return providerInstance === UNDEFINED_VALUE ? undefined : providerInstance;\n\t    }\n\t    return data._parent.get(depDef.token, notFoundValue);\n\t}\n\t/**\n\t * @param {?} ngModule\n\t * @param {?} providerDef\n\t * @return {?}\n\t */\n\tfunction _createProviderInstance$1(ngModule, providerDef) {\n\t    var /** @type {?} */ injectable;\n\t    switch (providerDef.flags & 201347067 /* Types */) {\n\t        case 512 /* TypeClassProvider */:\n\t            injectable = _createClass(ngModule, providerDef.value, providerDef.deps);\n\t            break;\n\t        case 1024 /* TypeFactoryProvider */:\n\t            injectable = _callFactory(ngModule, providerDef.value, providerDef.deps);\n\t            break;\n\t        case 2048 /* TypeUseExistingProvider */:\n\t            injectable = resolveNgModuleDep(ngModule, providerDef.deps[0]);\n\t            break;\n\t        case 256 /* TypeValueProvider */:\n\t            injectable = providerDef.value;\n\t            break;\n\t    }\n\t    return injectable === undefined ? UNDEFINED_VALUE : injectable;\n\t}\n\t/**\n\t * @param {?} ngModule\n\t * @param {?} ctor\n\t * @param {?} deps\n\t * @return {?}\n\t */\n\tfunction _createClass(ngModule, ctor, deps) {\n\t    var /** @type {?} */ len = deps.length;\n\t    switch (len) {\n\t        case 0:\n\t            return new ctor();\n\t        case 1:\n\t            return new ctor(resolveNgModuleDep(ngModule, deps[0]));\n\t        case 2:\n\t            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\n\t        case 3:\n\t            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\n\t        default:\n\t            var /** @type {?} */ depValues = new Array(len);\n\t            for (var /** @type {?} */ i = 0; i < len; i++) {\n\t                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\n\t            }\n\t            return new (ctor.bind.apply(ctor, [void 0].concat(depValues)))();\n\t    }\n\t}\n\t/**\n\t * @param {?} ngModule\n\t * @param {?} factory\n\t * @param {?} deps\n\t * @return {?}\n\t */\n\tfunction _callFactory(ngModule, factory, deps) {\n\t    var /** @type {?} */ len = deps.length;\n\t    switch (len) {\n\t        case 0:\n\t            return factory();\n\t        case 1:\n\t            return factory(resolveNgModuleDep(ngModule, deps[0]));\n\t        case 2:\n\t            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\n\t        case 3:\n\t            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\n\t        default:\n\t            var /** @type {?} */ depValues = Array(len);\n\t            for (var /** @type {?} */ i = 0; i < len; i++) {\n\t                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\n\t            }\n\t            return factory.apply(void 0, depValues);\n\t    }\n\t}\n\t/**\n\t * @param {?} ngModule\n\t * @param {?} lifecycles\n\t * @return {?}\n\t */\n\tfunction callNgModuleLifecycle(ngModule, lifecycles) {\n\t    var /** @type {?} */ def = ngModule._def;\n\t    for (var /** @type {?} */ i = 0; i < def.providers.length; i++) {\n\t        var /** @type {?} */ provDef = def.providers[i];\n\t        if (provDef.flags & 131072 /* OnDestroy */) {\n\t            var /** @type {?} */ instance = ngModule._providers[i];\n\t            if (instance && instance !== UNDEFINED_VALUE) {\n\t                instance.ngOnDestroy();\n\t            }\n\t        }\n\t    }\n\t}\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * @param {?} parentView\n\t * @param {?} elementData\n\t * @param {?} viewIndex\n\t * @param {?} view\n\t * @return {?}\n\t */\n\tfunction attachEmbeddedView(parentView, elementData, viewIndex, view) {\n\t    var /** @type {?} */ embeddedViews = ((elementData.viewContainer))._embeddedViews;\n\t    if (viewIndex === null || viewIndex === undefined) {\n\t        viewIndex = embeddedViews.length;\n\t    }\n\t    view.viewContainerParent = parentView;\n\t    addToArray(embeddedViews, /** @type {?} */ ((viewIndex)), view);\n\t    attachProjectedView(elementData, view);\n\t    Services.dirtyParentQueries(view);\n\t    var /** @type {?} */ prevView = ((viewIndex)) > 0 ? embeddedViews[((viewIndex)) - 1] : null;\n\t    renderAttachEmbeddedView(elementData, prevView, view);\n\t}\n\t/**\n\t * @param {?} vcElementData\n\t * @param {?} view\n\t * @return {?}\n\t */\n\tfunction attachProjectedView(vcElementData, view) {\n\t    var /** @type {?} */ dvcElementData = declaredViewContainer(view);\n\t    if (!dvcElementData || dvcElementData === vcElementData ||\n\t        view.state & 16 /* IsProjectedView */) {\n\t        return;\n\t    }\n\t    // Note: For performance reasons, we\n\t    // - add a view to template._projectedViews only 1x throughout its lifetime,\n\t    //   and remove it not until the view is destroyed.\n\t    //   (hard, as when a parent view is attached/detached we would need to attach/detach all\n\t    //    nested projected views as well, even accross component boundaries).\n\t    // - don't track the insertion order of views in the projected views array\n\t    //   (hard, as when the views of the same template are inserted different view containers)\n\t    view.state |= 16 /* IsProjectedView */;\n\t    var /** @type {?} */ projectedViews = dvcElementData.template._projectedViews;\n\t    if (!projectedViews) {\n\t        projectedViews = dvcElementData.template._projectedViews = [];\n\t    }\n\t    projectedViews.push(view);\n\t    // Note: we are changing the NodeDef here as we cannot calculate\n\t    // the fact whether a template is used for projection during compilation.\n\t    markNodeAsProjectedTemplate(/** @type {?} */ ((view.parent)).def, /** @type {?} */ ((view.parentNodeDef)));\n\t}\n\t/**\n\t * @param {?} viewDef\n\t * @param {?} nodeDef\n\t * @return {?}\n\t */\n\tfunction markNodeAsProjectedTemplate(viewDef, nodeDef) {\n\t    if (nodeDef.flags & 4 /* ProjectedTemplate */) {\n\t        return;\n\t    }\n\t    viewDef.nodeFlags |= 4 /* ProjectedTemplate */;\n\t    nodeDef.flags |= 4 /* ProjectedTemplate */;\n\t    var /** @type {?} */ parentNodeDef = nodeDef.parent;\n\t    while (parentNodeDef) {\n\t        parentNodeDef.childFlags |= 4 /* ProjectedTemplate */;\n\t        parentNodeDef = parentNodeDef.parent;\n\t    }\n\t}\n\t/**\n\t * @param {?} elementData\n\t * @param {?=} viewIndex\n\t * @return {?}\n\t */\n\tfunction detachEmbeddedView(elementData, viewIndex) {\n\t    var /** @type {?} */ embeddedViews = ((elementData.viewContainer))._embeddedViews;\n\t    if (viewIndex == null || viewIndex >= embeddedViews.length) {\n\t        viewIndex = embeddedViews.length - 1;\n\t    }\n\t    if (viewIndex < 0) {\n\t        return null;\n\t    }\n\t    var /** @type {?} */ view = embeddedViews[viewIndex];\n\t    view.viewContainerParent = null;\n\t    removeFromArray(embeddedViews, viewIndex);\n\t    // See attachProjectedView for why we don't update projectedViews here.\n\t    Services.dirtyParentQueries(view);\n\t    renderDetachView(view);\n\t    return view;\n\t}\n\t/**\n\t * @param {?} view\n\t * @return {?}\n\t */\n\tfunction detachProjectedView(view) {\n\t    if (!(view.state & 16 /* IsProjectedView */)) {\n\t        return;\n\t    }\n\t    var /** @type {?} */ dvcElementData = declaredViewContainer(view);\n\t    if (dvcElementData) {\n\t        var /** @type {?} */ projectedViews = dvcElementData.template._projectedViews;\n\t        if (projectedViews) {\n\t            removeFromArray(projectedViews, projectedViews.indexOf(view));\n\t            Services.dirtyParentQueries(view);\n\t        }\n\t    }\n\t}\n\t/**\n\t * @param {?} elementData\n\t * @param {?} oldViewIndex\n\t * @param {?} newViewIndex\n\t * @return {?}\n\t */\n\tfunction moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {\n\t    var /** @type {?} */ embeddedViews = ((elementData.viewContainer))._embeddedViews;\n\t    var /** @type {?} */ view = embeddedViews[oldViewIndex];\n\t    removeFromArray(embeddedViews, oldViewIndex);\n\t    if (newViewIndex == null) {\n\t        newViewIndex = embeddedViews.length;\n\t    }\n\t    addToArray(embeddedViews, newViewIndex, view);\n\t    // Note: Don't need to change projectedViews as the order in there\n\t    // as always invalid...\n\t    Services.dirtyParentQueries(view);\n\t    renderDetachView(view);\n\t    var /** @type {?} */ prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;\n\t    renderAttachEmbeddedView(elementData, prevView, view);\n\t    return view;\n\t}\n\t/**\n\t * @param {?} elementData\n\t * @param {?} prevView\n\t * @param {?} view\n\t * @return {?}\n\t */\n\tfunction renderAttachEmbeddedView(elementData, prevView, view) {\n\t    var /** @type {?} */ prevRenderNode = prevView ? renderNode(prevView, /** @type {?} */ ((prevView.def.lastRenderRootNode))) :\n\t        elementData.renderElement;\n\t    var /** @type {?} */ parentNode = view.renderer.parentNode(prevRenderNode);\n\t    var /** @type {?} */ nextSibling = view.renderer.nextSibling(prevRenderNode);\n\t    // Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!\n\t    // However, browsers automatically do `appendChild` when there is no `nextSibling`.\n\t    visitRootRenderNodes(view, 2 /* InsertBefore */, parentNode, nextSibling, undefined);\n\t}\n\t/**\n\t * @param {?} view\n\t * @return {?}\n\t */\n\tfunction renderDetachView(view) {\n\t    visitRootRenderNodes(view, 3 /* RemoveChild */, null, null, undefined);\n\t}\n\t/**\n\t * @param {?} arr\n\t * @param {?} index\n\t * @param {?} value\n\t * @return {?}\n\t */\n\tfunction addToArray(arr, index, value) {\n\t    // perf: array.push is faster than array.splice!\n\t    if (index >= arr.length) {\n\t        arr.push(value);\n\t    }\n\t    else {\n\t        arr.splice(index, 0, value);\n\t    }\n\t}\n\t/**\n\t * @param {?} arr\n\t * @param {?} index\n\t * @return {?}\n\t */\n\tfunction removeFromArray(arr, index) {\n\t    // perf: array.pop is faster than array.splice!\n\t    if (index >= arr.length - 1) {\n\t        arr.pop();\n\t    }\n\t    else {\n\t        arr.splice(index, 1);\n\t    }\n\t}\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\tvar EMPTY_CONTEXT = new Object();\n\t/**\n\t * @param {?} selector\n\t * @param {?} componentType\n\t * @param {?} viewDefFactory\n\t * @param {?} inputs\n\t * @param {?} outputs\n\t * @param {?} ngContentSelectors\n\t * @return {?}\n\t */\n\tfunction createComponentFactory(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors) {\n\t    return new ComponentFactory_(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors);\n\t}\n\t/**\n\t * @param {?} componentFactory\n\t * @return {?}\n\t */\n\tfunction getComponentViewDefinitionFactory(componentFactory) {\n\t    return ((componentFactory)).viewDefFactory;\n\t}\n\tvar ComponentFactory_ = (function (_super) {\n\t    __extends(ComponentFactory_, _super);\n\t    /**\n\t     * @param {?} selector\n\t     * @param {?} componentType\n\t     * @param {?} viewDefFactory\n\t     * @param {?} _inputs\n\t     * @param {?} _outputs\n\t     * @param {?} ngContentSelectors\n\t     */\n\t    function ComponentFactory_(selector, componentType, viewDefFactory, _inputs, _outputs, ngContentSelectors) {\n\t        var _this = \n\t        // Attention: this ctor is called as top level function.\n\t        // Putting any logic in here will destroy closure tree shaking!\n\t        _super.call(this) || this;\n\t        _this.selector = selector;\n\t        _this.componentType = componentType;\n\t        _this._inputs = _inputs;\n\t        _this._outputs = _outputs;\n\t        _this.ngContentSelectors = ngContentSelectors;\n\t        _this.viewDefFactory = viewDefFactory;\n\t        return _this;\n\t    }\n\t    Object.defineProperty(ComponentFactory_.prototype, \"inputs\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () {\n\t            var /** @type {?} */ inputsArr = [];\n\t            var /** @type {?} */ inputs = ((this._inputs));\n\t            for (var /** @type {?} */ propName in inputs) {\n\t                var /** @type {?} */ templateName = inputs[propName];\n\t                inputsArr.push({ propName: propName, templateName: templateName });\n\t            }\n\t            return inputsArr;\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(ComponentFactory_.prototype, \"outputs\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () {\n\t            var /** @type {?} */ outputsArr = [];\n\t            for (var /** @type {?} */ propName in this._outputs) {\n\t                var /** @type {?} */ templateName = this._outputs[propName];\n\t                outputsArr.push({ propName: propName, templateName: templateName });\n\t            }\n\t            return outputsArr;\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    /**\n\t     * Creates a new component.\n\t     * @param {?} injector\n\t     * @param {?=} projectableNodes\n\t     * @param {?=} rootSelectorOrNode\n\t     * @param {?=} ngModule\n\t     * @return {?}\n\t     */\n\t    ComponentFactory_.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\n\t        if (!ngModule) {\n\t            throw new Error('ngModule should be provided');\n\t        }\n\t        var /** @type {?} */ viewDef = resolveDefinition(this.viewDefFactory);\n\t        var /** @type {?} */ componentNodeIndex = ((((viewDef.nodes[0].element)).componentProvider)).nodeIndex;\n\t        var /** @type {?} */ view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, ngModule, EMPTY_CONTEXT);\n\t        var /** @type {?} */ component = asProviderData(view, componentNodeIndex).instance;\n\t        if (rootSelectorOrNode) {\n\t            view.renderer.setAttribute(asElementData(view, 0).renderElement, 'ng-version', VERSION.full);\n\t        }\n\t        return new ComponentRef_(view, new ViewRef_(view), component);\n\t    };\n\t    return ComponentFactory_;\n\t}(ComponentFactory));\n\tvar ComponentRef_ = (function (_super) {\n\t    __extends(ComponentRef_, _super);\n\t    /**\n\t     * @param {?} _view\n\t     * @param {?} _viewRef\n\t     * @param {?} _component\n\t     */\n\t    function ComponentRef_(_view, _viewRef, _component) {\n\t        var _this = _super.call(this) || this;\n\t        _this._view = _view;\n\t        _this._viewRef = _viewRef;\n\t        _this._component = _component;\n\t        _this._elDef = _this._view.def.nodes[0];\n\t        return _this;\n\t    }\n\t    Object.defineProperty(ComponentRef_.prototype, \"location\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () {\n\t            return new ElementRef(asElementData(this._view, this._elDef.nodeIndex).renderElement);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(ComponentRef_.prototype, \"injector\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return new Injector_(this._view, this._elDef); },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(ComponentRef_.prototype, \"instance\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this._component; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(ComponentRef_.prototype, \"hostView\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this._viewRef; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(ComponentRef_.prototype, \"changeDetectorRef\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this._viewRef; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(ComponentRef_.prototype, \"componentType\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return (this._component.constructor); },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    /**\n\t     * @return {?}\n\t     */\n\t    ComponentRef_.prototype.destroy = function () { this._viewRef.destroy(); };\n\t    /**\n\t     * @param {?} callback\n\t     * @return {?}\n\t     */\n\t    ComponentRef_.prototype.onDestroy = function (callback) { this._viewRef.onDestroy(callback); };\n\t    return ComponentRef_;\n\t}(ComponentRef));\n\t/**\n\t * @param {?} view\n\t * @param {?} elDef\n\t * @param {?} elData\n\t * @return {?}\n\t */\n\tfunction createViewContainerData(view, elDef, elData) {\n\t    return new ViewContainerRef_(view, elDef, elData);\n\t}\n\tvar ViewContainerRef_ = (function () {\n\t    /**\n\t     * @param {?} _view\n\t     * @param {?} _elDef\n\t     * @param {?} _data\n\t     */\n\t    function ViewContainerRef_(_view, _elDef, _data) {\n\t        this._view = _view;\n\t        this._elDef = _elDef;\n\t        this._data = _data;\n\t        /**\n\t         * \\@internal\n\t         */\n\t        this._embeddedViews = [];\n\t    }\n\t    Object.defineProperty(ViewContainerRef_.prototype, \"element\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return new ElementRef(this._data.renderElement); },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(ViewContainerRef_.prototype, \"injector\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return new Injector_(this._view, this._elDef); },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(ViewContainerRef_.prototype, \"parentInjector\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () {\n\t            var /** @type {?} */ view = this._view;\n\t            var /** @type {?} */ elDef = this._elDef.parent;\n\t            while (!elDef && view) {\n\t                elDef = viewParentEl(view);\n\t                view = ((view.parent));\n\t            }\n\t            return view ? new Injector_(view, elDef) : new Injector_(this._view, null);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    /**\n\t     * @return {?}\n\t     */\n\t    ViewContainerRef_.prototype.clear = function () {\n\t        var /** @type {?} */ len = this._embeddedViews.length;\n\t        for (var /** @type {?} */ i = len - 1; i >= 0; i--) {\n\t            var /** @type {?} */ view = ((detachEmbeddedView(this._data, i)));\n\t            Services.destroyView(view);\n\t        }\n\t    };\n\t    /**\n\t     * @param {?} index\n\t     * @return {?}\n\t     */\n\t    ViewContainerRef_.prototype.get = function (index) {\n\t        var /** @type {?} */ view = this._embeddedViews[index];\n\t        if (view) {\n\t            var /** @type {?} */ ref = new ViewRef_(view);\n\t            ref.attachToViewContainerRef(this);\n\t            return ref;\n\t        }\n\t        return null;\n\t    };\n\t    Object.defineProperty(ViewContainerRef_.prototype, \"length\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this._embeddedViews.length; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    /**\n\t     * @template C\n\t     * @param {?} templateRef\n\t     * @param {?=} context\n\t     * @param {?=} index\n\t     * @return {?}\n\t     */\n\t    ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, context, index) {\n\t        var /** @type {?} */ viewRef = templateRef.createEmbeddedView(context || ({}));\n\t        this.insert(viewRef, index);\n\t        return viewRef;\n\t    };\n\t    /**\n\t     * @template C\n\t     * @param {?} componentFactory\n\t     * @param {?=} index\n\t     * @param {?=} injector\n\t     * @param {?=} projectableNodes\n\t     * @param {?=} ngModuleRef\n\t     * @return {?}\n\t     */\n\t    ViewContainerRef_.prototype.createComponent = function (componentFactory, index, injector, projectableNodes, ngModuleRef) {\n\t        var /** @type {?} */ contextInjector = injector || this.parentInjector;\n\t        if (!ngModuleRef && !(componentFactory instanceof ComponentFactoryBoundToModule)) {\n\t            ngModuleRef = contextInjector.get(NgModuleRef);\n\t        }\n\t        var /** @type {?} */ componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\n\t        this.insert(componentRef.hostView, index);\n\t        return componentRef;\n\t    };\n\t    /**\n\t     * @param {?} viewRef\n\t     * @param {?=} index\n\t     * @return {?}\n\t     */\n\t    ViewContainerRef_.prototype.insert = function (viewRef, index) {\n\t        if (viewRef.destroyed) {\n\t            throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n\t        }\n\t        var /** @type {?} */ viewRef_ = (viewRef);\n\t        var /** @type {?} */ viewData = viewRef_._view;\n\t        attachEmbeddedView(this._view, this._data, index, viewData);\n\t        viewRef_.attachToViewContainerRef(this);\n\t        return viewRef;\n\t    };\n\t    /**\n\t     * @param {?} viewRef\n\t     * @param {?} currentIndex\n\t     * @return {?}\n\t     */\n\t    ViewContainerRef_.prototype.move = function (viewRef, currentIndex) {\n\t        if (viewRef.destroyed) {\n\t            throw new Error('Cannot move a destroyed View in a ViewContainer!');\n\t        }\n\t        var /** @type {?} */ previousIndex = this._embeddedViews.indexOf(viewRef._view);\n\t        moveEmbeddedView(this._data, previousIndex, currentIndex);\n\t        return viewRef;\n\t    };\n\t    /**\n\t     * @param {?} viewRef\n\t     * @return {?}\n\t     */\n\t    ViewContainerRef_.prototype.indexOf = function (viewRef) {\n\t        return this._embeddedViews.indexOf(((viewRef))._view);\n\t    };\n\t    /**\n\t     * @param {?=} index\n\t     * @return {?}\n\t     */\n\t    ViewContainerRef_.prototype.remove = function (index) {\n\t        var /** @type {?} */ viewData = detachEmbeddedView(this._data, index);\n\t        if (viewData) {\n\t            Services.destroyView(viewData);\n\t        }\n\t    };\n\t    /**\n\t     * @param {?=} index\n\t     * @return {?}\n\t     */\n\t    ViewContainerRef_.prototype.detach = function (index) {\n\t        var /** @type {?} */ view = detachEmbeddedView(this._data, index);\n\t        return view ? new ViewRef_(view) : null;\n\t    };\n\t    return ViewContainerRef_;\n\t}());\n\t/**\n\t * @param {?} view\n\t * @return {?}\n\t */\n\tfunction createChangeDetectorRef(view) {\n\t    return new ViewRef_(view);\n\t}\n\tvar ViewRef_ = (function () {\n\t    /**\n\t     * @param {?} _view\n\t     */\n\t    function ViewRef_(_view) {\n\t        this._view = _view;\n\t        this._viewContainerRef = null;\n\t        this._appRef = null;\n\t    }\n\t    Object.defineProperty(ViewRef_.prototype, \"rootNodes\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return rootRenderNodes(this._view); },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(ViewRef_.prototype, \"context\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this._view.context; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(ViewRef_.prototype, \"destroyed\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return (this._view.state & 128 /* Destroyed */) !== 0; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    /**\n\t     * @return {?}\n\t     */\n\t    ViewRef_.prototype.markForCheck = function () { markParentViewsForCheck(this._view); };\n\t    /**\n\t     * @return {?}\n\t     */\n\t    ViewRef_.prototype.detach = function () { this._view.state &= ~4 /* Attached */; };\n\t    /**\n\t     * @return {?}\n\t     */\n\t    ViewRef_.prototype.detectChanges = function () {\n\t        var /** @type {?} */ fs = this._view.root.rendererFactory;\n\t        if (fs.begin) {\n\t            fs.begin();\n\t        }\n\t        Services.checkAndUpdateView(this._view);\n\t        if (fs.end) {\n\t            fs.end();\n\t        }\n\t    };\n\t    /**\n\t     * @return {?}\n\t     */\n\t    ViewRef_.prototype.checkNoChanges = function () { Services.checkNoChangesView(this._view); };\n\t    /**\n\t     * @return {?}\n\t     */\n\t    ViewRef_.prototype.reattach = function () { this._view.state |= 4 /* Attached */; };\n\t    /**\n\t     * @param {?} callback\n\t     * @return {?}\n\t     */\n\t    ViewRef_.prototype.onDestroy = function (callback) {\n\t        if (!this._view.disposables) {\n\t            this._view.disposables = [];\n\t        }\n\t        this._view.disposables.push(/** @type {?} */ (callback));\n\t    };\n\t    /**\n\t     * @return {?}\n\t     */\n\t    ViewRef_.prototype.destroy = function () {\n\t        if (this._appRef) {\n\t            this._appRef.detachView(this);\n\t        }\n\t        else if (this._viewContainerRef) {\n\t            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));\n\t        }\n\t        Services.destroyView(this._view);\n\t    };\n\t    /**\n\t     * @return {?}\n\t     */\n\t    ViewRef_.prototype.detachFromAppRef = function () {\n\t        this._appRef = null;\n\t        renderDetachView(this._view);\n\t        Services.dirtyParentQueries(this._view);\n\t    };\n\t    /**\n\t     * @param {?} appRef\n\t     * @return {?}\n\t     */\n\t    ViewRef_.prototype.attachToAppRef = function (appRef) {\n\t        if (this._viewContainerRef) {\n\t            throw new Error('This view is already attached to a ViewContainer!');\n\t        }\n\t        this._appRef = appRef;\n\t    };\n\t    /**\n\t     * @param {?} vcRef\n\t     * @return {?}\n\t     */\n\t    ViewRef_.prototype.attachToViewContainerRef = function (vcRef) {\n\t        if (this._appRef) {\n\t            throw new Error('This view is already attached directly to the ApplicationRef!');\n\t        }\n\t        this._viewContainerRef = vcRef;\n\t    };\n\t    return ViewRef_;\n\t}());\n\t/**\n\t * @param {?} view\n\t * @param {?} def\n\t * @return {?}\n\t */\n\tfunction createTemplateData(view, def) {\n\t    return new TemplateRef_(view, def);\n\t}\n\tvar TemplateRef_ = (function (_super) {\n\t    __extends(TemplateRef_, _super);\n\t    /**\n\t     * @param {?} _parentView\n\t     * @param {?} _def\n\t     */\n\t    function TemplateRef_(_parentView, _def) {\n\t        var _this = _super.call(this) || this;\n\t        _this._parentView = _parentView;\n\t        _this._def = _def;\n\t        return _this;\n\t    }\n\t    /**\n\t     * @param {?} context\n\t     * @return {?}\n\t     */\n\t    TemplateRef_.prototype.createEmbeddedView = function (context) {\n\t        return new ViewRef_(Services.createEmbeddedView(this._parentView, this._def, /** @type {?} */ ((((this._def.element)).template)), context));\n\t    };\n\t    Object.defineProperty(TemplateRef_.prototype, \"elementRef\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () {\n\t            return new ElementRef(asElementData(this._parentView, this._def.nodeIndex).renderElement);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    return TemplateRef_;\n\t}(TemplateRef));\n\t/**\n\t * @param {?} view\n\t * @param {?} elDef\n\t * @return {?}\n\t */\n\tfunction createInjector(view, elDef) {\n\t    return new Injector_(view, elDef);\n\t}\n\tvar Injector_ = (function () {\n\t    /**\n\t     * @param {?} view\n\t     * @param {?} elDef\n\t     */\n\t    function Injector_(view, elDef) {\n\t        this.view = view;\n\t        this.elDef = elDef;\n\t    }\n\t    /**\n\t     * @param {?} token\n\t     * @param {?=} notFoundValue\n\t     * @return {?}\n\t     */\n\t    Injector_.prototype.get = function (token, notFoundValue) {\n\t        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n\t        var /** @type {?} */ allowPrivateServices = this.elDef ? (this.elDef.flags & 33554432 /* ComponentView */) !== 0 : false;\n\t        return Services.resolveDep(this.view, this.elDef, allowPrivateServices, { flags: 0 /* None */, token: token, tokenKey: tokenKey(token) }, notFoundValue);\n\t    };\n\t    return Injector_;\n\t}());\n\t/**\n\t * @param {?} view\n\t * @param {?} index\n\t * @return {?}\n\t */\n\tfunction nodeValue(view, index) {\n\t    var /** @type {?} */ def = view.def.nodes[index];\n\t    if (def.flags & 1 /* TypeElement */) {\n\t        var /** @type {?} */ elData = asElementData(view, def.nodeIndex);\n\t        return ((def.element)).template ? elData.template : elData.renderElement;\n\t    }\n\t    else if (def.flags & 2 /* TypeText */) {\n\t        return asTextData(view, def.nodeIndex).renderText;\n\t    }\n\t    else if (def.flags & (20224 /* CatProvider */ | 16 /* TypePipe */)) {\n\t        return asProviderData(view, def.nodeIndex).instance;\n\t    }\n\t    throw new Error(\"Illegal state: read nodeValue for node index \" + index);\n\t}\n\t/**\n\t * @param {?} view\n\t * @return {?}\n\t */\n\tfunction createRendererV1(view) {\n\t    return new RendererAdapter(view.renderer);\n\t}\n\tvar RendererAdapter = (function () {\n\t    /**\n\t     * @param {?} delegate\n\t     */\n\t    function RendererAdapter(delegate) {\n\t        this.delegate = delegate;\n\t    }\n\t    /**\n\t     * @param {?} selectorOrNode\n\t     * @return {?}\n\t     */\n\t    RendererAdapter.prototype.selectRootElement = function (selectorOrNode) {\n\t        return this.delegate.selectRootElement(selectorOrNode);\n\t    };\n\t    /**\n\t     * @param {?} parent\n\t     * @param {?} namespaceAndName\n\t     * @return {?}\n\t     */\n\t    RendererAdapter.prototype.createElement = function (parent, namespaceAndName) {\n\t        var _a = splitNamespace(namespaceAndName), ns = _a[0], name = _a[1];\n\t        var /** @type {?} */ el = this.delegate.createElement(name, ns);\n\t        if (parent) {\n\t            this.delegate.appendChild(parent, el);\n\t        }\n\t        return el;\n\t    };\n\t    /**\n\t     * @param {?} hostElement\n\t     * @return {?}\n\t     */\n\t    RendererAdapter.prototype.createViewRoot = function (hostElement) { return hostElement; };\n\t    /**\n\t     * @param {?} parentElement\n\t     * @return {?}\n\t     */\n\t    RendererAdapter.prototype.createTemplateAnchor = function (parentElement) {\n\t        var /** @type {?} */ comment = this.delegate.createComment('');\n\t        if (parentElement) {\n\t            this.delegate.appendChild(parentElement, comment);\n\t        }\n\t        return comment;\n\t    };\n\t    /**\n\t     * @param {?} parentElement\n\t     * @param {?} value\n\t     * @return {?}\n\t     */\n\t    RendererAdapter.prototype.createText = function (parentElement, value) {\n\t        var /** @type {?} */ node = this.delegate.createText(value);\n\t        if (parentElement) {\n\t            this.delegate.appendChild(parentElement, node);\n\t        }\n\t        return node;\n\t    };\n\t    /**\n\t     * @param {?} parentElement\n\t     * @param {?} nodes\n\t     * @return {?}\n\t     */\n\t    RendererAdapter.prototype.projectNodes = function (parentElement, nodes) {\n\t        for (var /** @type {?} */ i = 0; i < nodes.length; i++) {\n\t            this.delegate.appendChild(parentElement, nodes[i]);\n\t        }\n\t    };\n\t    /**\n\t     * @param {?} node\n\t     * @param {?} viewRootNodes\n\t     * @return {?}\n\t     */\n\t    RendererAdapter.prototype.attachViewAfter = function (node, viewRootNodes) {\n\t        var /** @type {?} */ parentElement = this.delegate.parentNode(node);\n\t        var /** @type {?} */ nextSibling = this.delegate.nextSibling(node);\n\t        for (var /** @type {?} */ i = 0; i < viewRootNodes.length; i++) {\n\t            this.delegate.insertBefore(parentElement, viewRootNodes[i], nextSibling);\n\t        }\n\t    };\n\t    /**\n\t     * @param {?} viewRootNodes\n\t     * @return {?}\n\t     */\n\t    RendererAdapter.prototype.detachView = function (viewRootNodes) {\n\t        for (var /** @type {?} */ i = 0; i < viewRootNodes.length; i++) {\n\t            var /** @type {?} */ node = viewRootNodes[i];\n\t            var /** @type {?} */ parentElement = this.delegate.parentNode(node);\n\t            this.delegate.removeChild(parentElement, node);\n\t        }\n\t    };\n\t    /**\n\t     * @param {?} hostElement\n\t     * @param {?} viewAllNodes\n\t     * @return {?}\n\t     */\n\t    RendererAdapter.prototype.destroyView = function (hostElement, viewAllNodes) {\n\t        for (var /** @type {?} */ i = 0; i < viewAllNodes.length; i++) {\n\t            ((this.delegate.destroyNode))(viewAllNodes[i]);\n\t        }\n\t    };\n\t    /**\n\t     * @param {?} renderElement\n\t     * @param {?} name\n\t     * @param {?} callback\n\t     * @return {?}\n\t     */\n\t    RendererAdapter.prototype.listen = function (renderElement, name, callback) {\n\t        return this.delegate.listen(renderElement, name, /** @type {?} */ (callback));\n\t    };\n\t    /**\n\t     * @param {?} target\n\t     * @param {?} name\n\t     * @param {?} callback\n\t     * @return {?}\n\t     */\n\t    RendererAdapter.prototype.listenGlobal = function (target, name, callback) {\n\t        return this.delegate.listen(target, name, /** @type {?} */ (callback));\n\t    };\n\t    /**\n\t     * @param {?} renderElement\n\t     * @param {?} propertyName\n\t     * @param {?} propertyValue\n\t     * @return {?}\n\t     */\n\t    RendererAdapter.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {\n\t        this.delegate.setProperty(renderElement, propertyName, propertyValue);\n\t    };\n\t    /**\n\t     * @param {?} renderElement\n\t     * @param {?} namespaceAndName\n\t     * @param {?} attributeValue\n\t     * @return {?}\n\t     */\n\t    RendererAdapter.prototype.setElementAttribute = function (renderElement, namespaceAndName, attributeValue) {\n\t        var _a = splitNamespace(namespaceAndName), ns = _a[0], name = _a[1];\n\t        if (attributeValue != null) {\n\t            this.delegate.setAttribute(renderElement, name, attributeValue, ns);\n\t        }\n\t        else {\n\t            this.delegate.removeAttribute(renderElement, name, ns);\n\t        }\n\t    };\n\t    /**\n\t     * @param {?} renderElement\n\t     * @param {?} propertyName\n\t     * @param {?} propertyValue\n\t     * @return {?}\n\t     */\n\t    RendererAdapter.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { };\n\t    /**\n\t     * @param {?} renderElement\n\t     * @param {?} className\n\t     * @param {?} isAdd\n\t     * @return {?}\n\t     */\n\t    RendererAdapter.prototype.setElementClass = function (renderElement, className, isAdd) {\n\t        if (isAdd) {\n\t            this.delegate.addClass(renderElement, className);\n\t        }\n\t        else {\n\t            this.delegate.removeClass(renderElement, className);\n\t        }\n\t    };\n\t    /**\n\t     * @param {?} renderElement\n\t     * @param {?} styleName\n\t     * @param {?} styleValue\n\t     * @return {?}\n\t     */\n\t    RendererAdapter.prototype.setElementStyle = function (renderElement, styleName, styleValue) {\n\t        if (styleValue != null) {\n\t            this.delegate.setStyle(renderElement, styleName, styleValue);\n\t        }\n\t        else {\n\t            this.delegate.removeStyle(renderElement, styleName);\n\t        }\n\t    };\n\t    /**\n\t     * @param {?} renderElement\n\t     * @param {?} methodName\n\t     * @param {?} args\n\t     * @return {?}\n\t     */\n\t    RendererAdapter.prototype.invokeElementMethod = function (renderElement, methodName, args) {\n\t        ((renderElement))[methodName].apply(renderElement, args);\n\t    };\n\t    /**\n\t     * @param {?} renderNode\n\t     * @param {?} text\n\t     * @return {?}\n\t     */\n\t    RendererAdapter.prototype.setText = function (renderNode$$1, text) { this.delegate.setValue(renderNode$$1, text); };\n\t    /**\n\t     * @return {?}\n\t     */\n\t    RendererAdapter.prototype.animate = function () { throw new Error('Renderer.animate is no longer supported!'); };\n\t    return RendererAdapter;\n\t}());\n\t/**\n\t * @param {?} moduleType\n\t * @param {?} parent\n\t * @param {?} bootstrapComponents\n\t * @param {?} def\n\t * @return {?}\n\t */\n\tfunction createNgModuleRef(moduleType, parent, bootstrapComponents, def) {\n\t    return new NgModuleRef_(moduleType, parent, bootstrapComponents, def);\n\t}\n\tvar NgModuleRef_ = (function () {\n\t    /**\n\t     * @param {?} _moduleType\n\t     * @param {?} _parent\n\t     * @param {?} _bootstrapComponents\n\t     * @param {?} _def\n\t     */\n\t    function NgModuleRef_(_moduleType, _parent, _bootstrapComponents, _def) {\n\t        this._moduleType = _moduleType;\n\t        this._parent = _parent;\n\t        this._bootstrapComponents = _bootstrapComponents;\n\t        this._def = _def;\n\t        this._destroyListeners = [];\n\t        this._destroyed = false;\n\t        initNgModule(this);\n\t    }\n\t    /**\n\t     * @param {?} token\n\t     * @param {?=} notFoundValue\n\t     * @return {?}\n\t     */\n\t    NgModuleRef_.prototype.get = function (token, notFoundValue) {\n\t        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n\t        return resolveNgModuleDep(this, { token: token, tokenKey: tokenKey(token), flags: 0 /* None */ }, notFoundValue);\n\t    };\n\t    Object.defineProperty(NgModuleRef_.prototype, \"instance\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this.get(this._moduleType); },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(NgModuleRef_.prototype, \"componentFactoryResolver\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this.get(ComponentFactoryResolver); },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(NgModuleRef_.prototype, \"injector\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    /**\n\t     * @return {?}\n\t     */\n\t    NgModuleRef_.prototype.destroy = function () {\n\t        if (this._destroyed) {\n\t            throw new Error(\"The ng module \" + stringify(this.instance.constructor) + \" has already been destroyed.\");\n\t        }\n\t        this._destroyed = true;\n\t        callNgModuleLifecycle(this, 131072 /* OnDestroy */);\n\t        this._destroyListeners.forEach(function (listener) { return listener(); });\n\t    };\n\t    /**\n\t     * @param {?} callback\n\t     * @return {?}\n\t     */\n\t    NgModuleRef_.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };\n\t    return NgModuleRef_;\n\t}());\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\tvar RendererV1TokenKey = tokenKey(Renderer);\n\tvar Renderer2TokenKey = tokenKey(Renderer2);\n\tvar ElementRefTokenKey = tokenKey(ElementRef);\n\tvar ViewContainerRefTokenKey = tokenKey(ViewContainerRef);\n\tvar TemplateRefTokenKey = tokenKey(TemplateRef);\n\tvar ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);\n\tvar InjectorRefTokenKey = tokenKey(Injector);\n\t/**\n\t * @param {?} checkIndex\n\t * @param {?} flags\n\t * @param {?} matchedQueries\n\t * @param {?} childCount\n\t * @param {?} ctor\n\t * @param {?} deps\n\t * @param {?=} props\n\t * @param {?=} outputs\n\t * @return {?}\n\t */\n\tfunction directiveDef(checkIndex, flags, matchedQueries, childCount, ctor, deps, props, outputs) {\n\t    var /** @type {?} */ bindings = [];\n\t    if (props) {\n\t        for (var /** @type {?} */ prop in props) {\n\t            var _a = props[prop], bindingIndex = _a[0], nonMinifiedName = _a[1];\n\t            bindings[bindingIndex] = {\n\t                flags: 8 /* TypeProperty */,\n\t                name: prop, nonMinifiedName: nonMinifiedName,\n\t                ns: null,\n\t                securityContext: null,\n\t                suffix: null\n\t            };\n\t        }\n\t    }\n\t    var /** @type {?} */ outputDefs = [];\n\t    if (outputs) {\n\t        for (var /** @type {?} */ propName in outputs) {\n\t            outputDefs.push({ type: 1 /* DirectiveOutput */, propName: propName, target: null, eventName: outputs[propName] });\n\t        }\n\t    }\n\t    flags |= 16384 /* TypeDirective */;\n\t    return _def(checkIndex, flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);\n\t}\n\t/**\n\t * @param {?} flags\n\t * @param {?} ctor\n\t * @param {?} deps\n\t * @return {?}\n\t */\n\tfunction pipeDef(flags, ctor, deps) {\n\t    flags |= 16 /* TypePipe */;\n\t    return _def(-1, flags, null, 0, ctor, ctor, deps);\n\t}\n\t/**\n\t * @param {?} flags\n\t * @param {?} matchedQueries\n\t * @param {?} token\n\t * @param {?} value\n\t * @param {?} deps\n\t * @return {?}\n\t */\n\tfunction providerDef(flags, matchedQueries, token, value, deps) {\n\t    return _def(-1, flags, matchedQueries, 0, token, value, deps);\n\t}\n\t/**\n\t * @param {?} checkIndex\n\t * @param {?} flags\n\t * @param {?} matchedQueriesDsl\n\t * @param {?} childCount\n\t * @param {?} token\n\t * @param {?} value\n\t * @param {?} deps\n\t * @param {?=} bindings\n\t * @param {?=} outputs\n\t * @return {?}\n\t */\n\tfunction _def(checkIndex, flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {\n\t    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;\n\t    if (!outputs) {\n\t        outputs = [];\n\t    }\n\t    if (!bindings) {\n\t        bindings = [];\n\t    }\n\t    var /** @type {?} */ depDefs = splitDepsDsl(deps);\n\t    return {\n\t        // will bet set by the view definition\n\t        nodeIndex: -1,\n\t        parent: null,\n\t        renderParent: null,\n\t        bindingIndex: -1,\n\t        outputIndex: -1,\n\t        // regular values\n\t        checkIndex: checkIndex,\n\t        flags: flags,\n\t        childFlags: 0,\n\t        directChildFlags: 0,\n\t        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references,\n\t        ngContentIndex: -1, childCount: childCount, bindings: bindings,\n\t        bindingFlags: calcBindingFlags(bindings), outputs: outputs,\n\t        element: null,\n\t        provider: { token: token, value: value, deps: depDefs },\n\t        text: null,\n\t        query: null,\n\t        ngContent: null\n\t    };\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} def\n\t * @return {?}\n\t */\n\tfunction createProviderInstance(view, def) {\n\t    return _createProviderInstance(view, def);\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} def\n\t * @return {?}\n\t */\n\tfunction createPipeInstance(view, def) {\n\t    // deps are looked up from component.\n\t    var /** @type {?} */ compView = view;\n\t    while (compView.parent && !isComponentView(compView)) {\n\t        compView = compView.parent;\n\t    }\n\t    // pipes can see the private services of the component\n\t    var /** @type {?} */ allowPrivateServices = true;\n\t    // pipes are always eager and classes!\n\t    return createClass(/** @type {?} */ ((compView.parent)), /** @type {?} */ ((viewParentEl(compView))), allowPrivateServices, /** @type {?} */ ((def.provider)).value, /** @type {?} */ ((def.provider)).deps);\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} def\n\t * @return {?}\n\t */\n\tfunction createDirectiveInstance(view, def) {\n\t    // components can see other private services, other directives can't.\n\t    var /** @type {?} */ allowPrivateServices = (def.flags & 32768 /* Component */) > 0;\n\t    // directives are always eager and classes!\n\t    var /** @type {?} */ instance = createClass(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((def.provider)).value, /** @type {?} */ ((def.provider)).deps);\n\t    if (def.outputs.length) {\n\t        for (var /** @type {?} */ i = 0; i < def.outputs.length; i++) {\n\t            var /** @type {?} */ output = def.outputs[i];\n\t            var /** @type {?} */ subscription = instance[((output.propName))].subscribe(eventHandlerClosure(view, /** @type {?} */ ((def.parent)).nodeIndex, output.eventName)); /** @type {?} */\n\t            ((view.disposables))[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);\n\t        }\n\t    }\n\t    return instance;\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} index\n\t * @param {?} eventName\n\t * @return {?}\n\t */\n\tfunction eventHandlerClosure(view, index, eventName) {\n\t    return function (event) {\n\t        try {\n\t            return dispatchEvent(view, index, eventName, event);\n\t        }\n\t        catch (e) {\n\t            // Attention: Don't rethrow, as it would cancel Observable subscriptions!\n\t            view.root.errorHandler.handleError(e);\n\t        }\n\t    };\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} def\n\t * @param {?} v0\n\t * @param {?} v1\n\t * @param {?} v2\n\t * @param {?} v3\n\t * @param {?} v4\n\t * @param {?} v5\n\t * @param {?} v6\n\t * @param {?} v7\n\t * @param {?} v8\n\t * @param {?} v9\n\t * @return {?}\n\t */\n\tfunction checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n\t    var /** @type {?} */ providerData = asProviderData(view, def.nodeIndex);\n\t    var /** @type {?} */ directive = providerData.instance;\n\t    var /** @type {?} */ changed = false;\n\t    var /** @type {?} */ changes = ((undefined));\n\t    var /** @type {?} */ bindLen = def.bindings.length;\n\t    if (bindLen > 0 && checkBinding(view, def, 0, v0)) {\n\t        changed = true;\n\t        changes = updateProp(view, providerData, def, 0, v0, changes);\n\t    }\n\t    if (bindLen > 1 && checkBinding(view, def, 1, v1)) {\n\t        changed = true;\n\t        changes = updateProp(view, providerData, def, 1, v1, changes);\n\t    }\n\t    if (bindLen > 2 && checkBinding(view, def, 2, v2)) {\n\t        changed = true;\n\t        changes = updateProp(view, providerData, def, 2, v2, changes);\n\t    }\n\t    if (bindLen > 3 && checkBinding(view, def, 3, v3)) {\n\t        changed = true;\n\t        changes = updateProp(view, providerData, def, 3, v3, changes);\n\t    }\n\t    if (bindLen > 4 && checkBinding(view, def, 4, v4)) {\n\t        changed = true;\n\t        changes = updateProp(view, providerData, def, 4, v4, changes);\n\t    }\n\t    if (bindLen > 5 && checkBinding(view, def, 5, v5)) {\n\t        changed = true;\n\t        changes = updateProp(view, providerData, def, 5, v5, changes);\n\t    }\n\t    if (bindLen > 6 && checkBinding(view, def, 6, v6)) {\n\t        changed = true;\n\t        changes = updateProp(view, providerData, def, 6, v6, changes);\n\t    }\n\t    if (bindLen > 7 && checkBinding(view, def, 7, v7)) {\n\t        changed = true;\n\t        changes = updateProp(view, providerData, def, 7, v7, changes);\n\t    }\n\t    if (bindLen > 8 && checkBinding(view, def, 8, v8)) {\n\t        changed = true;\n\t        changes = updateProp(view, providerData, def, 8, v8, changes);\n\t    }\n\t    if (bindLen > 9 && checkBinding(view, def, 9, v9)) {\n\t        changed = true;\n\t        changes = updateProp(view, providerData, def, 9, v9, changes);\n\t    }\n\t    if (changes) {\n\t        directive.ngOnChanges(changes);\n\t    }\n\t    if ((view.state & 2 /* FirstCheck */) && (def.flags & 65536 /* OnInit */)) {\n\t        directive.ngOnInit();\n\t    }\n\t    if (def.flags & 262144 /* DoCheck */) {\n\t        directive.ngDoCheck();\n\t    }\n\t    return changed;\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} def\n\t * @param {?} values\n\t * @return {?}\n\t */\n\tfunction checkAndUpdateDirectiveDynamic(view, def, values) {\n\t    var /** @type {?} */ providerData = asProviderData(view, def.nodeIndex);\n\t    var /** @type {?} */ directive = providerData.instance;\n\t    var /** @type {?} */ changed = false;\n\t    var /** @type {?} */ changes = ((undefined));\n\t    for (var /** @type {?} */ i = 0; i < values.length; i++) {\n\t        if (checkBinding(view, def, i, values[i])) {\n\t            changed = true;\n\t            changes = updateProp(view, providerData, def, i, values[i], changes);\n\t        }\n\t    }\n\t    if (changes) {\n\t        directive.ngOnChanges(changes);\n\t    }\n\t    if ((view.state & 2 /* FirstCheck */) && (def.flags & 65536 /* OnInit */)) {\n\t        directive.ngOnInit();\n\t    }\n\t    if (def.flags & 262144 /* DoCheck */) {\n\t        directive.ngDoCheck();\n\t    }\n\t    return changed;\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} def\n\t * @return {?}\n\t */\n\tfunction _createProviderInstance(view, def) {\n\t    // private services can see other private services\n\t    var /** @type {?} */ allowPrivateServices = (def.flags & 8192 /* PrivateProvider */) > 0;\n\t    var /** @type {?} */ providerDef = def.provider;\n\t    switch (def.flags & 201347067 /* Types */) {\n\t        case 512 /* TypeClassProvider */:\n\t            return createClass(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).value, /** @type {?} */ ((providerDef)).deps);\n\t        case 1024 /* TypeFactoryProvider */:\n\t            return callFactory(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).value, /** @type {?} */ ((providerDef)).deps);\n\t        case 2048 /* TypeUseExistingProvider */:\n\t            return resolveDep(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).deps[0]);\n\t        case 256 /* TypeValueProvider */:\n\t            return ((providerDef)).value;\n\t    }\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} elDef\n\t * @param {?} allowPrivateServices\n\t * @param {?} ctor\n\t * @param {?} deps\n\t * @return {?}\n\t */\n\tfunction createClass(view, elDef, allowPrivateServices, ctor, deps) {\n\t    var /** @type {?} */ len = deps.length;\n\t    switch (len) {\n\t        case 0:\n\t            return new ctor();\n\t        case 1:\n\t            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n\t        case 2:\n\t            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n\t        case 3:\n\t            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n\t        default:\n\t            var /** @type {?} */ depValues = new Array(len);\n\t            for (var /** @type {?} */ i = 0; i < len; i++) {\n\t                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n\t            }\n\t            return new (ctor.bind.apply(ctor, [void 0].concat(depValues)))();\n\t    }\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} elDef\n\t * @param {?} allowPrivateServices\n\t * @param {?} factory\n\t * @param {?} deps\n\t * @return {?}\n\t */\n\tfunction callFactory(view, elDef, allowPrivateServices, factory, deps) {\n\t    var /** @type {?} */ len = deps.length;\n\t    switch (len) {\n\t        case 0:\n\t            return factory();\n\t        case 1:\n\t            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n\t        case 2:\n\t            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n\t        case 3:\n\t            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n\t        default:\n\t            var /** @type {?} */ depValues = Array(len);\n\t            for (var /** @type {?} */ i = 0; i < len; i++) {\n\t                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n\t            }\n\t            return factory.apply(void 0, depValues);\n\t    }\n\t}\n\t// This default value is when checking the hierarchy for a token.\n\t//\n\t// It means both:\n\t// - the token is not provided by the current injector,\n\t// - only the element injectors should be checked (ie do not check module injectors\n\t//\n\t//          mod1\n\t//         /\n\t//       el1   mod2\n\t//         \\  /\n\t//         el2\n\t//\n\t// When requesting el2.injector.get(token), we should check in the following order and return the\n\t// first found value:\n\t// - el2.injector.get(token, default)\n\t// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module\n\t// - mod2.injector.get(token, default)\n\tvar NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\n\t/**\n\t * @param {?} view\n\t * @param {?} elDef\n\t * @param {?} allowPrivateServices\n\t * @param {?} depDef\n\t * @param {?=} notFoundValue\n\t * @return {?}\n\t */\n\tfunction resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue) {\n\t    if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n\t    if (depDef.flags & 8 /* Value */) {\n\t        return depDef.token;\n\t    }\n\t    var /** @type {?} */ startView = view;\n\t    if (depDef.flags & 2 /* Optional */) {\n\t        notFoundValue = null;\n\t    }\n\t    var /** @type {?} */ tokenKey$$1 = depDef.tokenKey;\n\t    if (tokenKey$$1 === ChangeDetectorRefTokenKey) {\n\t        // directives on the same element as a component should be able to control the change detector\n\t        // of that component as well.\n\t        allowPrivateServices = !!(elDef && ((elDef.element)).componentView);\n\t    }\n\t    if (elDef && (depDef.flags & 1 /* SkipSelf */)) {\n\t        allowPrivateServices = false;\n\t        elDef = ((elDef.parent));\n\t    }\n\t    while (view) {\n\t        if (elDef) {\n\t            switch (tokenKey$$1) {\n\t                case RendererV1TokenKey: {\n\t                    var /** @type {?} */ compView = findCompView(view, elDef, allowPrivateServices);\n\t                    return createRendererV1(compView);\n\t                }\n\t                case Renderer2TokenKey: {\n\t                    var /** @type {?} */ compView = findCompView(view, elDef, allowPrivateServices);\n\t                    return compView.renderer;\n\t                }\n\t                case ElementRefTokenKey:\n\t                    return new ElementRef(asElementData(view, elDef.nodeIndex).renderElement);\n\t                case ViewContainerRefTokenKey:\n\t                    return asElementData(view, elDef.nodeIndex).viewContainer;\n\t                case TemplateRefTokenKey: {\n\t                    if (((elDef.element)).template) {\n\t                        return asElementData(view, elDef.nodeIndex).template;\n\t                    }\n\t                    break;\n\t                }\n\t                case ChangeDetectorRefTokenKey: {\n\t                    var /** @type {?} */ cdView = findCompView(view, elDef, allowPrivateServices);\n\t                    return createChangeDetectorRef(cdView);\n\t                }\n\t                case InjectorRefTokenKey:\n\t                    return createInjector(view, elDef);\n\t                default:\n\t                    var /** @type {?} */ providerDef_1 = (((allowPrivateServices ? ((elDef.element)).allProviders : ((elDef.element)).publicProviders)))[tokenKey$$1];\n\t                    if (providerDef_1) {\n\t                        var /** @type {?} */ providerData = asProviderData(view, providerDef_1.nodeIndex);\n\t                        if (!providerData) {\n\t                            providerData = { instance: _createProviderInstance(view, providerDef_1) };\n\t                            view.nodes[providerDef_1.nodeIndex] = (providerData);\n\t                        }\n\t                        return providerData.instance;\n\t                    }\n\t            }\n\t        }\n\t        allowPrivateServices = isComponentView(view);\n\t        elDef = ((viewParentEl(view)));\n\t        view = ((view.parent));\n\t    }\n\t    var /** @type {?} */ value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);\n\t    if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\n\t        notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n\t        // Return the value from the root element injector when\n\t        // - it provides it\n\t        //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n\t        // - the module injector should not be checked\n\t        //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n\t        return value;\n\t    }\n\t    return startView.root.ngModule.injector.get(depDef.token, notFoundValue);\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} elDef\n\t * @param {?} allowPrivateServices\n\t * @return {?}\n\t */\n\tfunction findCompView(view, elDef, allowPrivateServices) {\n\t    var /** @type {?} */ compView;\n\t    if (allowPrivateServices) {\n\t        compView = asElementData(view, elDef.nodeIndex).componentView;\n\t    }\n\t    else {\n\t        compView = view;\n\t        while (compView.parent && !isComponentView(compView)) {\n\t            compView = compView.parent;\n\t        }\n\t    }\n\t    return compView;\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} providerData\n\t * @param {?} def\n\t * @param {?} bindingIdx\n\t * @param {?} value\n\t * @param {?} changes\n\t * @return {?}\n\t */\n\tfunction updateProp(view, providerData, def, bindingIdx, value, changes) {\n\t    if (def.flags & 32768 /* Component */) {\n\t        var /** @type {?} */ compView = asElementData(view, /** @type {?} */ ((def.parent)).nodeIndex).componentView;\n\t        if (compView.def.flags & 2 /* OnPush */) {\n\t            compView.state |= 8 /* ChecksEnabled */;\n\t        }\n\t    }\n\t    var /** @type {?} */ binding = def.bindings[bindingIdx];\n\t    var /** @type {?} */ propName = ((binding.name));\n\t    // Note: This is still safe with Closure Compiler as\n\t    // the user passed in the property name as an object has to `providerDef`,\n\t    // so Closure Compiler will have renamed the property correctly already.\n\t    providerData.instance[propName] = value;\n\t    if (def.flags & 524288 /* OnChanges */) {\n\t        changes = changes || {};\n\t        var /** @type {?} */ oldValue = view.oldValues[def.bindingIndex + bindingIdx];\n\t        if (oldValue instanceof WrappedValue) {\n\t            oldValue = oldValue.wrapped;\n\t        }\n\t        var /** @type {?} */ binding_1 = def.bindings[bindingIdx];\n\t        changes[((binding_1.nonMinifiedName))] =\n\t            new SimpleChange(oldValue, value, (view.state & 2 /* FirstCheck */) !== 0);\n\t    }\n\t    view.oldValues[def.bindingIndex + bindingIdx] = value;\n\t    return changes;\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} lifecycles\n\t * @return {?}\n\t */\n\tfunction callLifecycleHooksChildrenFirst(view, lifecycles) {\n\t    if (!(view.def.nodeFlags & lifecycles)) {\n\t        return;\n\t    }\n\t    var /** @type {?} */ nodes = view.def.nodes;\n\t    for (var /** @type {?} */ i = 0; i < nodes.length; i++) {\n\t        var /** @type {?} */ nodeDef = nodes[i];\n\t        var /** @type {?} */ parent = nodeDef.parent;\n\t        if (!parent && nodeDef.flags & lifecycles) {\n\t            // matching root node (e.g. a pipe)\n\t            callProviderLifecycles(view, i, nodeDef.flags & lifecycles);\n\t        }\n\t        if ((nodeDef.childFlags & lifecycles) === 0) {\n\t            // no child matches one of the lifecycles\n\t            i += nodeDef.childCount;\n\t        }\n\t        while (parent && (parent.flags & 1 /* TypeElement */) &&\n\t            i === parent.nodeIndex + parent.childCount) {\n\t            // last child of an element\n\t            if (parent.directChildFlags & lifecycles) {\n\t                callElementProvidersLifecycles(view, parent, lifecycles);\n\t            }\n\t            parent = parent.parent;\n\t        }\n\t    }\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} elDef\n\t * @param {?} lifecycles\n\t * @return {?}\n\t */\n\tfunction callElementProvidersLifecycles(view, elDef, lifecycles) {\n\t    for (var /** @type {?} */ i = elDef.nodeIndex + 1; i <= elDef.nodeIndex + elDef.childCount; i++) {\n\t        var /** @type {?} */ nodeDef = view.def.nodes[i];\n\t        if (nodeDef.flags & lifecycles) {\n\t            callProviderLifecycles(view, i, nodeDef.flags & lifecycles);\n\t        }\n\t        // only visit direct children\n\t        i += nodeDef.childCount;\n\t    }\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} index\n\t * @param {?} lifecycles\n\t * @return {?}\n\t */\n\tfunction callProviderLifecycles(view, index, lifecycles) {\n\t    var /** @type {?} */ providerData = asProviderData(view, index);\n\t    if (!providerData) {\n\t        return;\n\t    }\n\t    var /** @type {?} */ provider = providerData.instance;\n\t    if (!provider) {\n\t        return;\n\t    }\n\t    Services.setCurrentNode(view, index);\n\t    if (lifecycles & 1048576 /* AfterContentInit */) {\n\t        provider.ngAfterContentInit();\n\t    }\n\t    if (lifecycles & 2097152 /* AfterContentChecked */) {\n\t        provider.ngAfterContentChecked();\n\t    }\n\t    if (lifecycles & 4194304 /* AfterViewInit */) {\n\t        provider.ngAfterViewInit();\n\t    }\n\t    if (lifecycles & 8388608 /* AfterViewChecked */) {\n\t        provider.ngAfterViewChecked();\n\t    }\n\t    if (lifecycles & 131072 /* OnDestroy */) {\n\t        provider.ngOnDestroy();\n\t    }\n\t}\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * @param {?} flags\n\t * @param {?} id\n\t * @param {?} bindings\n\t * @return {?}\n\t */\n\tfunction queryDef(flags, id, bindings) {\n\t    var /** @type {?} */ bindingDefs = [];\n\t    for (var /** @type {?} */ propName in bindings) {\n\t        var /** @type {?} */ bindingType = bindings[propName];\n\t        bindingDefs.push({ propName: propName, bindingType: bindingType });\n\t    }\n\t    return {\n\t        // will bet set by the view definition\n\t        nodeIndex: -1,\n\t        parent: null,\n\t        renderParent: null,\n\t        bindingIndex: -1,\n\t        outputIndex: -1,\n\t        // regular values\n\t        // TODO(vicb): check\n\t        checkIndex: -1, flags: flags,\n\t        childFlags: 0,\n\t        directChildFlags: 0,\n\t        childMatchedQueries: 0,\n\t        ngContentIndex: -1,\n\t        matchedQueries: {},\n\t        matchedQueryIds: 0,\n\t        references: {},\n\t        childCount: 0,\n\t        bindings: [],\n\t        bindingFlags: 0,\n\t        outputs: [],\n\t        element: null,\n\t        provider: null,\n\t        text: null,\n\t        query: { id: id, filterId: filterQueryId(id), bindings: bindingDefs },\n\t        ngContent: null\n\t    };\n\t}\n\t/**\n\t * @return {?}\n\t */\n\tfunction createQuery() {\n\t    return new QueryList();\n\t}\n\t/**\n\t * @param {?} view\n\t * @return {?}\n\t */\n\tfunction dirtyParentQueries(view) {\n\t    var /** @type {?} */ queryIds = view.def.nodeMatchedQueries;\n\t    while (view.parent && isEmbeddedView(view)) {\n\t        var /** @type {?} */ tplDef = ((view.parentNodeDef));\n\t        view = view.parent;\n\t        // content queries\n\t        var /** @type {?} */ end = tplDef.nodeIndex + tplDef.childCount;\n\t        for (var /** @type {?} */ i = 0; i <= end; i++) {\n\t            var /** @type {?} */ nodeDef = view.def.nodes[i];\n\t            if ((nodeDef.flags & 67108864 /* TypeContentQuery */) &&\n\t                (nodeDef.flags & 536870912 /* DynamicQuery */) &&\n\t                (((nodeDef.query)).filterId & queryIds) === ((nodeDef.query)).filterId) {\n\t                asQueryList(view, i).setDirty();\n\t            }\n\t            if ((nodeDef.flags & 1 /* TypeElement */ && i + nodeDef.childCount < tplDef.nodeIndex) ||\n\t                !(nodeDef.childFlags & 67108864 /* TypeContentQuery */) ||\n\t                !(nodeDef.childFlags & 536870912 /* DynamicQuery */)) {\n\t                // skip elements that don't contain the template element or no query.\n\t                i += nodeDef.childCount;\n\t            }\n\t        }\n\t    }\n\t    // view queries\n\t    if (view.def.nodeFlags & 134217728 /* TypeViewQuery */) {\n\t        for (var /** @type {?} */ i = 0; i < view.def.nodes.length; i++) {\n\t            var /** @type {?} */ nodeDef = view.def.nodes[i];\n\t            if ((nodeDef.flags & 134217728 /* TypeViewQuery */) && (nodeDef.flags & 536870912 /* DynamicQuery */)) {\n\t                asQueryList(view, i).setDirty();\n\t            }\n\t            // only visit the root nodes\n\t            i += nodeDef.childCount;\n\t        }\n\t    }\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} nodeDef\n\t * @return {?}\n\t */\n\tfunction checkAndUpdateQuery(view, nodeDef) {\n\t    var /** @type {?} */ queryList = asQueryList(view, nodeDef.nodeIndex);\n\t    if (!queryList.dirty) {\n\t        return;\n\t    }\n\t    var /** @type {?} */ directiveInstance;\n\t    var /** @type {?} */ newValues = ((undefined));\n\t    if (nodeDef.flags & 67108864 /* TypeContentQuery */) {\n\t        var /** @type {?} */ elementDef_1 = ((((nodeDef.parent)).parent));\n\t        newValues = calcQueryValues(view, elementDef_1.nodeIndex, elementDef_1.nodeIndex + elementDef_1.childCount, /** @type {?} */ ((nodeDef.query)), []);\n\t        directiveInstance = asProviderData(view, /** @type {?} */ ((nodeDef.parent)).nodeIndex).instance;\n\t    }\n\t    else if (nodeDef.flags & 134217728 /* TypeViewQuery */) {\n\t        newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, /** @type {?} */ ((nodeDef.query)), []);\n\t        directiveInstance = view.component;\n\t    }\n\t    queryList.reset(newValues);\n\t    var /** @type {?} */ bindings = ((nodeDef.query)).bindings;\n\t    var /** @type {?} */ notify = false;\n\t    for (var /** @type {?} */ i = 0; i < bindings.length; i++) {\n\t        var /** @type {?} */ binding = bindings[i];\n\t        var /** @type {?} */ boundValue = void 0;\n\t        switch (binding.bindingType) {\n\t            case 0 /* First */:\n\t                boundValue = queryList.first;\n\t                break;\n\t            case 1 /* All */:\n\t                boundValue = queryList;\n\t                notify = true;\n\t                break;\n\t        }\n\t        directiveInstance[binding.propName] = boundValue;\n\t    }\n\t    if (notify) {\n\t        queryList.notifyOnChanges();\n\t    }\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} startIndex\n\t * @param {?} endIndex\n\t * @param {?} queryDef\n\t * @param {?} values\n\t * @return {?}\n\t */\n\tfunction calcQueryValues(view, startIndex, endIndex, queryDef, values) {\n\t    for (var /** @type {?} */ i = startIndex; i <= endIndex; i++) {\n\t        var /** @type {?} */ nodeDef = view.def.nodes[i];\n\t        var /** @type {?} */ valueType = nodeDef.matchedQueries[queryDef.id];\n\t        if (valueType != null) {\n\t            values.push(getQueryValue(view, nodeDef, valueType));\n\t        }\n\t        if (nodeDef.flags & 1 /* TypeElement */ && ((nodeDef.element)).template &&\n\t            (((((nodeDef.element)).template)).nodeMatchedQueries & queryDef.filterId) ===\n\t                queryDef.filterId) {\n\t            var /** @type {?} */ elementData = asElementData(view, i);\n\t            // check embedded views that were attached at the place of their template,\n\t            // but process child nodes first if some match the query (see issue #16568)\n\t            if ((nodeDef.childMatchedQueries & queryDef.filterId) === queryDef.filterId) {\n\t                calcQueryValues(view, i + 1, i + nodeDef.childCount, queryDef, values);\n\t                i += nodeDef.childCount;\n\t            }\n\t            if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n\t                var /** @type {?} */ embeddedViews = ((elementData.viewContainer))._embeddedViews;\n\t                for (var /** @type {?} */ k = 0; k < embeddedViews.length; k++) {\n\t                    var /** @type {?} */ embeddedView = embeddedViews[k];\n\t                    var /** @type {?} */ dvc = declaredViewContainer(embeddedView);\n\t                    if (dvc && dvc === elementData) {\n\t                        calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);\n\t                    }\n\t                }\n\t            }\n\t            var /** @type {?} */ projectedViews = elementData.template._projectedViews;\n\t            if (projectedViews) {\n\t                for (var /** @type {?} */ k = 0; k < projectedViews.length; k++) {\n\t                    var /** @type {?} */ projectedView = projectedViews[k];\n\t                    calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);\n\t                }\n\t            }\n\t        }\n\t        if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {\n\t            // if no child matches the query, skip the children.\n\t            i += nodeDef.childCount;\n\t        }\n\t    }\n\t    return values;\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} nodeDef\n\t * @param {?} queryValueType\n\t * @return {?}\n\t */\n\tfunction getQueryValue(view, nodeDef, queryValueType) {\n\t    if (queryValueType != null) {\n\t        // a match\n\t        switch (queryValueType) {\n\t            case 1 /* RenderElement */:\n\t                return asElementData(view, nodeDef.nodeIndex).renderElement;\n\t            case 0 /* ElementRef */:\n\t                return new ElementRef(asElementData(view, nodeDef.nodeIndex).renderElement);\n\t            case 2 /* TemplateRef */:\n\t                return asElementData(view, nodeDef.nodeIndex).template;\n\t            case 3 /* ViewContainerRef */:\n\t                return asElementData(view, nodeDef.nodeIndex).viewContainer;\n\t            case 4 /* Provider */:\n\t                return asProviderData(view, nodeDef.nodeIndex).instance;\n\t        }\n\t    }\n\t}\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * @param {?} ngContentIndex\n\t * @param {?} index\n\t * @return {?}\n\t */\n\tfunction ngContentDef(ngContentIndex, index) {\n\t    return {\n\t        // will bet set by the view definition\n\t        nodeIndex: -1,\n\t        parent: null,\n\t        renderParent: null,\n\t        bindingIndex: -1,\n\t        outputIndex: -1,\n\t        // regular values\n\t        checkIndex: -1,\n\t        flags: 8 /* TypeNgContent */,\n\t        childFlags: 0,\n\t        directChildFlags: 0,\n\t        childMatchedQueries: 0,\n\t        matchedQueries: {},\n\t        matchedQueryIds: 0,\n\t        references: {}, ngContentIndex: ngContentIndex,\n\t        childCount: 0,\n\t        bindings: [],\n\t        bindingFlags: 0,\n\t        outputs: [],\n\t        element: null,\n\t        provider: null,\n\t        text: null,\n\t        query: null,\n\t        ngContent: { index: index }\n\t    };\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} renderHost\n\t * @param {?} def\n\t * @return {?}\n\t */\n\tfunction appendNgContent(view, renderHost, def) {\n\t    var /** @type {?} */ parentEl = getParentRenderElement(view, renderHost, def);\n\t    if (!parentEl) {\n\t        // Nothing to do if there is no parent element.\n\t        return;\n\t    }\n\t    var /** @type {?} */ ngContentIndex = ((def.ngContent)).index;\n\t    visitProjectedRenderNodes(view, ngContentIndex, 1 /* AppendChild */, parentEl, null, undefined);\n\t}\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * @param {?} checkIndex\n\t * @param {?} argCount\n\t * @return {?}\n\t */\n\tfunction purePipeDef(checkIndex, argCount) {\n\t    // argCount + 1 to include the pipe as first arg\n\t    return _pureExpressionDef(128 /* TypePurePipe */, checkIndex, new Array(argCount + 1));\n\t}\n\t/**\n\t * @param {?} checkIndex\n\t * @param {?} argCount\n\t * @return {?}\n\t */\n\tfunction pureArrayDef(checkIndex, argCount) {\n\t    return _pureExpressionDef(32 /* TypePureArray */, checkIndex, new Array(argCount));\n\t}\n\t/**\n\t * @param {?} checkIndex\n\t * @param {?} propToIndex\n\t * @return {?}\n\t */\n\tfunction pureObjectDef(checkIndex, propToIndex) {\n\t    var /** @type {?} */ keys = Object.keys(propToIndex);\n\t    var /** @type {?} */ nbKeys = keys.length;\n\t    var /** @type {?} */ propertyNames = new Array(nbKeys);\n\t    for (var /** @type {?} */ i = 0; i < nbKeys; i++) {\n\t        var /** @type {?} */ key = keys[i];\n\t        var /** @type {?} */ index = propToIndex[key];\n\t        propertyNames[index] = key;\n\t    }\n\t    return _pureExpressionDef(64 /* TypePureObject */, checkIndex, propertyNames);\n\t}\n\t/**\n\t * @param {?} flags\n\t * @param {?} checkIndex\n\t * @param {?} propertyNames\n\t * @return {?}\n\t */\n\tfunction _pureExpressionDef(flags, checkIndex, propertyNames) {\n\t    var /** @type {?} */ bindings = new Array(propertyNames.length);\n\t    for (var /** @type {?} */ i = 0; i < propertyNames.length; i++) {\n\t        var /** @type {?} */ prop = propertyNames[i];\n\t        bindings[i] = {\n\t            flags: 8 /* TypeProperty */,\n\t            name: prop,\n\t            ns: null,\n\t            nonMinifiedName: prop,\n\t            securityContext: null,\n\t            suffix: null\n\t        };\n\t    }\n\t    return {\n\t        // will bet set by the view definition\n\t        nodeIndex: -1,\n\t        parent: null,\n\t        renderParent: null,\n\t        bindingIndex: -1,\n\t        outputIndex: -1,\n\t        // regular values\n\t        checkIndex: checkIndex,\n\t        flags: flags,\n\t        childFlags: 0,\n\t        directChildFlags: 0,\n\t        childMatchedQueries: 0,\n\t        matchedQueries: {},\n\t        matchedQueryIds: 0,\n\t        references: {},\n\t        ngContentIndex: -1,\n\t        childCount: 0, bindings: bindings,\n\t        bindingFlags: calcBindingFlags(bindings),\n\t        outputs: [],\n\t        element: null,\n\t        provider: null,\n\t        text: null,\n\t        query: null,\n\t        ngContent: null\n\t    };\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} def\n\t * @return {?}\n\t */\n\tfunction createPureExpression(view, def) {\n\t    return { value: undefined };\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} def\n\t * @param {?} v0\n\t * @param {?} v1\n\t * @param {?} v2\n\t * @param {?} v3\n\t * @param {?} v4\n\t * @param {?} v5\n\t * @param {?} v6\n\t * @param {?} v7\n\t * @param {?} v8\n\t * @param {?} v9\n\t * @return {?}\n\t */\n\tfunction checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n\t    var /** @type {?} */ bindings = def.bindings;\n\t    var /** @type {?} */ changed = false;\n\t    var /** @type {?} */ bindLen = bindings.length;\n\t    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))\n\t        changed = true;\n\t    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))\n\t        changed = true;\n\t    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))\n\t        changed = true;\n\t    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))\n\t        changed = true;\n\t    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))\n\t        changed = true;\n\t    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))\n\t        changed = true;\n\t    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))\n\t        changed = true;\n\t    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))\n\t        changed = true;\n\t    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))\n\t        changed = true;\n\t    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))\n\t        changed = true;\n\t    if (changed) {\n\t        var /** @type {?} */ data = asPureExpressionData(view, def.nodeIndex);\n\t        var /** @type {?} */ value = void 0;\n\t        switch (def.flags & 201347067 /* Types */) {\n\t            case 32 /* TypePureArray */:\n\t                value = new Array(bindings.length);\n\t                if (bindLen > 0)\n\t                    value[0] = v0;\n\t                if (bindLen > 1)\n\t                    value[1] = v1;\n\t                if (bindLen > 2)\n\t                    value[2] = v2;\n\t                if (bindLen > 3)\n\t                    value[3] = v3;\n\t                if (bindLen > 4)\n\t                    value[4] = v4;\n\t                if (bindLen > 5)\n\t                    value[5] = v5;\n\t                if (bindLen > 6)\n\t                    value[6] = v6;\n\t                if (bindLen > 7)\n\t                    value[7] = v7;\n\t                if (bindLen > 8)\n\t                    value[8] = v8;\n\t                if (bindLen > 9)\n\t                    value[9] = v9;\n\t                break;\n\t            case 64 /* TypePureObject */:\n\t                value = {};\n\t                if (bindLen > 0)\n\t                    value[((bindings[0].name))] = v0;\n\t                if (bindLen > 1)\n\t                    value[((bindings[1].name))] = v1;\n\t                if (bindLen > 2)\n\t                    value[((bindings[2].name))] = v2;\n\t                if (bindLen > 3)\n\t                    value[((bindings[3].name))] = v3;\n\t                if (bindLen > 4)\n\t                    value[((bindings[4].name))] = v4;\n\t                if (bindLen > 5)\n\t                    value[((bindings[5].name))] = v5;\n\t                if (bindLen > 6)\n\t                    value[((bindings[6].name))] = v6;\n\t                if (bindLen > 7)\n\t                    value[((bindings[7].name))] = v7;\n\t                if (bindLen > 8)\n\t                    value[((bindings[8].name))] = v8;\n\t                if (bindLen > 9)\n\t                    value[((bindings[9].name))] = v9;\n\t                break;\n\t            case 128 /* TypePurePipe */:\n\t                var /** @type {?} */ pipe = v0;\n\t                switch (bindLen) {\n\t                    case 1:\n\t                        value = pipe.transform(v0);\n\t                        break;\n\t                    case 2:\n\t                        value = pipe.transform(v1);\n\t                        break;\n\t                    case 3:\n\t                        value = pipe.transform(v1, v2);\n\t                        break;\n\t                    case 4:\n\t                        value = pipe.transform(v1, v2, v3);\n\t                        break;\n\t                    case 5:\n\t                        value = pipe.transform(v1, v2, v3, v4);\n\t                        break;\n\t                    case 6:\n\t                        value = pipe.transform(v1, v2, v3, v4, v5);\n\t                        break;\n\t                    case 7:\n\t                        value = pipe.transform(v1, v2, v3, v4, v5, v6);\n\t                        break;\n\t                    case 8:\n\t                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);\n\t                        break;\n\t                    case 9:\n\t                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);\n\t                        break;\n\t                    case 10:\n\t                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);\n\t                        break;\n\t                }\n\t                break;\n\t        }\n\t        data.value = value;\n\t    }\n\t    return changed;\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} def\n\t * @param {?} values\n\t * @return {?}\n\t */\n\tfunction checkAndUpdatePureExpressionDynamic(view, def, values) {\n\t    var /** @type {?} */ bindings = def.bindings;\n\t    var /** @type {?} */ changed = false;\n\t    for (var /** @type {?} */ i = 0; i < values.length; i++) {\n\t        // Note: We need to loop over all values, so that\n\t        // the old values are updates as well!\n\t        if (checkAndUpdateBinding(view, def, i, values[i])) {\n\t            changed = true;\n\t        }\n\t    }\n\t    if (changed) {\n\t        var /** @type {?} */ data = asPureExpressionData(view, def.nodeIndex);\n\t        var /** @type {?} */ value = void 0;\n\t        switch (def.flags & 201347067 /* Types */) {\n\t            case 32 /* TypePureArray */:\n\t                value = values;\n\t                break;\n\t            case 64 /* TypePureObject */:\n\t                value = {};\n\t                for (var /** @type {?} */ i = 0; i < values.length; i++) {\n\t                    value[((bindings[i].name))] = values[i];\n\t                }\n\t                break;\n\t            case 128 /* TypePurePipe */:\n\t                var /** @type {?} */ pipe = values[0];\n\t                var /** @type {?} */ params = values.slice(1);\n\t                value = pipe.transform.apply(pipe, params);\n\t                break;\n\t        }\n\t        data.value = value;\n\t    }\n\t    return changed;\n\t}\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * @param {?} checkIndex\n\t * @param {?} ngContentIndex\n\t * @param {?} staticText\n\t * @return {?}\n\t */\n\tfunction textDef(checkIndex, ngContentIndex, staticText) {\n\t    var /** @type {?} */ bindings = new Array(staticText.length - 1);\n\t    for (var /** @type {?} */ i = 1; i < staticText.length; i++) {\n\t        bindings[i - 1] = {\n\t            flags: 8 /* TypeProperty */,\n\t            name: null,\n\t            ns: null,\n\t            nonMinifiedName: null,\n\t            securityContext: null,\n\t            suffix: staticText[i],\n\t        };\n\t    }\n\t    return {\n\t        // will bet set by the view definition\n\t        nodeIndex: -1,\n\t        parent: null,\n\t        renderParent: null,\n\t        bindingIndex: -1,\n\t        outputIndex: -1,\n\t        // regular values\n\t        checkIndex: checkIndex,\n\t        flags: 2 /* TypeText */,\n\t        childFlags: 0,\n\t        directChildFlags: 0,\n\t        childMatchedQueries: 0,\n\t        matchedQueries: {},\n\t        matchedQueryIds: 0,\n\t        references: {}, ngContentIndex: ngContentIndex,\n\t        childCount: 0, bindings: bindings,\n\t        bindingFlags: 8 /* TypeProperty */,\n\t        outputs: [],\n\t        element: null,\n\t        provider: null,\n\t        text: { prefix: staticText[0] },\n\t        query: null,\n\t        ngContent: null,\n\t    };\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} renderHost\n\t * @param {?} def\n\t * @return {?}\n\t */\n\tfunction createText(view, renderHost, def) {\n\t    var /** @type {?} */ renderNode$$1;\n\t    var /** @type {?} */ renderer = view.renderer;\n\t    renderNode$$1 = renderer.createText(/** @type {?} */ ((def.text)).prefix);\n\t    var /** @type {?} */ parentEl = getParentRenderElement(view, renderHost, def);\n\t    if (parentEl) {\n\t        renderer.appendChild(parentEl, renderNode$$1);\n\t    }\n\t    return { renderText: renderNode$$1 };\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} def\n\t * @param {?} v0\n\t * @param {?} v1\n\t * @param {?} v2\n\t * @param {?} v3\n\t * @param {?} v4\n\t * @param {?} v5\n\t * @param {?} v6\n\t * @param {?} v7\n\t * @param {?} v8\n\t * @param {?} v9\n\t * @return {?}\n\t */\n\tfunction checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n\t    var /** @type {?} */ changed = false;\n\t    var /** @type {?} */ bindings = def.bindings;\n\t    var /** @type {?} */ bindLen = bindings.length;\n\t    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))\n\t        changed = true;\n\t    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))\n\t        changed = true;\n\t    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))\n\t        changed = true;\n\t    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))\n\t        changed = true;\n\t    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))\n\t        changed = true;\n\t    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))\n\t        changed = true;\n\t    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))\n\t        changed = true;\n\t    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))\n\t        changed = true;\n\t    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))\n\t        changed = true;\n\t    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))\n\t        changed = true;\n\t    if (changed) {\n\t        var /** @type {?} */ value = ((def.text)).prefix;\n\t        if (bindLen > 0)\n\t            value += _addInterpolationPart(v0, bindings[0]);\n\t        if (bindLen > 1)\n\t            value += _addInterpolationPart(v1, bindings[1]);\n\t        if (bindLen > 2)\n\t            value += _addInterpolationPart(v2, bindings[2]);\n\t        if (bindLen > 3)\n\t            value += _addInterpolationPart(v3, bindings[3]);\n\t        if (bindLen > 4)\n\t            value += _addInterpolationPart(v4, bindings[4]);\n\t        if (bindLen > 5)\n\t            value += _addInterpolationPart(v5, bindings[5]);\n\t        if (bindLen > 6)\n\t            value += _addInterpolationPart(v6, bindings[6]);\n\t        if (bindLen > 7)\n\t            value += _addInterpolationPart(v7, bindings[7]);\n\t        if (bindLen > 8)\n\t            value += _addInterpolationPart(v8, bindings[8]);\n\t        if (bindLen > 9)\n\t            value += _addInterpolationPart(v9, bindings[9]);\n\t        var /** @type {?} */ renderNode$$1 = asTextData(view, def.nodeIndex).renderText;\n\t        view.renderer.setValue(renderNode$$1, value);\n\t    }\n\t    return changed;\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} def\n\t * @param {?} values\n\t * @return {?}\n\t */\n\tfunction checkAndUpdateTextDynamic(view, def, values) {\n\t    var /** @type {?} */ bindings = def.bindings;\n\t    var /** @type {?} */ changed = false;\n\t    for (var /** @type {?} */ i = 0; i < values.length; i++) {\n\t        // Note: We need to loop over all values, so that\n\t        // the old values are updates as well!\n\t        if (checkAndUpdateBinding(view, def, i, values[i])) {\n\t            changed = true;\n\t        }\n\t    }\n\t    if (changed) {\n\t        var /** @type {?} */ value = '';\n\t        for (var /** @type {?} */ i = 0; i < values.length; i++) {\n\t            value = value + _addInterpolationPart(values[i], bindings[i]);\n\t        }\n\t        value = ((def.text)).prefix + value;\n\t        var /** @type {?} */ renderNode$$1 = asTextData(view, def.nodeIndex).renderText;\n\t        view.renderer.setValue(renderNode$$1, value);\n\t    }\n\t    return changed;\n\t}\n\t/**\n\t * @param {?} value\n\t * @param {?} binding\n\t * @return {?}\n\t */\n\tfunction _addInterpolationPart(value, binding) {\n\t    var /** @type {?} */ valueStr = value != null ? value.toString() : '';\n\t    return valueStr + binding.suffix;\n\t}\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * @param {?} flags\n\t * @param {?} nodes\n\t * @param {?=} updateDirectives\n\t * @param {?=} updateRenderer\n\t * @return {?}\n\t */\n\tfunction viewDef(flags, nodes, updateDirectives, updateRenderer) {\n\t    // clone nodes and set auto calculated values\n\t    var /** @type {?} */ viewBindingCount = 0;\n\t    var /** @type {?} */ viewDisposableCount = 0;\n\t    var /** @type {?} */ viewNodeFlags = 0;\n\t    var /** @type {?} */ viewRootNodeFlags = 0;\n\t    var /** @type {?} */ viewMatchedQueries = 0;\n\t    var /** @type {?} */ currentParent = null;\n\t    var /** @type {?} */ currentRenderParent = null;\n\t    var /** @type {?} */ currentElementHasPublicProviders = false;\n\t    var /** @type {?} */ currentElementHasPrivateProviders = false;\n\t    var /** @type {?} */ lastRenderRootNode = null;\n\t    for (var /** @type {?} */ i = 0; i < nodes.length; i++) {\n\t        var /** @type {?} */ node = nodes[i];\n\t        node.nodeIndex = i;\n\t        node.parent = currentParent;\n\t        node.bindingIndex = viewBindingCount;\n\t        node.outputIndex = viewDisposableCount;\n\t        node.renderParent = currentRenderParent;\n\t        viewNodeFlags |= node.flags;\n\t        viewMatchedQueries |= node.matchedQueryIds;\n\t        if (node.element) {\n\t            var /** @type {?} */ elDef = node.element;\n\t            elDef.publicProviders =\n\t                currentParent ? ((currentParent.element)).publicProviders : Object.create(null);\n\t            elDef.allProviders = elDef.publicProviders;\n\t            // Note: We assume that all providers of an element are before any child element!\n\t            currentElementHasPublicProviders = false;\n\t            currentElementHasPrivateProviders = false;\n\t            if (node.element.template) {\n\t                viewMatchedQueries |= node.element.template.nodeMatchedQueries;\n\t            }\n\t        }\n\t        validateNode(currentParent, node, nodes.length);\n\t        viewBindingCount += node.bindings.length;\n\t        viewDisposableCount += node.outputs.length;\n\t        if (!currentRenderParent && (node.flags & 3 /* CatRenderNode */)) {\n\t            lastRenderRootNode = node;\n\t        }\n\t        if (node.flags & 20224 /* CatProvider */) {\n\t            if (!currentElementHasPublicProviders) {\n\t                currentElementHasPublicProviders = true; /** @type {?} */\n\t                ((((\n\t                // Use prototypical inheritance to not get O(n^2) complexity...\n\t                currentParent)).element)).publicProviders =\n\t                    Object.create(/** @type {?} */ ((((currentParent)).element)).publicProviders); /** @type {?} */\n\t                ((((currentParent)).element)).allProviders = ((((currentParent)).element)).publicProviders;\n\t            }\n\t            var /** @type {?} */ isPrivateService = (node.flags & 8192 /* PrivateProvider */) !== 0;\n\t            var /** @type {?} */ isComponent = (node.flags & 32768 /* Component */) !== 0;\n\t            if (!isPrivateService || isComponent) {\n\t                ((((((currentParent)).element)).publicProviders))[tokenKey(/** @type {?} */ ((node.provider)).token)] = node;\n\t            }\n\t            else {\n\t                if (!currentElementHasPrivateProviders) {\n\t                    currentElementHasPrivateProviders = true; /** @type {?} */\n\t                    ((((\n\t                    // Use prototypical inheritance to not get O(n^2) complexity...\n\t                    currentParent)).element)).allProviders =\n\t                        Object.create(/** @type {?} */ ((((currentParent)).element)).publicProviders);\n\t                } /** @type {?} */\n\t                ((((((currentParent)).element)).allProviders))[tokenKey(/** @type {?} */ ((node.provider)).token)] = node;\n\t            }\n\t            if (isComponent) {\n\t                ((((currentParent)).element)).componentProvider = node;\n\t            }\n\t        }\n\t        if (currentParent) {\n\t            currentParent.childFlags |= node.flags;\n\t            currentParent.directChildFlags |= node.flags;\n\t            currentParent.childMatchedQueries |= node.matchedQueryIds;\n\t            if (node.element && node.element.template) {\n\t                currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;\n\t            }\n\t        }\n\t        else {\n\t            viewRootNodeFlags |= node.flags;\n\t        }\n\t        if (node.childCount > 0) {\n\t            currentParent = node;\n\t            if (!isNgContainer(node)) {\n\t                currentRenderParent = node;\n\t            }\n\t        }\n\t        else {\n\t            // When the current node has no children, check if it is the last children of its parent.\n\t            // When it is, propagate the flags up.\n\t            // The loop is required because an element could be the last transitive children of several\n\t            // elements. We loop to either the root or the highest opened element (= with remaining\n\t            // children)\n\t            while (currentParent && i === currentParent.nodeIndex + currentParent.childCount) {\n\t                var /** @type {?} */ newParent = currentParent.parent;\n\t                if (newParent) {\n\t                    newParent.childFlags |= currentParent.childFlags;\n\t                    newParent.childMatchedQueries |= currentParent.childMatchedQueries;\n\t                }\n\t                currentParent = newParent;\n\t                // We also need to update the render parent & account for ng-container\n\t                if (currentParent && isNgContainer(currentParent)) {\n\t                    currentRenderParent = currentParent.renderParent;\n\t                }\n\t                else {\n\t                    currentRenderParent = currentParent;\n\t                }\n\t            }\n\t        }\n\t    }\n\t    var /** @type {?} */ handleEvent = function (view, nodeIndex, eventName, event) { return ((((nodes[nodeIndex].element)).handleEvent))(view, eventName, event); };\n\t    return {\n\t        // Will be filled later...\n\t        factory: null,\n\t        nodeFlags: viewNodeFlags,\n\t        rootNodeFlags: viewRootNodeFlags,\n\t        nodeMatchedQueries: viewMatchedQueries, flags: flags,\n\t        nodes: nodes,\n\t        updateDirectives: updateDirectives || NOOP,\n\t        updateRenderer: updateRenderer || NOOP, handleEvent: handleEvent,\n\t        bindingCount: viewBindingCount,\n\t        outputCount: viewDisposableCount, lastRenderRootNode: lastRenderRootNode\n\t    };\n\t}\n\t/**\n\t * @param {?} node\n\t * @return {?}\n\t */\n\tfunction isNgContainer(node) {\n\t    return (node.flags & 1 /* TypeElement */) !== 0 && ((node.element)).name === null;\n\t}\n\t/**\n\t * @param {?} parent\n\t * @param {?} node\n\t * @param {?} nodeCount\n\t * @return {?}\n\t */\n\tfunction validateNode(parent, node, nodeCount) {\n\t    var /** @type {?} */ template = node.element && node.element.template;\n\t    if (template) {\n\t        if (!template.lastRenderRootNode) {\n\t            throw new Error(\"Illegal State: Embedded templates without nodes are not allowed!\");\n\t        }\n\t        if (template.lastRenderRootNode &&\n\t            template.lastRenderRootNode.flags & 16777216 /* EmbeddedViews */) {\n\t            throw new Error(\"Illegal State: Last root node of a template can't have embedded views, at index \" + node.nodeIndex + \"!\");\n\t        }\n\t    }\n\t    if (node.flags & 20224 /* CatProvider */) {\n\t        var /** @type {?} */ parentFlags = parent ? parent.flags : 0;\n\t        if ((parentFlags & 1 /* TypeElement */) === 0) {\n\t            throw new Error(\"Illegal State: StaticProvider/Directive nodes need to be children of elements or anchors, at index \" + node.nodeIndex + \"!\");\n\t        }\n\t    }\n\t    if (node.query) {\n\t        if (node.flags & 67108864 /* TypeContentQuery */ &&\n\t            (!parent || (parent.flags & 16384 /* TypeDirective */) === 0)) {\n\t            throw new Error(\"Illegal State: Content Query nodes need to be children of directives, at index \" + node.nodeIndex + \"!\");\n\t        }\n\t        if (node.flags & 134217728 /* TypeViewQuery */ && parent) {\n\t            throw new Error(\"Illegal State: View Query nodes have to be top level nodes, at index \" + node.nodeIndex + \"!\");\n\t        }\n\t    }\n\t    if (node.childCount) {\n\t        var /** @type {?} */ parentEnd = parent ? parent.nodeIndex + parent.childCount : nodeCount - 1;\n\t        if (node.nodeIndex <= parentEnd && node.nodeIndex + node.childCount > parentEnd) {\n\t            throw new Error(\"Illegal State: childCount of node leads outside of parent, at index \" + node.nodeIndex + \"!\");\n\t        }\n\t    }\n\t}\n\t/**\n\t * @param {?} parent\n\t * @param {?} anchorDef\n\t * @param {?} viewDef\n\t * @param {?=} context\n\t * @return {?}\n\t */\n\tfunction createEmbeddedView(parent, anchorDef$$1, viewDef, context) {\n\t    // embedded views are seen as siblings to the anchor, so we need\n\t    // to get the parent of the anchor and use it as parentIndex.\n\t    var /** @type {?} */ view = createView(parent.root, parent.renderer, parent, anchorDef$$1, viewDef);\n\t    initView(view, parent.component, context);\n\t    createViewNodes(view);\n\t    return view;\n\t}\n\t/**\n\t * @param {?} root\n\t * @param {?} def\n\t * @param {?=} context\n\t * @return {?}\n\t */\n\tfunction createRootView(root, def, context) {\n\t    var /** @type {?} */ view = createView(root, root.renderer, null, null, def);\n\t    initView(view, context, context);\n\t    createViewNodes(view);\n\t    return view;\n\t}\n\t/**\n\t * @param {?} parentView\n\t * @param {?} nodeDef\n\t * @param {?} viewDef\n\t * @param {?} hostElement\n\t * @return {?}\n\t */\n\tfunction createComponentView(parentView, nodeDef, viewDef, hostElement) {\n\t    var /** @type {?} */ rendererType = ((nodeDef.element)).componentRendererType;\n\t    var /** @type {?} */ compRenderer;\n\t    if (!rendererType) {\n\t        compRenderer = parentView.root.renderer;\n\t    }\n\t    else {\n\t        compRenderer = parentView.root.rendererFactory.createRenderer(hostElement, rendererType);\n\t    }\n\t    return createView(parentView.root, compRenderer, parentView, /** @type {?} */ ((nodeDef.element)).componentProvider, viewDef);\n\t}\n\t/**\n\t * @param {?} root\n\t * @param {?} renderer\n\t * @param {?} parent\n\t * @param {?} parentNodeDef\n\t * @param {?} def\n\t * @return {?}\n\t */\n\tfunction createView(root, renderer, parent, parentNodeDef, def) {\n\t    var /** @type {?} */ nodes = new Array(def.nodes.length);\n\t    var /** @type {?} */ disposables = def.outputCount ? new Array(def.outputCount) : null;\n\t    var /** @type {?} */ view = {\n\t        def: def,\n\t        parent: parent,\n\t        viewContainerParent: null, parentNodeDef: parentNodeDef,\n\t        context: null,\n\t        component: null, nodes: nodes,\n\t        state: 13 /* CatInit */, root: root, renderer: renderer,\n\t        oldValues: new Array(def.bindingCount), disposables: disposables\n\t    };\n\t    return view;\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} component\n\t * @param {?} context\n\t * @return {?}\n\t */\n\tfunction initView(view, component, context) {\n\t    view.component = component;\n\t    view.context = context;\n\t}\n\t/**\n\t * @param {?} view\n\t * @return {?}\n\t */\n\tfunction createViewNodes(view) {\n\t    var /** @type {?} */ renderHost;\n\t    if (isComponentView(view)) {\n\t        var /** @type {?} */ hostDef = view.parentNodeDef;\n\t        renderHost = asElementData(/** @type {?} */ ((view.parent)), /** @type {?} */ ((((hostDef)).parent)).nodeIndex).renderElement;\n\t    }\n\t    var /** @type {?} */ def = view.def;\n\t    var /** @type {?} */ nodes = view.nodes;\n\t    for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {\n\t        var /** @type {?} */ nodeDef = def.nodes[i];\n\t        Services.setCurrentNode(view, i);\n\t        var /** @type {?} */ nodeData = void 0;\n\t        switch (nodeDef.flags & 201347067 /* Types */) {\n\t            case 1 /* TypeElement */:\n\t                var /** @type {?} */ el = (createElement(view, renderHost, nodeDef));\n\t                var /** @type {?} */ componentView = ((undefined));\n\t                if (nodeDef.flags & 33554432 /* ComponentView */) {\n\t                    var /** @type {?} */ compViewDef = resolveDefinition(/** @type {?} */ ((((nodeDef.element)).componentView)));\n\t                    componentView = Services.createComponentView(view, nodeDef, compViewDef, el);\n\t                }\n\t                listenToElementOutputs(view, componentView, nodeDef, el);\n\t                nodeData = ({\n\t                    renderElement: el,\n\t                    componentView: componentView,\n\t                    viewContainer: null,\n\t                    template: /** @type {?} */ ((nodeDef.element)).template ? createTemplateData(view, nodeDef) : undefined\n\t                });\n\t                if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n\t                    nodeData.viewContainer = createViewContainerData(view, nodeDef, nodeData);\n\t                }\n\t                break;\n\t            case 2 /* TypeText */:\n\t                nodeData = (createText(view, renderHost, nodeDef));\n\t                break;\n\t            case 512 /* TypeClassProvider */:\n\t            case 1024 /* TypeFactoryProvider */:\n\t            case 2048 /* TypeUseExistingProvider */:\n\t            case 256 /* TypeValueProvider */: {\n\t                nodeData = nodes[i];\n\t                if (!nodeData && !(nodeDef.flags & 4096 /* LazyProvider */)) {\n\t                    var /** @type {?} */ instance = createProviderInstance(view, nodeDef);\n\t                    nodeData = ({ instance: instance });\n\t                }\n\t                break;\n\t            }\n\t            case 16 /* TypePipe */: {\n\t                var /** @type {?} */ instance = createPipeInstance(view, nodeDef);\n\t                nodeData = ({ instance: instance });\n\t                break;\n\t            }\n\t            case 16384 /* TypeDirective */: {\n\t                nodeData = nodes[i];\n\t                if (!nodeData) {\n\t                    var /** @type {?} */ instance = createDirectiveInstance(view, nodeDef);\n\t                    nodeData = ({ instance: instance });\n\t                }\n\t                if (nodeDef.flags & 32768 /* Component */) {\n\t                    var /** @type {?} */ compView = asElementData(view, /** @type {?} */ ((nodeDef.parent)).nodeIndex).componentView;\n\t                    initView(compView, nodeData.instance, nodeData.instance);\n\t                }\n\t                break;\n\t            }\n\t            case 32 /* TypePureArray */:\n\t            case 64 /* TypePureObject */:\n\t            case 128 /* TypePurePipe */:\n\t                nodeData = (createPureExpression(view, nodeDef));\n\t                break;\n\t            case 67108864 /* TypeContentQuery */:\n\t            case 134217728 /* TypeViewQuery */:\n\t                nodeData = (createQuery());\n\t                break;\n\t            case 8 /* TypeNgContent */:\n\t                appendNgContent(view, renderHost, nodeDef);\n\t                // no runtime data needed for NgContent...\n\t                nodeData = undefined;\n\t                break;\n\t        }\n\t        nodes[i] = nodeData;\n\t    }\n\t    // Create the ViewData.nodes of component views after we created everything else,\n\t    // so that e.g. ng-content works\n\t    execComponentViewsAction(view, ViewAction.CreateViewNodes);\n\t    // fill static content and view queries\n\t    execQueriesAction(view, 67108864 /* TypeContentQuery */ | 134217728 /* TypeViewQuery */, 268435456 /* StaticQuery */, 0 /* CheckAndUpdate */);\n\t}\n\t/**\n\t * @param {?} view\n\t * @return {?}\n\t */\n\tfunction checkNoChangesView(view) {\n\t    markProjectedViewsForCheck(view);\n\t    Services.updateDirectives(view, 1 /* CheckNoChanges */);\n\t    execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);\n\t    Services.updateRenderer(view, 1 /* CheckNoChanges */);\n\t    execComponentViewsAction(view, ViewAction.CheckNoChanges);\n\t    // Note: We don't check queries for changes as we didn't do this in v2.x.\n\t    // TODO(tbosch): investigate if we can enable the check again in v5.x with a nicer error message.\n\t    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\n\t}\n\t/**\n\t * @param {?} view\n\t * @return {?}\n\t */\n\tfunction checkAndUpdateView(view) {\n\t    if (view.state & 1 /* BeforeFirstCheck */) {\n\t        view.state &= ~1 /* BeforeFirstCheck */;\n\t        view.state |= 2 /* FirstCheck */;\n\t    }\n\t    else {\n\t        view.state &= ~2 /* FirstCheck */;\n\t    }\n\t    markProjectedViewsForCheck(view);\n\t    Services.updateDirectives(view, 0 /* CheckAndUpdate */);\n\t    execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);\n\t    execQueriesAction(view, 67108864 /* TypeContentQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\n\t    callLifecycleHooksChildrenFirst(view, 2097152 /* AfterContentChecked */ |\n\t        (view.state & 2 /* FirstCheck */ ? 1048576 /* AfterContentInit */ : 0));\n\t    Services.updateRenderer(view, 0 /* CheckAndUpdate */);\n\t    execComponentViewsAction(view, ViewAction.CheckAndUpdate);\n\t    execQueriesAction(view, 134217728 /* TypeViewQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\n\t    callLifecycleHooksChildrenFirst(view, 8388608 /* AfterViewChecked */ |\n\t        (view.state & 2 /* FirstCheck */ ? 4194304 /* AfterViewInit */ : 0));\n\t    if (view.def.flags & 2 /* OnPush */) {\n\t        view.state &= ~8 /* ChecksEnabled */;\n\t    }\n\t    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} nodeDef\n\t * @param {?} argStyle\n\t * @param {?=} v0\n\t * @param {?=} v1\n\t * @param {?=} v2\n\t * @param {?=} v3\n\t * @param {?=} v4\n\t * @param {?=} v5\n\t * @param {?=} v6\n\t * @param {?=} v7\n\t * @param {?=} v8\n\t * @param {?=} v9\n\t * @return {?}\n\t */\n\tfunction checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n\t    if (argStyle === 0 /* Inline */) {\n\t        return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n\t    }\n\t    else {\n\t        return checkAndUpdateNodeDynamic(view, nodeDef, v0);\n\t    }\n\t}\n\t/**\n\t * @param {?} view\n\t * @return {?}\n\t */\n\tfunction markProjectedViewsForCheck(view) {\n\t    var /** @type {?} */ def = view.def;\n\t    if (!(def.nodeFlags & 4 /* ProjectedTemplate */)) {\n\t        return;\n\t    }\n\t    for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {\n\t        var /** @type {?} */ nodeDef = def.nodes[i];\n\t        if (nodeDef.flags & 4 /* ProjectedTemplate */) {\n\t            var /** @type {?} */ projectedViews = asElementData(view, i).template._projectedViews;\n\t            if (projectedViews) {\n\t                for (var /** @type {?} */ i_1 = 0; i_1 < projectedViews.length; i_1++) {\n\t                    var /** @type {?} */ projectedView = projectedViews[i_1];\n\t                    projectedView.state |= 32 /* CheckProjectedView */;\n\t                    markParentViewsForCheckProjectedViews(projectedView, view);\n\t                }\n\t            }\n\t        }\n\t        else if ((nodeDef.childFlags & 4 /* ProjectedTemplate */) === 0) {\n\t            // a parent with leafs\n\t            // no child is a component,\n\t            // then skip the children\n\t            i += nodeDef.childCount;\n\t        }\n\t    }\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} nodeDef\n\t * @param {?=} v0\n\t * @param {?=} v1\n\t * @param {?=} v2\n\t * @param {?=} v3\n\t * @param {?=} v4\n\t * @param {?=} v5\n\t * @param {?=} v6\n\t * @param {?=} v7\n\t * @param {?=} v8\n\t * @param {?=} v9\n\t * @return {?}\n\t */\n\tfunction checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n\t    switch (nodeDef.flags & 201347067 /* Types */) {\n\t        case 1 /* TypeElement */:\n\t            return checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n\t        case 2 /* TypeText */:\n\t            return checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n\t        case 16384 /* TypeDirective */:\n\t            return checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n\t        case 32 /* TypePureArray */:\n\t        case 64 /* TypePureObject */:\n\t        case 128 /* TypePurePipe */:\n\t            return checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n\t        default:\n\t            throw 'unreachable';\n\t    }\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} nodeDef\n\t * @param {?} values\n\t * @return {?}\n\t */\n\tfunction checkAndUpdateNodeDynamic(view, nodeDef, values) {\n\t    switch (nodeDef.flags & 201347067 /* Types */) {\n\t        case 1 /* TypeElement */:\n\t            return checkAndUpdateElementDynamic(view, nodeDef, values);\n\t        case 2 /* TypeText */:\n\t            return checkAndUpdateTextDynamic(view, nodeDef, values);\n\t        case 16384 /* TypeDirective */:\n\t            return checkAndUpdateDirectiveDynamic(view, nodeDef, values);\n\t        case 32 /* TypePureArray */:\n\t        case 64 /* TypePureObject */:\n\t        case 128 /* TypePurePipe */:\n\t            return checkAndUpdatePureExpressionDynamic(view, nodeDef, values);\n\t        default:\n\t            throw 'unreachable';\n\t    }\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} nodeDef\n\t * @param {?} argStyle\n\t * @param {?=} v0\n\t * @param {?=} v1\n\t * @param {?=} v2\n\t * @param {?=} v3\n\t * @param {?=} v4\n\t * @param {?=} v5\n\t * @param {?=} v6\n\t * @param {?=} v7\n\t * @param {?=} v8\n\t * @param {?=} v9\n\t * @return {?}\n\t */\n\tfunction checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n\t    if (argStyle === 0 /* Inline */) {\n\t        checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n\t    }\n\t    else {\n\t        checkNoChangesNodeDynamic(view, nodeDef, v0);\n\t    }\n\t    // Returning false is ok here as we would have thrown in case of a change.\n\t    return false;\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} nodeDef\n\t * @param {?} v0\n\t * @param {?} v1\n\t * @param {?} v2\n\t * @param {?} v3\n\t * @param {?} v4\n\t * @param {?} v5\n\t * @param {?} v6\n\t * @param {?} v7\n\t * @param {?} v8\n\t * @param {?} v9\n\t * @return {?}\n\t */\n\tfunction checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n\t    var /** @type {?} */ bindLen = nodeDef.bindings.length;\n\t    if (bindLen > 0)\n\t        checkBindingNoChanges(view, nodeDef, 0, v0);\n\t    if (bindLen > 1)\n\t        checkBindingNoChanges(view, nodeDef, 1, v1);\n\t    if (bindLen > 2)\n\t        checkBindingNoChanges(view, nodeDef, 2, v2);\n\t    if (bindLen > 3)\n\t        checkBindingNoChanges(view, nodeDef, 3, v3);\n\t    if (bindLen > 4)\n\t        checkBindingNoChanges(view, nodeDef, 4, v4);\n\t    if (bindLen > 5)\n\t        checkBindingNoChanges(view, nodeDef, 5, v5);\n\t    if (bindLen > 6)\n\t        checkBindingNoChanges(view, nodeDef, 6, v6);\n\t    if (bindLen > 7)\n\t        checkBindingNoChanges(view, nodeDef, 7, v7);\n\t    if (bindLen > 8)\n\t        checkBindingNoChanges(view, nodeDef, 8, v8);\n\t    if (bindLen > 9)\n\t        checkBindingNoChanges(view, nodeDef, 9, v9);\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} nodeDef\n\t * @param {?} values\n\t * @return {?}\n\t */\n\tfunction checkNoChangesNodeDynamic(view, nodeDef, values) {\n\t    for (var /** @type {?} */ i = 0; i < values.length; i++) {\n\t        checkBindingNoChanges(view, nodeDef, i, values[i]);\n\t    }\n\t}\n\t/**\n\t * Workaround https://github.com/angular/tsickle/issues/497\n\t * @suppress {misplacedTypeAnnotation}\n\t * @param {?} view\n\t * @param {?} nodeDef\n\t * @return {?}\n\t */\n\tfunction checkNoChangesQuery(view, nodeDef) {\n\t    var /** @type {?} */ queryList = asQueryList(view, nodeDef.nodeIndex);\n\t    if (queryList.dirty) {\n\t        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, nodeDef.nodeIndex), \"Query \" + ((nodeDef.query)).id + \" not dirty\", \"Query \" + ((nodeDef.query)).id + \" dirty\", (view.state & 1 /* BeforeFirstCheck */) !== 0);\n\t    }\n\t}\n\t/**\n\t * @param {?} view\n\t * @return {?}\n\t */\n\tfunction destroyView(view) {\n\t    if (view.state & 128 /* Destroyed */) {\n\t        return;\n\t    }\n\t    execEmbeddedViewsAction(view, ViewAction.Destroy);\n\t    execComponentViewsAction(view, ViewAction.Destroy);\n\t    callLifecycleHooksChildrenFirst(view, 131072 /* OnDestroy */);\n\t    if (view.disposables) {\n\t        for (var /** @type {?} */ i = 0; i < view.disposables.length; i++) {\n\t            view.disposables[i]();\n\t        }\n\t    }\n\t    detachProjectedView(view);\n\t    if (view.renderer.destroyNode) {\n\t        destroyViewNodes(view);\n\t    }\n\t    if (isComponentView(view)) {\n\t        view.renderer.destroy();\n\t    }\n\t    view.state |= 128 /* Destroyed */;\n\t}\n\t/**\n\t * @param {?} view\n\t * @return {?}\n\t */\n\tfunction destroyViewNodes(view) {\n\t    var /** @type {?} */ len = view.def.nodes.length;\n\t    for (var /** @type {?} */ i = 0; i < len; i++) {\n\t        var /** @type {?} */ def = view.def.nodes[i];\n\t        if (def.flags & 1 /* TypeElement */) {\n\t            ((view.renderer.destroyNode))(asElementData(view, i).renderElement);\n\t        }\n\t        else if (def.flags & 2 /* TypeText */) {\n\t            ((view.renderer.destroyNode))(asTextData(view, i).renderText);\n\t        }\n\t        else if (def.flags & 67108864 /* TypeContentQuery */ || def.flags & 134217728 /* TypeViewQuery */) {\n\t            asQueryList(view, i).destroy();\n\t        }\n\t    }\n\t}\n\tvar ViewAction = {};\n\tViewAction.CreateViewNodes = 0;\n\tViewAction.CheckNoChanges = 1;\n\tViewAction.CheckNoChangesProjectedViews = 2;\n\tViewAction.CheckAndUpdate = 3;\n\tViewAction.CheckAndUpdateProjectedViews = 4;\n\tViewAction.Destroy = 5;\n\tViewAction[ViewAction.CreateViewNodes] = \"CreateViewNodes\";\n\tViewAction[ViewAction.CheckNoChanges] = \"CheckNoChanges\";\n\tViewAction[ViewAction.CheckNoChangesProjectedViews] = \"CheckNoChangesProjectedViews\";\n\tViewAction[ViewAction.CheckAndUpdate] = \"CheckAndUpdate\";\n\tViewAction[ViewAction.CheckAndUpdateProjectedViews] = \"CheckAndUpdateProjectedViews\";\n\tViewAction[ViewAction.Destroy] = \"Destroy\";\n\t/**\n\t * @param {?} view\n\t * @param {?} action\n\t * @return {?}\n\t */\n\tfunction execComponentViewsAction(view, action) {\n\t    var /** @type {?} */ def = view.def;\n\t    if (!(def.nodeFlags & 33554432 /* ComponentView */)) {\n\t        return;\n\t    }\n\t    for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {\n\t        var /** @type {?} */ nodeDef = def.nodes[i];\n\t        if (nodeDef.flags & 33554432 /* ComponentView */) {\n\t            // a leaf\n\t            callViewAction(asElementData(view, i).componentView, action);\n\t        }\n\t        else if ((nodeDef.childFlags & 33554432 /* ComponentView */) === 0) {\n\t            // a parent with leafs\n\t            // no child is a component,\n\t            // then skip the children\n\t            i += nodeDef.childCount;\n\t        }\n\t    }\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} action\n\t * @return {?}\n\t */\n\tfunction execEmbeddedViewsAction(view, action) {\n\t    var /** @type {?} */ def = view.def;\n\t    if (!(def.nodeFlags & 16777216 /* EmbeddedViews */)) {\n\t        return;\n\t    }\n\t    for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {\n\t        var /** @type {?} */ nodeDef = def.nodes[i];\n\t        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n\t            // a leaf\n\t            var /** @type {?} */ embeddedViews = ((asElementData(view, i).viewContainer))._embeddedViews;\n\t            for (var /** @type {?} */ k = 0; k < embeddedViews.length; k++) {\n\t                callViewAction(embeddedViews[k], action);\n\t            }\n\t        }\n\t        else if ((nodeDef.childFlags & 16777216 /* EmbeddedViews */) === 0) {\n\t            // a parent with leafs\n\t            // no child is a component,\n\t            // then skip the children\n\t            i += nodeDef.childCount;\n\t        }\n\t    }\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} action\n\t * @return {?}\n\t */\n\tfunction callViewAction(view, action) {\n\t    var /** @type {?} */ viewState = view.state;\n\t    switch (action) {\n\t        case ViewAction.CheckNoChanges:\n\t            if ((viewState & 128 /* Destroyed */) === 0) {\n\t                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\n\t                    checkNoChangesView(view);\n\t                }\n\t                else if (viewState & 64 /* CheckProjectedViews */) {\n\t                    execProjectedViewsAction(view, ViewAction.CheckNoChangesProjectedViews);\n\t                }\n\t            }\n\t            break;\n\t        case ViewAction.CheckNoChangesProjectedViews:\n\t            if ((viewState & 128 /* Destroyed */) === 0) {\n\t                if (viewState & 32 /* CheckProjectedView */) {\n\t                    checkNoChangesView(view);\n\t                }\n\t                else if (viewState & 64 /* CheckProjectedViews */) {\n\t                    execProjectedViewsAction(view, action);\n\t                }\n\t            }\n\t            break;\n\t        case ViewAction.CheckAndUpdate:\n\t            if ((viewState & 128 /* Destroyed */) === 0) {\n\t                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\n\t                    checkAndUpdateView(view);\n\t                }\n\t                else if (viewState & 64 /* CheckProjectedViews */) {\n\t                    execProjectedViewsAction(view, ViewAction.CheckAndUpdateProjectedViews);\n\t                }\n\t            }\n\t            break;\n\t        case ViewAction.CheckAndUpdateProjectedViews:\n\t            if ((viewState & 128 /* Destroyed */) === 0) {\n\t                if (viewState & 32 /* CheckProjectedView */) {\n\t                    checkAndUpdateView(view);\n\t                }\n\t                else if (viewState & 64 /* CheckProjectedViews */) {\n\t                    execProjectedViewsAction(view, action);\n\t                }\n\t            }\n\t            break;\n\t        case ViewAction.Destroy:\n\t            // Note: destroyView recurses over all views,\n\t            // so we don't need to special case projected views here.\n\t            destroyView(view);\n\t            break;\n\t        case ViewAction.CreateViewNodes:\n\t            createViewNodes(view);\n\t            break;\n\t    }\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} action\n\t * @return {?}\n\t */\n\tfunction execProjectedViewsAction(view, action) {\n\t    execEmbeddedViewsAction(view, action);\n\t    execComponentViewsAction(view, action);\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} queryFlags\n\t * @param {?} staticDynamicQueryFlag\n\t * @param {?} checkType\n\t * @return {?}\n\t */\n\tfunction execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {\n\t    if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {\n\t        return;\n\t    }\n\t    var /** @type {?} */ nodeCount = view.def.nodes.length;\n\t    for (var /** @type {?} */ i = 0; i < nodeCount; i++) {\n\t        var /** @type {?} */ nodeDef = view.def.nodes[i];\n\t        if ((nodeDef.flags & queryFlags) && (nodeDef.flags & staticDynamicQueryFlag)) {\n\t            Services.setCurrentNode(view, nodeDef.nodeIndex);\n\t            switch (checkType) {\n\t                case 0 /* CheckAndUpdate */:\n\t                    checkAndUpdateQuery(view, nodeDef);\n\t                    break;\n\t                case 1 /* CheckNoChanges */:\n\t                    checkNoChangesQuery(view, nodeDef);\n\t                    break;\n\t            }\n\t        }\n\t        if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {\n\t            // no child has a matching query\n\t            // then skip the children\n\t            i += nodeDef.childCount;\n\t        }\n\t    }\n\t}\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\tvar initialized = false;\n\t/**\n\t * @return {?}\n\t */\n\tfunction initServicesIfNeeded() {\n\t    if (initialized) {\n\t        return;\n\t    }\n\t    initialized = true;\n\t    var /** @type {?} */ services = isDevMode() ? createDebugServices() : createProdServices();\n\t    Services.setCurrentNode = services.setCurrentNode;\n\t    Services.createRootView = services.createRootView;\n\t    Services.createEmbeddedView = services.createEmbeddedView;\n\t    Services.createComponentView = services.createComponentView;\n\t    Services.createNgModuleRef = services.createNgModuleRef;\n\t    Services.overrideProvider = services.overrideProvider;\n\t    Services.clearProviderOverrides = services.clearProviderOverrides;\n\t    Services.checkAndUpdateView = services.checkAndUpdateView;\n\t    Services.checkNoChangesView = services.checkNoChangesView;\n\t    Services.destroyView = services.destroyView;\n\t    Services.resolveDep = resolveDep;\n\t    Services.createDebugContext = services.createDebugContext;\n\t    Services.handleEvent = services.handleEvent;\n\t    Services.updateDirectives = services.updateDirectives;\n\t    Services.updateRenderer = services.updateRenderer;\n\t    Services.dirtyParentQueries = dirtyParentQueries;\n\t}\n\t/**\n\t * @return {?}\n\t */\n\tfunction createProdServices() {\n\t    return {\n\t        setCurrentNode: function () { },\n\t        createRootView: createProdRootView,\n\t        createEmbeddedView: createEmbeddedView,\n\t        createComponentView: createComponentView,\n\t        createNgModuleRef: createNgModuleRef,\n\t        overrideProvider: NOOP,\n\t        clearProviderOverrides: NOOP,\n\t        checkAndUpdateView: checkAndUpdateView,\n\t        checkNoChangesView: checkNoChangesView,\n\t        destroyView: destroyView,\n\t        createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },\n\t        handleEvent: function (view, nodeIndex, eventName, event) { return view.def.handleEvent(view, nodeIndex, eventName, event); },\n\t        updateDirectives: function (view, checkType) { return view.def.updateDirectives(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :\n\t            prodCheckNoChangesNode, view); },\n\t        updateRenderer: function (view, checkType) { return view.def.updateRenderer(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :\n\t            prodCheckNoChangesNode, view); },\n\t    };\n\t}\n\t/**\n\t * @return {?}\n\t */\n\tfunction createDebugServices() {\n\t    return {\n\t        setCurrentNode: debugSetCurrentNode,\n\t        createRootView: debugCreateRootView,\n\t        createEmbeddedView: debugCreateEmbeddedView,\n\t        createComponentView: debugCreateComponentView,\n\t        createNgModuleRef: debugCreateNgModuleRef,\n\t        overrideProvider: debugOverrideProvider,\n\t        clearProviderOverrides: debugClearProviderOverrides,\n\t        checkAndUpdateView: debugCheckAndUpdateView,\n\t        checkNoChangesView: debugCheckNoChangesView,\n\t        destroyView: debugDestroyView,\n\t        createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },\n\t        handleEvent: debugHandleEvent,\n\t        updateDirectives: debugUpdateDirectives,\n\t        updateRenderer: debugUpdateRenderer,\n\t    };\n\t}\n\t/**\n\t * @param {?} elInjector\n\t * @param {?} projectableNodes\n\t * @param {?} rootSelectorOrNode\n\t * @param {?} def\n\t * @param {?} ngModule\n\t * @param {?=} context\n\t * @return {?}\n\t */\n\tfunction createProdRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\n\t    var /** @type {?} */ rendererFactory = ngModule.injector.get(RendererFactory2);\n\t    return createRootView(createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode), def, context);\n\t}\n\t/**\n\t * @param {?} elInjector\n\t * @param {?} projectableNodes\n\t * @param {?} rootSelectorOrNode\n\t * @param {?} def\n\t * @param {?} ngModule\n\t * @param {?=} context\n\t * @return {?}\n\t */\n\tfunction debugCreateRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\n\t    var /** @type {?} */ rendererFactory = ngModule.injector.get(RendererFactory2);\n\t    var /** @type {?} */ root = createRootData(elInjector, ngModule, new DebugRendererFactory2(rendererFactory), projectableNodes, rootSelectorOrNode);\n\t    var /** @type {?} */ defWithOverride = applyProviderOverridesToView(def);\n\t    return callWithDebugContext(DebugAction.create, createRootView, null, [root, defWithOverride, context]);\n\t}\n\t/**\n\t * @param {?} elInjector\n\t * @param {?} ngModule\n\t * @param {?} rendererFactory\n\t * @param {?} projectableNodes\n\t * @param {?} rootSelectorOrNode\n\t * @return {?}\n\t */\n\tfunction createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode) {\n\t    var /** @type {?} */ sanitizer = ngModule.injector.get(Sanitizer);\n\t    var /** @type {?} */ errorHandler = ngModule.injector.get(ErrorHandler);\n\t    var /** @type {?} */ renderer = rendererFactory.createRenderer(null, null);\n\t    return {\n\t        ngModule: ngModule,\n\t        injector: elInjector, projectableNodes: projectableNodes,\n\t        selectorOrNode: rootSelectorOrNode, sanitizer: sanitizer, rendererFactory: rendererFactory, renderer: renderer, errorHandler: errorHandler\n\t    };\n\t}\n\t/**\n\t * @param {?} parentView\n\t * @param {?} anchorDef\n\t * @param {?} viewDef\n\t * @param {?=} context\n\t * @return {?}\n\t */\n\tfunction debugCreateEmbeddedView(parentView, anchorDef, viewDef$$1, context) {\n\t    var /** @type {?} */ defWithOverride = applyProviderOverridesToView(viewDef$$1);\n\t    return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [parentView, anchorDef, defWithOverride, context]);\n\t}\n\t/**\n\t * @param {?} parentView\n\t * @param {?} nodeDef\n\t * @param {?} viewDef\n\t * @param {?} hostElement\n\t * @return {?}\n\t */\n\tfunction debugCreateComponentView(parentView, nodeDef, viewDef$$1, hostElement) {\n\t    var /** @type {?} */ defWithOverride = applyProviderOverridesToView(viewDef$$1);\n\t    return callWithDebugContext(DebugAction.create, createComponentView, null, [parentView, nodeDef, defWithOverride, hostElement]);\n\t}\n\t/**\n\t * @param {?} moduleType\n\t * @param {?} parentInjector\n\t * @param {?} bootstrapComponents\n\t * @param {?} def\n\t * @return {?}\n\t */\n\tfunction debugCreateNgModuleRef(moduleType, parentInjector, bootstrapComponents, def) {\n\t    var /** @type {?} */ defWithOverride = applyProviderOverridesToNgModule(def);\n\t    return createNgModuleRef(moduleType, parentInjector, bootstrapComponents, defWithOverride);\n\t}\n\tvar providerOverrides = new Map();\n\t/**\n\t * @param {?} override\n\t * @return {?}\n\t */\n\tfunction debugOverrideProvider(override) {\n\t    providerOverrides.set(override.token, override);\n\t}\n\t/**\n\t * @return {?}\n\t */\n\tfunction debugClearProviderOverrides() {\n\t    providerOverrides.clear();\n\t}\n\t/**\n\t * @param {?} def\n\t * @return {?}\n\t */\n\tfunction applyProviderOverridesToView(def) {\n\t    if (providerOverrides.size === 0) {\n\t        return def;\n\t    }\n\t    var /** @type {?} */ elementIndicesWithOverwrittenProviders = findElementIndicesWithOverwrittenProviders(def);\n\t    if (elementIndicesWithOverwrittenProviders.length === 0) {\n\t        return def;\n\t    }\n\t    // clone the whole view definition,\n\t    // as it maintains references between the nodes that are hard to update.\n\t    def = ((def.factory))(function () { return NOOP; });\n\t    for (var /** @type {?} */ i = 0; i < elementIndicesWithOverwrittenProviders.length; i++) {\n\t        applyProviderOverridesToElement(def, elementIndicesWithOverwrittenProviders[i]);\n\t    }\n\t    return def;\n\t    /**\n\t     * @param {?} def\n\t     * @return {?}\n\t     */\n\t    function findElementIndicesWithOverwrittenProviders(def) {\n\t        var /** @type {?} */ elIndicesWithOverwrittenProviders = [];\n\t        var /** @type {?} */ lastElementDef = null;\n\t        for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {\n\t            var /** @type {?} */ nodeDef = def.nodes[i];\n\t            if (nodeDef.flags & 1 /* TypeElement */) {\n\t                lastElementDef = nodeDef;\n\t            }\n\t            if (lastElementDef && nodeDef.flags & 3840 /* CatProviderNoDirective */ &&\n\t                providerOverrides.has(/** @type {?} */ ((nodeDef.provider)).token)) {\n\t                elIndicesWithOverwrittenProviders.push(/** @type {?} */ ((lastElementDef)).nodeIndex);\n\t                lastElementDef = null;\n\t            }\n\t        }\n\t        return elIndicesWithOverwrittenProviders;\n\t    }\n\t    /**\n\t     * @param {?} viewDef\n\t     * @param {?} elIndex\n\t     * @return {?}\n\t     */\n\t    function applyProviderOverridesToElement(viewDef$$1, elIndex) {\n\t        for (var /** @type {?} */ i = elIndex + 1; i < viewDef$$1.nodes.length; i++) {\n\t            var /** @type {?} */ nodeDef = viewDef$$1.nodes[i];\n\t            if (nodeDef.flags & 1 /* TypeElement */) {\n\t                // stop at the next element\n\t                return;\n\t            }\n\t            if (nodeDef.flags & 3840 /* CatProviderNoDirective */) {\n\t                var /** @type {?} */ provider = ((nodeDef.provider));\n\t                var /** @type {?} */ override = providerOverrides.get(provider.token);\n\t                if (override) {\n\t                    nodeDef.flags = (nodeDef.flags & ~3840 /* CatProviderNoDirective */) | override.flags;\n\t                    provider.deps = splitDepsDsl(override.deps);\n\t                    provider.value = override.value;\n\t                }\n\t            }\n\t        }\n\t    }\n\t}\n\t/**\n\t * @param {?} def\n\t * @return {?}\n\t */\n\tfunction applyProviderOverridesToNgModule(def) {\n\t    var _a = calcHasOverrides(def), hasOverrides = _a.hasOverrides, hasDeprecatedOverrides = _a.hasDeprecatedOverrides;\n\t    if (!hasOverrides) {\n\t        return def;\n\t    }\n\t    // clone the whole view definition,\n\t    // as it maintains references between the nodes that are hard to update.\n\t    def = ((def.factory))(function () { return NOOP; });\n\t    applyProviderOverrides(def);\n\t    return def;\n\t    /**\n\t     * @param {?} def\n\t     * @return {?}\n\t     */\n\t    function calcHasOverrides(def) {\n\t        var /** @type {?} */ hasOverrides = false;\n\t        var /** @type {?} */ hasDeprecatedOverrides = false;\n\t        if (providerOverrides.size === 0) {\n\t            return { hasOverrides: hasOverrides, hasDeprecatedOverrides: hasDeprecatedOverrides };\n\t        }\n\t        def.providers.forEach(function (node) {\n\t            var /** @type {?} */ override = providerOverrides.get(node.token);\n\t            if ((node.flags & 3840 /* CatProviderNoDirective */) && override) {\n\t                hasOverrides = true;\n\t                hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;\n\t            }\n\t        });\n\t        return { hasOverrides: hasOverrides, hasDeprecatedOverrides: hasDeprecatedOverrides };\n\t    }\n\t    /**\n\t     * @param {?} def\n\t     * @return {?}\n\t     */\n\t    function applyProviderOverrides(def) {\n\t        for (var /** @type {?} */ i = 0; i < def.providers.length; i++) {\n\t            var /** @type {?} */ provider = def.providers[i];\n\t            if (hasDeprecatedOverrides) {\n\t                // We had a bug where me made\n\t                // all providers lazy. Keep this logic behind a flag\n\t                // for migrating existing users.\n\t                provider.flags |= 4096 /* LazyProvider */;\n\t            }\n\t            var /** @type {?} */ override = providerOverrides.get(provider.token);\n\t            if (override) {\n\t                provider.flags = (provider.flags & ~3840 /* CatProviderNoDirective */) | override.flags;\n\t                provider.deps = splitDepsDsl(override.deps);\n\t                provider.value = override.value;\n\t            }\n\t        }\n\t    }\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} checkIndex\n\t * @param {?} argStyle\n\t * @param {?=} v0\n\t * @param {?=} v1\n\t * @param {?=} v2\n\t * @param {?=} v3\n\t * @param {?=} v4\n\t * @param {?=} v5\n\t * @param {?=} v6\n\t * @param {?=} v7\n\t * @param {?=} v8\n\t * @param {?=} v9\n\t * @return {?}\n\t */\n\tfunction prodCheckAndUpdateNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n\t    var /** @type {?} */ nodeDef = view.def.nodes[checkIndex];\n\t    checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n\t    return (nodeDef.flags & 224 /* CatPureExpression */) ?\n\t        asPureExpressionData(view, checkIndex).value :\n\t        undefined;\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} checkIndex\n\t * @param {?} argStyle\n\t * @param {?=} v0\n\t * @param {?=} v1\n\t * @param {?=} v2\n\t * @param {?=} v3\n\t * @param {?=} v4\n\t * @param {?=} v5\n\t * @param {?=} v6\n\t * @param {?=} v7\n\t * @param {?=} v8\n\t * @param {?=} v9\n\t * @return {?}\n\t */\n\tfunction prodCheckNoChangesNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n\t    var /** @type {?} */ nodeDef = view.def.nodes[checkIndex];\n\t    checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n\t    return (nodeDef.flags & 224 /* CatPureExpression */) ?\n\t        asPureExpressionData(view, checkIndex).value :\n\t        undefined;\n\t}\n\t/**\n\t * @param {?} view\n\t * @return {?}\n\t */\n\tfunction debugCheckAndUpdateView(view) {\n\t    return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);\n\t}\n\t/**\n\t * @param {?} view\n\t * @return {?}\n\t */\n\tfunction debugCheckNoChangesView(view) {\n\t    return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);\n\t}\n\t/**\n\t * @param {?} view\n\t * @return {?}\n\t */\n\tfunction debugDestroyView(view) {\n\t    return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);\n\t}\n\tvar DebugAction = {};\n\tDebugAction.create = 0;\n\tDebugAction.detectChanges = 1;\n\tDebugAction.checkNoChanges = 2;\n\tDebugAction.destroy = 3;\n\tDebugAction.handleEvent = 4;\n\tDebugAction[DebugAction.create] = \"create\";\n\tDebugAction[DebugAction.detectChanges] = \"detectChanges\";\n\tDebugAction[DebugAction.checkNoChanges] = \"checkNoChanges\";\n\tDebugAction[DebugAction.destroy] = \"destroy\";\n\tDebugAction[DebugAction.handleEvent] = \"handleEvent\";\n\tvar _currentAction;\n\tvar _currentView;\n\tvar _currentNodeIndex;\n\t/**\n\t * @param {?} view\n\t * @param {?} nodeIndex\n\t * @return {?}\n\t */\n\tfunction debugSetCurrentNode(view, nodeIndex) {\n\t    _currentView = view;\n\t    _currentNodeIndex = nodeIndex;\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} nodeIndex\n\t * @param {?} eventName\n\t * @param {?} event\n\t * @return {?}\n\t */\n\tfunction debugHandleEvent(view, nodeIndex, eventName, event) {\n\t    debugSetCurrentNode(view, nodeIndex);\n\t    return callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} checkType\n\t * @return {?}\n\t */\n\tfunction debugUpdateDirectives(view, checkType) {\n\t    if (view.state & 128 /* Destroyed */) {\n\t        throw viewDestroyedError(DebugAction[_currentAction]);\n\t    }\n\t    debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));\n\t    return view.def.updateDirectives(debugCheckDirectivesFn, view);\n\t    /**\n\t     * @param {?} view\n\t     * @param {?} nodeIndex\n\t     * @param {?} argStyle\n\t     * @param {...?} values\n\t     * @return {?}\n\t     */\n\t    function debugCheckDirectivesFn(view, nodeIndex, argStyle) {\n\t        var values = [];\n\t        for (var _i = 3; _i < arguments.length; _i++) {\n\t            values[_i - 3] = arguments[_i];\n\t        }\n\t        var /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];\n\t        if (checkType === 0 /* CheckAndUpdate */) {\n\t            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\n\t        }\n\t        else {\n\t            debugCheckNoChangesNode(view, nodeDef, argStyle, values);\n\t        }\n\t        if (nodeDef.flags & 16384 /* TypeDirective */) {\n\t            debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));\n\t        }\n\t        return (nodeDef.flags & 224 /* CatPureExpression */) ?\n\t            asPureExpressionData(view, nodeDef.nodeIndex).value :\n\t            undefined;\n\t    }\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} checkType\n\t * @return {?}\n\t */\n\tfunction debugUpdateRenderer(view, checkType) {\n\t    if (view.state & 128 /* Destroyed */) {\n\t        throw viewDestroyedError(DebugAction[_currentAction]);\n\t    }\n\t    debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));\n\t    return view.def.updateRenderer(debugCheckRenderNodeFn, view);\n\t    /**\n\t     * @param {?} view\n\t     * @param {?} nodeIndex\n\t     * @param {?} argStyle\n\t     * @param {...?} values\n\t     * @return {?}\n\t     */\n\t    function debugCheckRenderNodeFn(view, nodeIndex, argStyle) {\n\t        var values = [];\n\t        for (var _i = 3; _i < arguments.length; _i++) {\n\t            values[_i - 3] = arguments[_i];\n\t        }\n\t        var /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];\n\t        if (checkType === 0 /* CheckAndUpdate */) {\n\t            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\n\t        }\n\t        else {\n\t            debugCheckNoChangesNode(view, nodeDef, argStyle, values);\n\t        }\n\t        if (nodeDef.flags & 3 /* CatRenderNode */) {\n\t            debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));\n\t        }\n\t        return (nodeDef.flags & 224 /* CatPureExpression */) ?\n\t            asPureExpressionData(view, nodeDef.nodeIndex).value :\n\t            undefined;\n\t    }\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} nodeDef\n\t * @param {?} argStyle\n\t * @param {?} givenValues\n\t * @return {?}\n\t */\n\tfunction debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {\n\t    var /** @type {?} */ changed = ((checkAndUpdateNode)).apply(void 0, [view, nodeDef, argStyle].concat(givenValues));\n\t    if (changed) {\n\t        var /** @type {?} */ values = argStyle === 1 /* Dynamic */ ? givenValues[0] : givenValues;\n\t        if (nodeDef.flags & 16384 /* TypeDirective */) {\n\t            var /** @type {?} */ bindingValues = {};\n\t            for (var /** @type {?} */ i = 0; i < nodeDef.bindings.length; i++) {\n\t                var /** @type {?} */ binding = nodeDef.bindings[i];\n\t                var /** @type {?} */ value = values[i];\n\t                if (binding.flags & 8 /* TypeProperty */) {\n\t                    bindingValues[normalizeDebugBindingName(/** @type {?} */ ((binding.nonMinifiedName)))] =\n\t                        normalizeDebugBindingValue(value);\n\t                }\n\t            }\n\t            var /** @type {?} */ elDef = ((nodeDef.parent));\n\t            var /** @type {?} */ el = asElementData(view, elDef.nodeIndex).renderElement;\n\t            if (!((elDef.element)).name) {\n\t                // a comment.\n\t                view.renderer.setValue(el, \"bindings=\" + JSON.stringify(bindingValues, null, 2));\n\t            }\n\t            else {\n\t                // a regular element.\n\t                for (var /** @type {?} */ attr in bindingValues) {\n\t                    var /** @type {?} */ value = bindingValues[attr];\n\t                    if (value != null) {\n\t                        view.renderer.setAttribute(el, attr, value);\n\t                    }\n\t                    else {\n\t                        view.renderer.removeAttribute(el, attr);\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} nodeDef\n\t * @param {?} argStyle\n\t * @param {?} values\n\t * @return {?}\n\t */\n\tfunction debugCheckNoChangesNode(view, nodeDef, argStyle, values) {\n\t    ((checkNoChangesNode)).apply(void 0, [view, nodeDef, argStyle].concat(values));\n\t}\n\t/**\n\t * @param {?} name\n\t * @return {?}\n\t */\n\tfunction normalizeDebugBindingName(name) {\n\t    // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers\n\t    name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));\n\t    return \"ng-reflect-\" + name;\n\t}\n\tvar CAMEL_CASE_REGEXP = /([A-Z])/g;\n\t/**\n\t * @param {?} input\n\t * @return {?}\n\t */\n\tfunction camelCaseToDashCase(input) {\n\t    return input.replace(CAMEL_CASE_REGEXP, function () {\n\t        var m = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            m[_i] = arguments[_i];\n\t        }\n\t        return '-' + m[1].toLowerCase();\n\t    });\n\t}\n\t/**\n\t * @param {?} value\n\t * @return {?}\n\t */\n\tfunction normalizeDebugBindingValue(value) {\n\t    try {\n\t        // Limit the size of the value as otherwise the DOM just gets polluted.\n\t        return value != null ? value.toString().slice(0, 30) : value;\n\t    }\n\t    catch (e) {\n\t        return '[ERROR] Exception while trying to serialize the value';\n\t    }\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} nodeIndex\n\t * @return {?}\n\t */\n\tfunction nextDirectiveWithBinding(view, nodeIndex) {\n\t    for (var /** @type {?} */ i = nodeIndex; i < view.def.nodes.length; i++) {\n\t        var /** @type {?} */ nodeDef = view.def.nodes[i];\n\t        if (nodeDef.flags & 16384 /* TypeDirective */ && nodeDef.bindings && nodeDef.bindings.length) {\n\t            return i;\n\t        }\n\t    }\n\t    return null;\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} nodeIndex\n\t * @return {?}\n\t */\n\tfunction nextRenderNodeWithBinding(view, nodeIndex) {\n\t    for (var /** @type {?} */ i = nodeIndex; i < view.def.nodes.length; i++) {\n\t        var /** @type {?} */ nodeDef = view.def.nodes[i];\n\t        if ((nodeDef.flags & 3 /* CatRenderNode */) && nodeDef.bindings && nodeDef.bindings.length) {\n\t            return i;\n\t        }\n\t    }\n\t    return null;\n\t}\n\tvar DebugContext_ = (function () {\n\t    /**\n\t     * @param {?} view\n\t     * @param {?} nodeIndex\n\t     */\n\t    function DebugContext_(view, nodeIndex) {\n\t        this.view = view;\n\t        this.nodeIndex = nodeIndex;\n\t        if (nodeIndex == null) {\n\t            this.nodeIndex = nodeIndex = 0;\n\t        }\n\t        this.nodeDef = view.def.nodes[nodeIndex];\n\t        var elDef = this.nodeDef;\n\t        var elView = view;\n\t        while (elDef && (elDef.flags & 1 /* TypeElement */) === 0) {\n\t            elDef = elDef.parent;\n\t        }\n\t        if (!elDef) {\n\t            while (!elDef && elView) {\n\t                elDef = viewParentEl(elView);\n\t                elView = elView.parent;\n\t            }\n\t        }\n\t        this.elDef = elDef;\n\t        this.elView = elView;\n\t    }\n\t    Object.defineProperty(DebugContext_.prototype, \"elOrCompView\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () {\n\t            // Has to be done lazily as we use the DebugContext also during creation of elements...\n\t            return asElementData(this.elView, this.elDef.nodeIndex).componentView || this.view;\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(DebugContext_.prototype, \"injector\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return createInjector(this.elView, this.elDef); },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(DebugContext_.prototype, \"component\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this.elOrCompView.component; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(DebugContext_.prototype, \"context\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this.elOrCompView.context; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(DebugContext_.prototype, \"providerTokens\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () {\n\t            var /** @type {?} */ tokens = [];\n\t            if (this.elDef) {\n\t                for (var /** @type {?} */ i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\n\t                    var /** @type {?} */ childDef = this.elView.def.nodes[i];\n\t                    if (childDef.flags & 20224 /* CatProvider */) {\n\t                        tokens.push(/** @type {?} */ ((childDef.provider)).token);\n\t                    }\n\t                    i += childDef.childCount;\n\t                }\n\t            }\n\t            return tokens;\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(DebugContext_.prototype, \"references\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () {\n\t            var /** @type {?} */ references = {};\n\t            if (this.elDef) {\n\t                collectReferences(this.elView, this.elDef, references);\n\t                for (var /** @type {?} */ i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\n\t                    var /** @type {?} */ childDef = this.elView.def.nodes[i];\n\t                    if (childDef.flags & 20224 /* CatProvider */) {\n\t                        collectReferences(this.elView, childDef, references);\n\t                    }\n\t                    i += childDef.childCount;\n\t                }\n\t            }\n\t            return references;\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(DebugContext_.prototype, \"componentRenderElement\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () {\n\t            var /** @type {?} */ elData = findHostElement(this.elOrCompView);\n\t            return elData ? elData.renderElement : undefined;\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(DebugContext_.prototype, \"renderNode\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () {\n\t            return this.nodeDef.flags & 2 /* TypeText */ ? renderNode(this.view, this.nodeDef) :\n\t                renderNode(this.elView, this.elDef);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    /**\n\t     * @param {?} console\n\t     * @param {...?} values\n\t     * @return {?}\n\t     */\n\t    DebugContext_.prototype.logError = function (console) {\n\t        var values = [];\n\t        for (var _i = 1; _i < arguments.length; _i++) {\n\t            values[_i - 1] = arguments[_i];\n\t        }\n\t        var /** @type {?} */ logViewDef;\n\t        var /** @type {?} */ logNodeIndex;\n\t        if (this.nodeDef.flags & 2 /* TypeText */) {\n\t            logViewDef = this.view.def;\n\t            logNodeIndex = this.nodeDef.nodeIndex;\n\t        }\n\t        else {\n\t            logViewDef = this.elView.def;\n\t            logNodeIndex = this.elDef.nodeIndex;\n\t        }\n\t        // Note: we only generate a log function for text and element nodes\n\t        // to make the generated code as small as possible.\n\t        var /** @type {?} */ renderNodeIndex = getRenderNodeIndex(logViewDef, logNodeIndex);\n\t        var /** @type {?} */ currRenderNodeIndex = -1;\n\t        var /** @type {?} */ nodeLogger = function () {\n\t            currRenderNodeIndex++;\n\t            if (currRenderNodeIndex === renderNodeIndex) {\n\t                return (_a = console.error).bind.apply(_a, [console].concat(values));\n\t            }\n\t            else {\n\t                return NOOP;\n\t            }\n\t            var _a;\n\t        }; /** @type {?} */\n\t        ((logViewDef.factory))(nodeLogger);\n\t        if (currRenderNodeIndex < renderNodeIndex) {\n\t            console.error('Illegal state: the ViewDefinitionFactory did not call the logger!');\n\t            console.error.apply(console, values);\n\t        }\n\t    };\n\t    return DebugContext_;\n\t}());\n\t/**\n\t * @param {?} viewDef\n\t * @param {?} nodeIndex\n\t * @return {?}\n\t */\n\tfunction getRenderNodeIndex(viewDef$$1, nodeIndex) {\n\t    var /** @type {?} */ renderNodeIndex = -1;\n\t    for (var /** @type {?} */ i = 0; i <= nodeIndex; i++) {\n\t        var /** @type {?} */ nodeDef = viewDef$$1.nodes[i];\n\t        if (nodeDef.flags & 3 /* CatRenderNode */) {\n\t            renderNodeIndex++;\n\t        }\n\t    }\n\t    return renderNodeIndex;\n\t}\n\t/**\n\t * @param {?} view\n\t * @return {?}\n\t */\n\tfunction findHostElement(view) {\n\t    while (view && !isComponentView(view)) {\n\t        view = ((view.parent));\n\t    }\n\t    if (view.parent) {\n\t        return asElementData(view.parent, /** @type {?} */ ((viewParentEl(view))).nodeIndex);\n\t    }\n\t    return null;\n\t}\n\t/**\n\t * @param {?} view\n\t * @param {?} nodeDef\n\t * @param {?} references\n\t * @return {?}\n\t */\n\tfunction collectReferences(view, nodeDef, references) {\n\t    for (var /** @type {?} */ refName in nodeDef.references) {\n\t        references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);\n\t    }\n\t}\n\t/**\n\t * @param {?} action\n\t * @param {?} fn\n\t * @param {?} self\n\t * @param {?} args\n\t * @return {?}\n\t */\n\tfunction callWithDebugContext(action, fn, self, args) {\n\t    var /** @type {?} */ oldAction = _currentAction;\n\t    var /** @type {?} */ oldView = _currentView;\n\t    var /** @type {?} */ oldNodeIndex = _currentNodeIndex;\n\t    try {\n\t        _currentAction = action;\n\t        var /** @type {?} */ result = fn.apply(self, args);\n\t        _currentView = oldView;\n\t        _currentNodeIndex = oldNodeIndex;\n\t        _currentAction = oldAction;\n\t        return result;\n\t    }\n\t    catch (e) {\n\t        if (isViewDebugError(e) || !_currentView) {\n\t            throw e;\n\t        }\n\t        throw viewWrappedDebugError(e, /** @type {?} */ ((getCurrentDebugContext())));\n\t    }\n\t}\n\t/**\n\t * @return {?}\n\t */\n\tfunction getCurrentDebugContext() {\n\t    return _currentView ? new DebugContext_(_currentView, _currentNodeIndex) : null;\n\t}\n\tvar DebugRendererFactory2 = (function () {\n\t    /**\n\t     * @param {?} delegate\n\t     */\n\t    function DebugRendererFactory2(delegate) {\n\t        this.delegate = delegate;\n\t    }\n\t    /**\n\t     * @param {?} element\n\t     * @param {?} renderData\n\t     * @return {?}\n\t     */\n\t    DebugRendererFactory2.prototype.createRenderer = function (element, renderData) {\n\t        return new DebugRenderer2(this.delegate.createRenderer(element, renderData));\n\t    };\n\t    /**\n\t     * @return {?}\n\t     */\n\t    DebugRendererFactory2.prototype.begin = function () {\n\t        if (this.delegate.begin) {\n\t            this.delegate.begin();\n\t        }\n\t    };\n\t    /**\n\t     * @return {?}\n\t     */\n\t    DebugRendererFactory2.prototype.end = function () {\n\t        if (this.delegate.end) {\n\t            this.delegate.end();\n\t        }\n\t    };\n\t    /**\n\t     * @return {?}\n\t     */\n\t    DebugRendererFactory2.prototype.whenRenderingDone = function () {\n\t        if (this.delegate.whenRenderingDone) {\n\t            return this.delegate.whenRenderingDone();\n\t        }\n\t        return Promise.resolve(null);\n\t    };\n\t    return DebugRendererFactory2;\n\t}());\n\tvar DebugRenderer2 = (function () {\n\t    /**\n\t     * @param {?} delegate\n\t     */\n\t    function DebugRenderer2(delegate) {\n\t        this.delegate = delegate;\n\t    }\n\t    Object.defineProperty(DebugRenderer2.prototype, \"data\", {\n\t        /**\n\t         * @return {?}\n\t         */\n\t        get: function () { return this.delegate.data; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    /**\n\t     * @param {?} node\n\t     * @return {?}\n\t     */\n\t    DebugRenderer2.prototype.destroyNode = function (node) {\n\t        removeDebugNodeFromIndex(/** @type {?} */ ((getDebugNode(node))));\n\t        if (this.delegate.destroyNode) {\n\t            this.delegate.destroyNode(node);\n\t        }\n\t    };\n\t    /**\n\t     * @return {?}\n\t     */\n\t    DebugRenderer2.prototype.destroy = function () { this.delegate.destroy(); };\n\t    /**\n\t     * @param {?} name\n\t     * @param {?=} namespace\n\t     * @return {?}\n\t     */\n\t    DebugRenderer2.prototype.createElement = function (name, namespace) {\n\t        var /** @type {?} */ el = this.delegate.createElement(name, namespace);\n\t        var /** @type {?} */ debugCtx = getCurrentDebugContext();\n\t        if (debugCtx) {\n\t            var /** @type {?} */ debugEl = new DebugElement(el, null, debugCtx);\n\t            debugEl.name = name;\n\t            indexDebugNode(debugEl);\n\t        }\n\t        return el;\n\t    };\n\t    /**\n\t     * @param {?} value\n\t     * @return {?}\n\t     */\n\t    DebugRenderer2.prototype.createComment = function (value) {\n\t        var /** @type {?} */ comment = this.delegate.createComment(value);\n\t        var /** @type {?} */ debugCtx = getCurrentDebugContext();\n\t        if (debugCtx) {\n\t            indexDebugNode(new DebugNode(comment, null, debugCtx));\n\t        }\n\t        return comment;\n\t    };\n\t    /**\n\t     * @param {?} value\n\t     * @return {?}\n\t     */\n\t    DebugRenderer2.prototype.createText = function (value) {\n\t        var /** @type {?} */ text = this.delegate.createText(value);\n\t        var /** @type {?} */ debugCtx = getCurrentDebugContext();\n\t        if (debugCtx) {\n\t            indexDebugNode(new DebugNode(text, null, debugCtx));\n\t        }\n\t        return text;\n\t    };\n\t    /**\n\t     * @param {?} parent\n\t     * @param {?} newChild\n\t     * @return {?}\n\t     */\n\t    DebugRenderer2.prototype.appendChild = function (parent, newChild) {\n\t        var /** @type {?} */ debugEl = getDebugNode(parent);\n\t        var /** @type {?} */ debugChildEl = getDebugNode(newChild);\n\t        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {\n\t            debugEl.addChild(debugChildEl);\n\t        }\n\t        this.delegate.appendChild(parent, newChild);\n\t    };\n\t    /**\n\t     * @param {?} parent\n\t     * @param {?} newChild\n\t     * @param {?} refChild\n\t     * @return {?}\n\t     */\n\t    DebugRenderer2.prototype.insertBefore = function (parent, newChild, refChild) {\n\t        var /** @type {?} */ debugEl = getDebugNode(parent);\n\t        var /** @type {?} */ debugChildEl = getDebugNode(newChild);\n\t        var /** @type {?} */ debugRefEl = ((getDebugNode(refChild)));\n\t        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {\n\t            debugEl.insertBefore(debugRefEl, debugChildEl);\n\t        }\n\t        this.delegate.insertBefore(parent, newChild, refChild);\n\t    };\n\t    /**\n\t     * @param {?} parent\n\t     * @param {?} oldChild\n\t     * @return {?}\n\t     */\n\t    DebugRenderer2.prototype.removeChild = function (parent, oldChild) {\n\t        var /** @type {?} */ debugEl = getDebugNode(parent);\n\t        var /** @type {?} */ debugChildEl = getDebugNode(oldChild);\n\t        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {\n\t            debugEl.removeChild(debugChildEl);\n\t        }\n\t        this.delegate.removeChild(parent, oldChild);\n\t    };\n\t    /**\n\t     * @param {?} selectorOrNode\n\t     * @return {?}\n\t     */\n\t    DebugRenderer2.prototype.selectRootElement = function (selectorOrNode) {\n\t        var /** @type {?} */ el = this.delegate.selectRootElement(selectorOrNode);\n\t        var /** @type {?} */ debugCtx = getCurrentDebugContext();\n\t        if (debugCtx) {\n\t            indexDebugNode(new DebugElement(el, null, debugCtx));\n\t        }\n\t        return el;\n\t    };\n\t    /**\n\t     * @param {?} el\n\t     * @param {?} name\n\t     * @param {?} value\n\t     * @param {?=} namespace\n\t     * @return {?}\n\t     */\n\t    DebugRenderer2.prototype.setAttribute = function (el, name, value, namespace) {\n\t        var /** @type {?} */ debugEl = getDebugNode(el);\n\t        if (debugEl && debugEl instanceof DebugElement) {\n\t            var /** @type {?} */ fullName = namespace ? namespace + ':' + name : name;\n\t            debugEl.attributes[fullName] = value;\n\t        }\n\t        this.delegate.setAttribute(el, name, value, namespace);\n\t    };\n\t    /**\n\t     * @param {?} el\n\t     * @param {?} name\n\t     * @param {?=} namespace\n\t     * @return {?}\n\t     */\n\t    DebugRenderer2.prototype.removeAttribute = function (el, name, namespace) {\n\t        var /** @type {?} */ debugEl = getDebugNode(el);\n\t        if (debugEl && debugEl instanceof DebugElement) {\n\t            var /** @type {?} */ fullName = namespace ? namespace + ':' + name : name;\n\t            debugEl.attributes[fullName] = null;\n\t        }\n\t        this.delegate.removeAttribute(el, name, namespace);\n\t    };\n\t    /**\n\t     * @param {?} el\n\t     * @param {?} name\n\t     * @return {?}\n\t     */\n\t    DebugRenderer2.prototype.addClass = function (el, name) {\n\t        var /** @type {?} */ debugEl = getDebugNode(el);\n\t        if (debugEl && debugEl instanceof DebugElement) {\n\t            debugEl.classes[name] = true;\n\t        }\n\t        this.delegate.addClass(el, name);\n\t    };\n\t    /**\n\t     * @param {?} el\n\t     * @param {?} name\n\t     * @return {?}\n\t     */\n\t    DebugRenderer2.prototype.removeClass = function (el, name) {\n\t        var /** @type {?} */ debugEl = getDebugNode(el);\n\t        if (debugEl && debugEl instanceof DebugElement) {\n\t            debugEl.classes[name] = false;\n\t        }\n\t        this.delegate.removeClass(el, name);\n\t    };\n\t    /**\n\t     * @param {?} el\n\t     * @param {?} style\n\t     * @param {?} value\n\t     * @param {?} flags\n\t     * @return {?}\n\t     */\n\t    DebugRenderer2.prototype.setStyle = function (el, style, value, flags) {\n\t        var /** @type {?} */ debugEl = getDebugNode(el);\n\t        if (debugEl && debugEl instanceof DebugElement) {\n\t            debugEl.styles[style] = value;\n\t        }\n\t        this.delegate.setStyle(el, style, value, flags);\n\t    };\n\t    /**\n\t     * @param {?} el\n\t     * @param {?} style\n\t     * @param {?} flags\n\t     * @return {?}\n\t     */\n\t    DebugRenderer2.prototype.removeStyle = function (el, style, flags) {\n\t        var /** @type {?} */ debugEl = getDebugNode(el);\n\t        if (debugEl && debugEl instanceof DebugElement) {\n\t            debugEl.styles[style] = null;\n\t        }\n\t        this.delegate.removeStyle(el, style, flags);\n\t    };\n\t    /**\n\t     * @param {?} el\n\t     * @param {?} name\n\t     * @param {?} value\n\t     * @return {?}\n\t     */\n\t    DebugRenderer2.prototype.setProperty = function (el, name, value) {\n\t        var /** @type {?} */ debugEl = getDebugNode(el);\n\t        if (debugEl && debugEl instanceof DebugElement) {\n\t            debugEl.properties[name] = value;\n\t        }\n\t        this.delegate.setProperty(el, name, value);\n\t    };\n\t    /**\n\t     * @param {?} target\n\t     * @param {?} eventName\n\t     * @param {?} callback\n\t     * @return {?}\n\t     */\n\t    DebugRenderer2.prototype.listen = function (target, eventName, callback) {\n\t        if (typeof target !== 'string') {\n\t            var /** @type {?} */ debugEl = getDebugNode(target);\n\t            if (debugEl) {\n\t                debugEl.listeners.push(new EventListener(eventName, callback));\n\t            }\n\t        }\n\t        return this.delegate.listen(target, eventName, callback);\n\t    };\n\t    /**\n\t     * @param {?} node\n\t     * @return {?}\n\t     */\n\t    DebugRenderer2.prototype.parentNode = function (node) { return this.delegate.parentNode(node); };\n\t    /**\n\t     * @param {?} node\n\t     * @return {?}\n\t     */\n\t    DebugRenderer2.prototype.nextSibling = function (node) { return this.delegate.nextSibling(node); };\n\t    /**\n\t     * @param {?} node\n\t     * @param {?} value\n\t     * @return {?}\n\t     */\n\t    DebugRenderer2.prototype.setValue = function (node, value) { return this.delegate.setValue(node, value); };\n\t    return DebugRenderer2;\n\t}());\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * @param {?} override\n\t * @return {?}\n\t */\n\tfunction overrideProvider(override) {\n\t    initServicesIfNeeded();\n\t    return Services.overrideProvider(override);\n\t}\n\t/**\n\t * @return {?}\n\t */\n\tfunction clearProviderOverrides() {\n\t    initServicesIfNeeded();\n\t    return Services.clearProviderOverrides();\n\t}\n\t/**\n\t * @param {?} ngModuleType\n\t * @param {?} bootstrapComponents\n\t * @param {?} defFactory\n\t * @return {?}\n\t */\n\tfunction createNgModuleFactory(ngModuleType, bootstrapComponents, defFactory) {\n\t    return new NgModuleFactory_(ngModuleType, bootstrapComponents, defFactory);\n\t}\n\tvar NgModuleFactory_ = (function (_super) {\n\t    __extends(NgModuleFactory_, _super);\n\t    /**\n\t     * @param {?} moduleType\n\t     * @param {?} _bootstrapComponents\n\t     * @param {?} _ngModuleDefFactory\n\t     */\n\t    function NgModuleFactory_(moduleType, _bootstrapComponents, _ngModuleDefFactory) {\n\t        var _this = \n\t        // Attention: this ctor is called as top level function.\n\t        // Putting any logic in here will destroy closure tree shaking!\n\t        _super.call(this) || this;\n\t        _this.moduleType = moduleType;\n\t        _this._bootstrapComponents = _bootstrapComponents;\n\t        _this._ngModuleDefFactory = _ngModuleDefFactory;\n\t        return _this;\n\t    }\n\t    /**\n\t     * @param {?} parentInjector\n\t     * @return {?}\n\t     */\n\t    NgModuleFactory_.prototype.create = function (parentInjector) {\n\t        initServicesIfNeeded();\n\t        var /** @type {?} */ def = resolveDefinition(this._ngModuleDefFactory);\n\t        return Services.createNgModuleRef(this.moduleType, parentInjector || Injector.NULL, this._bootstrapComponents, def);\n\t    };\n\t    return NgModuleFactory_;\n\t}(NgModuleFactory));\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * \\@experimental Animation support is experimental.\n\t */\n\t/**\n\t * `trigger` is an animation-specific function that is designed to be used inside of Angular's\n\t * animation DSL language. If this information is new, please navigate to the\n\t * {\\@link Component#animations component animations metadata page} to gain a better\n\t * understanding of how animations in Angular are used.\n\t *\n\t * `trigger` Creates an animation trigger which will a list of {\\@link state state} and\n\t * {\\@link transition transition} entries that will be evaluated when the expression\n\t * bound to the trigger changes.\n\t *\n\t * Triggers are registered within the component annotation data under the\n\t * {\\@link Component#animations animations section}. An animation trigger can be placed on an element\n\t * within a template by referencing the name of the trigger followed by the expression value that\n\t * the\n\t * trigger is bound to (in the form of `[\\@triggerName]=\"expression\"`.\n\t *\n\t * Animation trigger bindings strigify values and then match the previous and current values against\n\t * any linked transitions. If a boolean value is provided into the trigger binding then it will both\n\t * be represented as `1` or `true` and `0` or `false` for a true and false boolean values\n\t * respectively.\n\t *\n\t * ### Usage\n\t *\n\t * `trigger` will create an animation trigger reference based on the provided `name` value. The\n\t * provided `animation` value is expected to be an array consisting of {\\@link state state} and\n\t * {\\@link transition transition} declarations.\n\t *\n\t * ```typescript\n\t * \\@Component({\n\t *   selector: 'my-component',\n\t *   templateUrl: 'my-component-tpl.html',\n\t *   animations: [\n\t *     trigger(\"myAnimationTrigger\", [\n\t *       state(...),\n\t *       state(...),\n\t *       transition(...),\n\t *       transition(...)\n\t *     ])\n\t *   ]\n\t * })\n\t * class MyComponent {\n\t *   myStatusExp = \"something\";\n\t * }\n\t * ```\n\t *\n\t * The template associated with this component will make use of the `myAnimationTrigger` animation\n\t * trigger by binding to an element within its template code.\n\t *\n\t * ```html\n\t * <!-- somewhere inside of my-component-tpl.html -->\n\t * <div [\\@myAnimationTrigger]=\"myStatusExp\">...</div>\n\t * ```\n\t *\n\t * ## Disable Animations\n\t * A special animation control binding called `\\@.disabled` can be placed on an element which will\n\t * then disable animations for any inner animation triggers situated within the element as well as\n\t * any animations on the element itself.\n\t *\n\t * When true, the `\\@.disabled` binding will prevent all animations from rendering. The example\n\t * below shows how to use this feature:\n\t *\n\t * ```ts\n\t * \\@Component({\n\t *   selector: 'my-component',\n\t *   template: `\n\t *     <div [\\@.disabled]=\"isDisabled\">\n\t *       <div [\\@childAnimation]=\"exp\"></div>\n\t *     </div>\n\t *   `,\n\t *   animations: [\n\t *     trigger(\"childAnimation\", [\n\t *       // ...\n\t *     ])\n\t *   ]\n\t * })\n\t * class MyComponent {\n\t *   isDisabled = true;\n\t *   exp = '...';\n\t * }\n\t * ```\n\t *\n\t * The `\\@childAnimation` trigger will not animate because `\\@.disabled` prevents it from happening\n\t * (when true).\n\t *\n\t * Note that `\\@.disbled` will only disable all animations (this means any animations running on\n\t * the same element will also be disabled).\n\t *\n\t * ### Disabling Animations Application-wide\n\t * When an area of the template is set to have animations disabled, **all** inner components will\n\t * also have their animations disabled as well. This means that all animations for an angular\n\t * application can be disabled by placing a host binding set on `\\@.disabled` on the topmost Angular\n\t * component.\n\t *\n\t * ```ts\n\t * import {Component, HostBinding} from '\\@angular/core';\n\t *\n\t * \\@Component({\n\t *   selector: 'app-component',\n\t *   templateUrl: 'app.component.html',\n\t * })\n\t * class AppComponent {\n\t *   \\@HostBinding('\\@.disabled')\n\t *   public animationsDisabled = true;\n\t * }\n\t * ```\n\t *\n\t * ### What about animations that us `query()` and `animateChild()`?\n\t * Despite inner animations being disabled, a parent animation can {\\@link query query} for inner\n\t * elements located in disabled areas of the template and still animate them as it sees fit. This is\n\t * also the case for when a sub animation is queried by a parent and then later animated using {\\@link\n\t * animateChild animateChild}.\n\t *\n\t * \\@experimental Animation support is experimental.\n\t * @param {?} name\n\t * @param {?} definitions\n\t * @return {?}\n\t */\n\tfunction trigger$1(name, definitions) {\n\t    return { type: 7 /* Trigger */, name: name, definitions: definitions, options: {} };\n\t}\n\t/**\n\t * `animate` is an animation-specific function that is designed to be used inside of Angular's\n\t * animation DSL language. If this information is new, please navigate to the {\\@link\n\t * Component#animations component animations metadata page} to gain a better understanding of\n\t * how animations in Angular are used.\n\t *\n\t * `animate` specifies an animation step that will apply the provided `styles` data for a given\n\t * amount of time based on the provided `timing` expression value. Calls to `animate` are expected\n\t * to be used within {\\@link sequence an animation sequence}, {\\@link group group}, or {\\@link\n\t * transition transition}.\n\t *\n\t * ### Usage\n\t *\n\t * The `animate` function accepts two input parameters: `timing` and `styles`:\n\t *\n\t * - `timing` is a string based value that can be a combination of a duration with optional delay\n\t * and easing values. The format for the expression breaks down to `duration delay easing`\n\t * (therefore a value such as `1s 100ms ease-out` will be parse itself into `duration=1000,\n\t * delay=100, easing=ease-out`. If a numeric value is provided then that will be used as the\n\t * `duration` value in millisecond form.\n\t * - `styles` is the style input data which can either be a call to {\\@link style style} or {\\@link\n\t * keyframes keyframes}. If left empty then the styles from the destination state will be collected\n\t * and used (this is useful when describing an animation step that will complete an animation by\n\t * {\\@link transition#the-final-animate-call animating to the final state}).\n\t *\n\t * ```typescript\n\t * // various functions for specifying timing data\n\t * animate(500, style(...))\n\t * animate(\"1s\", style(...))\n\t * animate(\"100ms 0.5s\", style(...))\n\t * animate(\"5s ease\", style(...))\n\t * animate(\"5s 10ms cubic-bezier(.17,.67,.88,.1)\", style(...))\n\t *\n\t * // either style() of keyframes() can be used\n\t * animate(500, style({ background: \"red\" }))\n\t * animate(500, keyframes([\n\t *   style({ background: \"blue\" })),\n\t *   style({ background: \"red\" }))\n\t * ])\n\t * ```\n\t *\n\t * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n\t *\n\t * \\@experimental Animation support is experimental.\n\t * @param {?} timings\n\t * @param {?=} styles\n\t * @return {?}\n\t */\n\tfunction animate$1(timings, styles) {\n\t    if (styles === void 0) { styles = null; }\n\t    return { type: 4 /* Animate */, styles: styles, timings: timings };\n\t}\n\t/**\n\t * `group` is an animation-specific function that is designed to be used inside of Angular's\n\t * animation DSL language. If this information is new, please navigate to the {\\@link\n\t * Component#animations component animations metadata page} to gain a better understanding of\n\t * how animations in Angular are used.\n\t *\n\t * `group` specifies a list of animation steps that are all run in parallel. Grouped animations are\n\t * useful when a series of styles must be animated/closed off at different starting/ending times.\n\t *\n\t * The `group` function can either be used within a {\\@link sequence sequence} or a {\\@link transition\n\t * transition} and it will only continue to the next instruction once all of the inner animation\n\t * steps have completed.\n\t *\n\t * ### Usage\n\t *\n\t * The `steps` data that is passed into the `group` animation function can either consist of {\\@link\n\t * style style} or {\\@link animate animate} function calls. Each call to `style()` or `animate()`\n\t * within a group will be executed instantly (use {\\@link keyframes keyframes} or a {\\@link\n\t * animate#usage animate() with a delay value} to offset styles to be applied at a later time).\n\t *\n\t * ```typescript\n\t * group([\n\t *   animate(\"1s\", { background: \"black\" }))\n\t *   animate(\"2s\", { color: \"white\" }))\n\t * ])\n\t * ```\n\t *\n\t * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n\t *\n\t * \\@experimental Animation support is experimental.\n\t * @param {?} steps\n\t * @param {?=} options\n\t * @return {?}\n\t */\n\tfunction group$1(steps, options) {\n\t    if (options === void 0) { options = null; }\n\t    return { type: 3 /* Group */, steps: steps, options: options };\n\t}\n\t/**\n\t * `sequence` is an animation-specific function that is designed to be used inside of Angular's\n\t * animation DSL language. If this information is new, please navigate to the {\\@link\n\t * Component#animations component animations metadata page} to gain a better understanding of\n\t * how animations in Angular are used.\n\t *\n\t * `sequence` Specifies a list of animation steps that are run one by one. (`sequence` is used by\n\t * default when an array is passed as animation data into {\\@link transition transition}.)\n\t *\n\t * The `sequence` function can either be used within a {\\@link group group} or a {\\@link transition\n\t * transition} and it will only continue to the next instruction once each of the inner animation\n\t * steps have completed.\n\t *\n\t * To perform animation styling in parallel with other animation steps then have a look at the\n\t * {\\@link group group} animation function.\n\t *\n\t * ### Usage\n\t *\n\t * The `steps` data that is passed into the `sequence` animation function can either consist of\n\t * {\\@link style style} or {\\@link animate animate} function calls. A call to `style()` will apply the\n\t * provided styling data immediately while a call to `animate()` will apply its styling data over a\n\t * given time depending on its timing data.\n\t *\n\t * ```typescript\n\t * sequence([\n\t *   style({ opacity: 0 })),\n\t *   animate(\"1s\", { opacity: 1 }))\n\t * ])\n\t * ```\n\t *\n\t * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n\t *\n\t * \\@experimental Animation support is experimental.\n\t * @param {?} steps\n\t * @param {?=} options\n\t * @return {?}\n\t */\n\tfunction sequence$1(steps, options) {\n\t    if (options === void 0) { options = null; }\n\t    return { type: 2 /* Sequence */, steps: steps, options: options };\n\t}\n\t/**\n\t * `style` is an animation-specific function that is designed to be used inside of Angular's\n\t * animation DSL language. If this information is new, please navigate to the {\\@link\n\t * Component#animations component animations metadata page} to gain a better understanding of\n\t * how animations in Angular are used.\n\t *\n\t * `style` declares a key/value object containing CSS properties/styles that can then be used for\n\t * {\\@link state animation states}, within an {\\@link sequence animation sequence}, or as styling data\n\t * for both {\\@link animate animate} and {\\@link keyframes keyframes}.\n\t *\n\t * ### Usage\n\t *\n\t * `style` takes in a key/value string map as data and expects one or more CSS property/value pairs\n\t * to be defined.\n\t *\n\t * ```typescript\n\t * // string values are used for css properties\n\t * style({ background: \"red\", color: \"blue\" })\n\t *\n\t * // numerical (pixel) values are also supported\n\t * style({ width: 100, height: 0 })\n\t * ```\n\t *\n\t * #### Auto-styles (using `*`)\n\t *\n\t * When an asterix (`*`) character is used as a value then it will be detected from the element\n\t * being animated and applied as animation data when the animation starts.\n\t *\n\t * This feature proves useful for a state depending on layout and/or environment factors; in such\n\t * cases the styles are calculated just before the animation starts.\n\t *\n\t * ```typescript\n\t * // the steps below will animate from 0 to the\n\t * // actual height of the element\n\t * style({ height: 0 }),\n\t * animate(\"1s\", style({ height: \"*\" }))\n\t * ```\n\t *\n\t * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n\t *\n\t * \\@experimental Animation support is experimental.\n\t * @param {?} tokens\n\t * @return {?}\n\t */\n\tfunction style$1(tokens) {\n\t    return { type: 6 /* Style */, styles: tokens, offset: null };\n\t}\n\t/**\n\t * `state` is an animation-specific function that is designed to be used inside of Angular's\n\t * animation DSL language. If this information is new, please navigate to the {\\@link\n\t * Component#animations component animations metadata page} to gain a better understanding of\n\t * how animations in Angular are used.\n\t *\n\t * `state` declares an animation state within the given trigger. When a state is active within a\n\t * component then its associated styles will persist on the element that the trigger is attached to\n\t * (even when the animation ends).\n\t *\n\t * To animate between states, have a look at the animation {\\@link transition transition} DSL\n\t * function. To register states to an animation trigger please have a look at the {\\@link trigger\n\t * trigger} function.\n\t *\n\t * #### The `void` state\n\t *\n\t * The `void` state value is a reserved word that angular uses to determine when the element is not\n\t * apart of the application anymore (e.g. when an `ngIf` evaluates to false then the state of the\n\t * associated element is void).\n\t *\n\t * #### The `*` (default) state\n\t *\n\t * The `*` state (when styled) is a fallback state that will be used if the state that is being\n\t * animated is not declared within the trigger.\n\t *\n\t * ### Usage\n\t *\n\t * `state` will declare an animation state with its associated styles\n\t * within the given trigger.\n\t *\n\t * - `stateNameExpr` can be one or more state names separated by commas.\n\t * - `styles` refers to the {\\@link style styling data} that will be persisted on the element once\n\t * the state has been reached.\n\t *\n\t * ```typescript\n\t * // \"void\" is a reserved name for a state and is used to represent\n\t * // the state in which an element is detached from from the application.\n\t * state(\"void\", style({ height: 0 }))\n\t *\n\t * // user-defined states\n\t * state(\"closed\", style({ height: 0 }))\n\t * state(\"open, visible\", style({ height: \"*\" }))\n\t * ```\n\t *\n\t * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n\t *\n\t * \\@experimental Animation support is experimental.\n\t * @param {?} name\n\t * @param {?} styles\n\t * @param {?=} options\n\t * @return {?}\n\t */\n\tfunction state$1(name, styles, options) {\n\t    return { type: 0 /* State */, name: name, styles: styles, options: options };\n\t}\n\t/**\n\t * `keyframes` is an animation-specific function that is designed to be used inside of Angular's\n\t * animation DSL language. If this information is new, please navigate to the {\\@link\n\t * Component#animations component animations metadata page} to gain a better understanding of\n\t * how animations in Angular are used.\n\t *\n\t * `keyframes` specifies a collection of {\\@link style style} entries each optionally characterized\n\t * by an `offset` value.\n\t *\n\t * ### Usage\n\t *\n\t * The `keyframes` animation function is designed to be used alongside the {\\@link animate animate}\n\t * animation function. Instead of applying animations from where they are currently to their\n\t * destination, keyframes can describe how each style entry is applied and at what point within the\n\t * animation arc (much like CSS Keyframe Animations do).\n\t *\n\t * For each `style()` entry an `offset` value can be set. Doing so allows to specifiy at what\n\t * percentage of the animate time the styles will be applied.\n\t *\n\t * ```typescript\n\t * // the provided offset values describe when each backgroundColor value is applied.\n\t * animate(\"5s\", keyframes([\n\t *   style({ backgroundColor: \"red\", offset: 0 }),\n\t *   style({ backgroundColor: \"blue\", offset: 0.2 }),\n\t *   style({ backgroundColor: \"orange\", offset: 0.3 }),\n\t *   style({ backgroundColor: \"black\", offset: 1 })\n\t * ]))\n\t * ```\n\t *\n\t * Alternatively, if there are no `offset` values used within the style entries then the offsets\n\t * will be calculated automatically.\n\t *\n\t * ```typescript\n\t * animate(\"5s\", keyframes([\n\t *   style({ backgroundColor: \"red\" }) // offset = 0\n\t *   style({ backgroundColor: \"blue\" }) // offset = 0.33\n\t *   style({ backgroundColor: \"orange\" }) // offset = 0.66\n\t *   style({ backgroundColor: \"black\" }) // offset = 1\n\t * ]))\n\t * ```\n\t *\n\t * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n\t *\n\t * \\@experimental Animation support is experimental.\n\t * @param {?} steps\n\t * @return {?}\n\t */\n\tfunction keyframes$1(steps) {\n\t    return { type: 5 /* Keyframes */, steps: steps };\n\t}\n\t/**\n\t * `transition` is an animation-specific function that is designed to be used inside of Angular's\n\t * animation DSL language. If this information is new, please navigate to the {\\@link\n\t * Component#animations component animations metadata page} to gain a better understanding of\n\t * how animations in Angular are used.\n\t *\n\t * `transition` declares the {\\@link sequence sequence of animation steps} that will be run when the\n\t * provided `stateChangeExpr` value is satisfied. The `stateChangeExpr` consists of a `state1 =>\n\t * state2` which consists of two known states (use an asterix (`*`) to refer to a dynamic starting\n\t * and/or ending state).\n\t *\n\t * A function can also be provided as the `stateChangeExpr` argument for a transition and this\n\t * function will be executed each time a state change occurs. If the value returned within the\n\t * function is true then the associated animation will be run.\n\t *\n\t * Animation transitions are placed within an {\\@link trigger animation trigger}. For an transition\n\t * to animate to a state value and persist its styles then one or more {\\@link state animation\n\t * states} is expected to be defined.\n\t *\n\t * ### Usage\n\t *\n\t * An animation transition is kicked off the `stateChangeExpr` predicate evaluates to true based on\n\t * what the previous state is and what the current state has become. In other words, if a transition\n\t * is defined that matches the old/current state criteria then the associated animation will be\n\t * triggered.\n\t *\n\t * ```typescript\n\t * // all transition/state changes are defined within an animation trigger\n\t * trigger(\"myAnimationTrigger\", [\n\t *   // if a state is defined then its styles will be persisted when the\n\t *   // animation has fully completed itself\n\t *   state(\"on\", style({ background: \"green\" })),\n\t *   state(\"off\", style({ background: \"grey\" })),\n\t *\n\t *   // a transition animation that will be kicked off when the state value\n\t *   // bound to \"myAnimationTrigger\" changes from \"on\" to \"off\"\n\t *   transition(\"on => off\", animate(500)),\n\t *\n\t *   // it is also possible to do run the same animation for both directions\n\t *   transition(\"on <=> off\", animate(500)),\n\t *\n\t *   // or to define multiple states pairs separated by commas\n\t *   transition(\"on => off, off => void\", animate(500)),\n\t *\n\t *   // this is a catch-all state change for when an element is inserted into\n\t *   // the page and the destination state is unknown\n\t *   transition(\"void => *\", [\n\t *     style({ opacity: 0 }),\n\t *     animate(500)\n\t *   ]),\n\t *\n\t *   // this will capture a state change between any states\n\t *   transition(\"* => *\", animate(\"1s 0s\")),\n\t *\n\t *   // you can also go full out and include a function\n\t *   transition((fromState, toState) => {\n\t *     // when `true` then it will allow the animation below to be invoked\n\t *     return fromState == \"off\" && toState == \"on\";\n\t *   }, animate(\"1s 0s\"))\n\t * ])\n\t * ```\n\t *\n\t * The template associated with this component will make use of the `myAnimationTrigger` animation\n\t * trigger by binding to an element within its template code.\n\t *\n\t * ```html\n\t * <!-- somewhere inside of my-component-tpl.html -->\n\t * <div [\\@myAnimationTrigger]=\"myStatusExp\">...</div>\n\t * ```\n\t *\n\t * #### The final `animate` call\n\t *\n\t * If the final step within the transition steps is a call to `animate()` that **only** uses a\n\t * timing value with **no style data** then it will be automatically used as the final animation arc\n\t * for the element to animate itself to the final state. This involves an automatic mix of\n\t * adding/removing CSS styles so that the element will be in the exact state it should be for the\n\t * applied state to be presented correctly.\n\t *\n\t * ```\n\t * // start off by hiding the element, but make sure that it animates properly to whatever state\n\t * // is currently active for \"myAnimationTrigger\"\n\t * transition(\"void => *\", [\n\t *   style({ opacity: 0 }),\n\t *   animate(500)\n\t * ])\n\t * ```\n\t *\n\t * ### Transition Aliases (`:enter` and `:leave`)\n\t *\n\t * Given that enter (insertion) and leave (removal) animations are so common, the `transition`\n\t * function accepts both `:enter` and `:leave` values which are aliases for the `void => *` and `*\n\t * => void` state changes.\n\t *\n\t * ```\n\t * transition(\":enter\", [\n\t *   style({ opacity: 0 }),\n\t *   animate(500, style({ opacity: 1 }))\n\t * ])\n\t * transition(\":leave\", [\n\t *   animate(500, style({ opacity: 0 }))\n\t * ])\n\t * ```\n\t *\n\t * ### Boolean values\n\t * if a trigger binding value is a boolean value then it can be matched using a transition\n\t * expression that compares `true` and `false` or `1` and `0`.\n\t *\n\t * ```\n\t * // in the template\n\t * <div [\\@openClose]=\"open ? true : false\">...</div>\n\t *\n\t * // in the component metadata\n\t * trigger('openClose', [\n\t *   state('true', style({ height: '*' })),\n\t *   state('false', style({ height: '0px' })),\n\t *   transition('false <=> true', animate(500))\n\t * ])\n\t * ```\n\t * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n\t *\n\t * \\@experimental Animation support is experimental.\n\t * @param {?} stateChangeExpr\n\t * @param {?} steps\n\t * @param {?=} options\n\t * @return {?}\n\t */\n\tfunction transition$1(stateChangeExpr, steps, options) {\n\t    if (options === void 0) { options = null; }\n\t    return { type: 1 /* Transition */, expr: stateChangeExpr, animation: steps, options: options };\n\t}\n\t/**\n\t * `animation` is an animation-specific function that is designed to be used inside of Angular's\n\t * animation DSL language.\n\t *\n\t * `var myAnimation = animation(...)` is designed to produce a reusable animation that can be later\n\t * invoked in another animation or sequence. Reusable animations are designed to make use of\n\t * animation parameters and the produced animation can be used via the `useAnimation` method.\n\t *\n\t * ```\n\t * var fadeAnimation = animation([\n\t *   style({ opacity: '{{ start }}' }),\n\t *   animate('{{ time }}',\n\t *     style({ opacity: '{{ end }}'}))\n\t * ], { params: { time: '1000ms', start: 0, end: 1 }});\n\t * ```\n\t *\n\t * If parameters are attached to an animation then they act as **default parameter values**. When an\n\t * animation is invoked via `useAnimation` then parameter values are allowed to be passed in\n\t * directly. If any of the passed in parameter values are missing then the default values will be\n\t * used.\n\t *\n\t * ```\n\t * useAnimation(fadeAnimation, {\n\t *   params: {\n\t *     time: '2s',\n\t *     start: 1,\n\t *     end: 0\n\t *   }\n\t * })\n\t * ```\n\t *\n\t * If one or more parameter values are missing before animated then an error will be thrown.\n\t *\n\t * \\@experimental Animation support is experimental.\n\t * @param {?} steps\n\t * @param {?=} options\n\t * @return {?}\n\t */\n\t/**\n\t * `animateChild` is an animation-specific function that is designed to be used inside of Angular's\n\t * animation DSL language. It works by allowing a queried element to execute its own\n\t * animation within the animation sequence.\n\t *\n\t * Each time an animation is triggered in angular, the parent animation\n\t * will always get priority and any child animations will be blocked. In order\n\t * for a child animation to run, the parent animation must query each of the elements\n\t * containing child animations and then allow the animations to run using `animateChild`.\n\t *\n\t * The example HTML code below shows both parent and child elements that have animation\n\t * triggers that will execute at the same time.\n\t *\n\t * ```html\n\t * <!-- parent-child.component.html -->\n\t * <button (click)=\"exp =! exp\">Toggle</button>\n\t * <hr>\n\t *\n\t * <div [\\@parentAnimation]=\"exp\">\n\t *   <header>Hello</header>\n\t *   <div [\\@childAnimation]=\"exp\">\n\t *       one\n\t *   </div>\n\t *   <div [\\@childAnimation]=\"exp\">\n\t *       two\n\t *   </div>\n\t *   <div [\\@childAnimation]=\"exp\">\n\t *       three\n\t *   </div>\n\t * </div>\n\t * ```\n\t *\n\t * Now when the `exp` value changes to true, only the `parentAnimation` animation will animate\n\t * because it has priority. However, using `query` and `animateChild` each of the inner animations\n\t * can also fire:\n\t *\n\t * ```ts\n\t * // parent-child.component.ts\n\t * import {trigger, transition, animate, style, query, animateChild} from '\\@angular/animations';\n\t * \\@Component({\n\t *   selector: 'parent-child-component',\n\t *   animations: [\n\t *     trigger('parentAnimation', [\n\t *       transition('false => true', [\n\t *         query('header', [\n\t *           style({ opacity: 0 }),\n\t *           animate(500, style({ opacity: 1 }))\n\t *         ]),\n\t *         query('\\@childAnimation', [\n\t *           animateChild()\n\t *         ])\n\t *       ])\n\t *     ]),\n\t *     trigger('childAnimation', [\n\t *       transition('false => true', [\n\t *         style({ opacity: 0 }),\n\t *         animate(500, style({ opacity: 1 }))\n\t *       ])\n\t *     ])\n\t *   ]\n\t * })\n\t * class ParentChildCmp {\n\t *   exp: boolean = false;\n\t * }\n\t * ```\n\t *\n\t * In the animation code above, when the `parentAnimation` transition kicks off it first queries to\n\t * find the header element and fades it in. It then finds each of the sub elements that contain the\n\t * `\\@childAnimation` trigger and then allows for their animations to fire.\n\t *\n\t * This example can be further extended by using stagger:\n\t *\n\t * ```ts\n\t * query('\\@childAnimation', stagger(100, [\n\t *   animateChild()\n\t * ]))\n\t * ```\n\t *\n\t * Now each of the sub animations start off with respect to the `100ms` staggering step.\n\t *\n\t * ## The first frame of child animations\n\t * When sub animations are executed using `animateChild` the animation engine will always apply the\n\t * first frame of every sub animation immediately at the start of the animation sequence. This way\n\t * the parent animation does not need to set any initial styling data on the sub elements before the\n\t * sub animations kick off.\n\t *\n\t * In the example above the first frame of the `childAnimation`'s `false => true` transition\n\t * consists of a style of `opacity: 0`. This is applied immediately when the `parentAnimation`\n\t * animation transition sequence starts. Only then when the `\\@childAnimation` is queried and called\n\t * with `animateChild` will it then animate to its destination of `opacity: 1`.\n\t *\n\t * Note that this feature designed to be used alongside {\\@link query query()} and it will only work\n\t * with animations that are assigned using the Angular animation DSL (this means that CSS keyframes\n\t * and transitions are not handled by this API).\n\t *\n\t * \\@experimental Animation support is experimental.\n\t * @param {?=} options\n\t * @return {?}\n\t */\n\t/**\n\t * `useAnimation` is an animation-specific function that is designed to be used inside of Angular's\n\t * animation DSL language. It is used to kick off a reusable animation that is created using {\\@link\n\t * animation animation()}.\n\t *\n\t * \\@experimental Animation support is experimental.\n\t * @param {?} animation\n\t * @param {?=} options\n\t * @return {?}\n\t */\n\t/**\n\t * `query` is an animation-specific function that is designed to be used inside of Angular's\n\t * animation DSL language.\n\t *\n\t * query() is used to find one or more inner elements within the current element that is\n\t * being animated within the sequence. The provided animation steps are applied\n\t * to the queried element (by default, an array is provided, then this will be\n\t * treated as an animation sequence).\n\t *\n\t * ### Usage\n\t *\n\t * query() is designed to collect mutiple elements and works internally by using\n\t * `element.querySelectorAll`. An additional options object can be provided which\n\t * can be used to limit the total amount of items to be collected.\n\t *\n\t * ```js\n\t * query('div', [\n\t *   animate(...),\n\t *   animate(...)\n\t * ], { limit: 1 })\n\t * ```\n\t *\n\t * query(), by default, will throw an error when zero items are found. If a query\n\t * has the `optional` flag set to true then this error will be ignored.\n\t *\n\t * ```js\n\t * query('.some-element-that-may-not-be-there', [\n\t *   animate(...),\n\t *   animate(...)\n\t * ], { optional: true })\n\t * ```\n\t *\n\t * ### Special Selector Values\n\t *\n\t * The selector value within a query can collect elements that contain angular-specific\n\t * characteristics\n\t * using special pseudo-selectors tokens.\n\t *\n\t * These include:\n\t *\n\t *  - Querying for newly inserted/removed elements using `query(\":enter\")`/`query(\":leave\")`\n\t *  - Querying all currently animating elements using `query(\":animating\")`\n\t *  - Querying elements that contain an animation trigger using `query(\"\\@triggerName\")`\n\t *  - Querying all elements that contain an animation triggers using `query(\"\\@*\")`\n\t *  - Including the current element into the animation sequence using `query(\":self\")`\n\t *\n\t *\n\t *  Each of these pseudo-selector tokens can be merged together into a combined query selector\n\t * string:\n\t *\n\t *  ```\n\t *  query(':self, .record:enter, .record:leave, \\@subTrigger', [...])\n\t *  ```\n\t *\n\t * ### Demo\n\t *\n\t * ```\n\t * \\@Component({\n\t *   selector: 'inner',\n\t *   template: `\n\t *     <div [\\@queryAnimation]=\"exp\">\n\t *       <h1>Title</h1>\n\t *       <div class=\"content\">\n\t *         Blah blah blah\n\t *       </div>\n\t *     </div>\n\t *   `,\n\t *   animations: [\n\t *    trigger('queryAnimation', [\n\t *      transition('* => goAnimate', [\n\t *        // hide the inner elements\n\t *        query('h1', style({ opacity: 0 })),\n\t *        query('.content', style({ opacity: 0 })),\n\t *\n\t *        // animate the inner elements in, one by one\n\t *        query('h1', animate(1000, style({ opacity: 1 })),\n\t *        query('.content', animate(1000, style({ opacity: 1 })),\n\t *      ])\n\t *    ])\n\t *  ]\n\t * })\n\t * class Cmp {\n\t *   exp = '';\n\t *\n\t *   goAnimate() {\n\t *     this.exp = 'goAnimate';\n\t *   }\n\t * }\n\t * ```\n\t *\n\t * \\@experimental Animation support is experimental.\n\t * @param {?} selector\n\t * @param {?} animation\n\t * @param {?=} options\n\t * @return {?}\n\t */\n\t/**\n\t * `stagger` is an animation-specific function that is designed to be used inside of Angular's\n\t * animation DSL language. It is designed to be used inside of an animation {\\@link query query()}\n\t * and works by issuing a timing gap between after each queried item is animated.\n\t *\n\t * ### Usage\n\t *\n\t * In the example below there is a container element that wraps a list of items stamped out\n\t * by an ngFor. The container element contains an animation trigger that will later be set\n\t * to query for each of the inner items.\n\t *\n\t * ```html\n\t * <!-- list.component.html -->\n\t * <button (click)=\"toggle()\">Show / Hide Items</button>\n\t * <hr />\n\t * <div [\\@listAnimation]=\"items.length\">\n\t *   <div *ngFor=\"let item of items\">\n\t *     {{ item }}\n\t *   </div>\n\t * </div>\n\t * ```\n\t *\n\t * The component code for this looks as such:\n\t *\n\t * ```ts\n\t * import {trigger, transition, style, animate, query, stagger} from '\\@angular/animations';\n\t * \\@Component({\n\t *   templateUrl: 'list.component.html',\n\t *   animations: [\n\t *     trigger('listAnimation', [\n\t *        //...\n\t *     ])\n\t *   ]\n\t * })\n\t * class ListComponent {\n\t *   items = [];\n\t *\n\t *   showItems() {\n\t *     this.items = [0,1,2,3,4];\n\t *   }\n\t *\n\t *   hideItems() {\n\t *     this.items = [];\n\t *   }\n\t *\n\t *   toggle() {\n\t *     this.items.length ? this.hideItems() : this.showItems();\n\t *   }\n\t * }\n\t * ```\n\t *\n\t * And now for the animation trigger code:\n\t *\n\t * ```ts\n\t * trigger('listAnimation', [\n\t *   transition('* => *', [ // each time the binding value changes\n\t *     query(':leave', [\n\t *       stagger(100, [\n\t *         animate('0.5s', style({ opacity: 0 }))\n\t *       ])\n\t *     ]),\n\t *     query(':enter', [\n\t *       style({ opacity: 0 }),\n\t *       stagger(100, [\n\t *         animate('0.5s', style({ opacity: 1 }))\n\t *       ])\n\t *     ])\n\t *   ])\n\t * ])\n\t * ```\n\t *\n\t * Now each time the items are added/removed then either the opacity\n\t * fade-in animation will run or each removed item will be faded out.\n\t * When either of these animations occur then a stagger effect will be\n\t * applied after each item's animation is started.\n\t *\n\t * \\@experimental Animation support is experimental.\n\t * @param {?} timings\n\t * @param {?} animation\n\t * @return {?}\n\t */\n\t/**\n\t * @license\n\t * Copyright Google Inc. All Rights Reserved.\n\t *\n\t * Use of this source code is governed by an MIT-style license that can be\n\t * found in the LICENSE file at https://angular.io/license\n\t */\n\t/**\n\t * @deprecated This symbol has moved. Please Import from \\@angular/animations instead!\n\t */\n\tvar AUTO_STYLE$$1 = '*';\n\t/**\n\t * @deprecated This symbol has moved. Please Import from \\@angular/animations instead!\n\t * @param {?} name\n\t * @param {?} definitions\n\t * @return {?}\n\t */\n\tfunction trigger$$1(name, definitions) {\n\t    return trigger$1(name, definitions);\n\t}\n\t/**\n\t * @deprecated This symbol has moved. Please Import from \\@angular/animations instead!\n\t * @param {?} timings\n\t * @param {?=} styles\n\t * @return {?}\n\t */\n\tfunction animate$$1(timings, styles) {\n\t    return animate$1(timings, styles);\n\t}\n\t/**\n\t * @deprecated This symbol has moved. Please Import from \\@angular/animations instead!\n\t * @param {?} steps\n\t * @return {?}\n\t */\n\tfunction group$$1(steps) {\n\t    return group$1(steps);\n\t}\n\t/**\n\t * @deprecated This symbol has moved. Please Import from \\@angular/animations instead!\n\t * @param {?} steps\n\t * @return {?}\n\t */\n\tfunction sequence$$1(steps) {\n\t    return sequence$1(steps);\n\t}\n\t/**\n\t * @deprecated This symbol has moved. Please Import from \\@angular/animations instead!\n\t * @param {?} tokens\n\t * @return {?}\n\t */\n\tfunction style$$1(tokens) {\n\t    return style$1(tokens);\n\t}\n\t/**\n\t * @deprecated This symbol has moved. Please Import from \\@angular/animations instead!\n\t * @param {?} name\n\t * @param {?} styles\n\t * @return {?}\n\t */\n\tfunction state$$1(name, styles) {\n\t    return state$1(name, styles);\n\t}\n\t/**\n\t * @deprecated This symbol has moved. Please Import from \\@angular/animations instead!\n\t * @param {?} steps\n\t * @return {?}\n\t */\n\tfunction keyframes$$1(steps) {\n\t    return keyframes$1(steps);\n\t}\n\t/**\n\t * @deprecated This symbol has moved. Please Import from \\@angular/animations instead!\n\t * @param {?} stateChangeExpr\n\t * @param {?} steps\n\t * @return {?}\n\t */\n\tfunction transition$$1(stateChangeExpr, steps) {\n\t    return transition$1(stateChangeExpr, steps);\n\t}\n\t\n\texports.Class = Class;\n\texports.createPlatform = createPlatform;\n\texports.assertPlatform = assertPlatform;\n\texports.destroyPlatform = destroyPlatform;\n\texports.getPlatform = getPlatform;\n\texports.PlatformRef = PlatformRef;\n\texports.ApplicationRef = ApplicationRef;\n\texports.enableProdMode = enableProdMode;\n\texports.isDevMode = isDevMode;\n\texports.createPlatformFactory = createPlatformFactory;\n\texports.NgProbeToken = NgProbeToken;\n\texports.APP_ID = APP_ID;\n\texports.PACKAGE_ROOT_URL = PACKAGE_ROOT_URL;\n\texports.PLATFORM_INITIALIZER = PLATFORM_INITIALIZER;\n\texports.PLATFORM_ID = PLATFORM_ID;\n\texports.APP_BOOTSTRAP_LISTENER = APP_BOOTSTRAP_LISTENER;\n\texports.APP_INITIALIZER = APP_INITIALIZER;\n\texports.ApplicationInitStatus = ApplicationInitStatus;\n\texports.DebugElement = DebugElement;\n\texports.DebugNode = DebugNode;\n\texports.asNativeElements = asNativeElements;\n\texports.getDebugNode = getDebugNode;\n\texports.Testability = Testability;\n\texports.TestabilityRegistry = TestabilityRegistry;\n\texports.setTestabilityGetter = setTestabilityGetter;\n\texports.TRANSLATIONS = TRANSLATIONS;\n\texports.TRANSLATIONS_FORMAT = TRANSLATIONS_FORMAT;\n\texports.LOCALE_ID = LOCALE_ID;\n\texports.MissingTranslationStrategy = MissingTranslationStrategy;\n\texports.ApplicationModule = ApplicationModule;\n\texports.wtfCreateScope = wtfCreateScope;\n\texports.wtfLeave = wtfLeave;\n\texports.wtfStartTimeRange = wtfStartTimeRange;\n\texports.wtfEndTimeRange = wtfEndTimeRange;\n\texports.Type = Type;\n\texports.EventEmitter = EventEmitter;\n\texports.ErrorHandler = ErrorHandler;\n\texports.Sanitizer = Sanitizer;\n\texports.SecurityContext = SecurityContext;\n\texports.ANALYZE_FOR_ENTRY_COMPONENTS = ANALYZE_FOR_ENTRY_COMPONENTS;\n\texports.Attribute = Attribute;\n\texports.ContentChild = ContentChild;\n\texports.ContentChildren = ContentChildren;\n\texports.Query = Query;\n\texports.ViewChild = ViewChild;\n\texports.ViewChildren = ViewChildren;\n\texports.Component = Component;\n\texports.Directive = Directive;\n\texports.HostBinding = HostBinding;\n\texports.HostListener = HostListener;\n\texports.Input = Input;\n\texports.Output = Output;\n\texports.Pipe = Pipe;\n\texports.CUSTOM_ELEMENTS_SCHEMA = CUSTOM_ELEMENTS_SCHEMA;\n\texports.NO_ERRORS_SCHEMA = NO_ERRORS_SCHEMA;\n\texports.NgModule = NgModule;\n\texports.ViewEncapsulation = ViewEncapsulation;\n\texports.Version = Version;\n\texports.VERSION = VERSION;\n\texports.forwardRef = forwardRef;\n\texports.resolveForwardRef = resolveForwardRef;\n\texports.Injector = Injector;\n\texports.ReflectiveInjector = ReflectiveInjector;\n\texports.ResolvedReflectiveFactory = ResolvedReflectiveFactory;\n\texports.ReflectiveKey = ReflectiveKey;\n\texports.InjectionToken = InjectionToken;\n\texports.OpaqueToken = OpaqueToken;\n\texports.Inject = Inject;\n\texports.Optional = Optional;\n\texports.Injectable = Injectable;\n\texports.Self = Self;\n\texports.SkipSelf = SkipSelf;\n\texports.Host = Host;\n\texports.NgZone = NgZone;\n\texports.RenderComponentType = RenderComponentType;\n\texports.Renderer = Renderer;\n\texports.Renderer2 = Renderer2;\n\texports.RendererFactory2 = RendererFactory2;\n\texports.RendererStyleFlags2 = RendererStyleFlags2;\n\texports.RootRenderer = RootRenderer;\n\texports.COMPILER_OPTIONS = COMPILER_OPTIONS;\n\texports.Compiler = Compiler;\n\texports.CompilerFactory = CompilerFactory;\n\texports.ModuleWithComponentFactories = ModuleWithComponentFactories;\n\texports.ComponentFactory = ComponentFactory;\n\texports.ComponentRef = ComponentRef;\n\texports.ComponentFactoryResolver = ComponentFactoryResolver;\n\texports.ElementRef = ElementRef;\n\texports.NgModuleFactory = NgModuleFactory;\n\texports.NgModuleRef = NgModuleRef;\n\texports.NgModuleFactoryLoader = NgModuleFactoryLoader;\n\texports.getModuleFactory = getModuleFactory;\n\texports.QueryList = QueryList;\n\texports.SystemJsNgModuleLoader = SystemJsNgModuleLoader;\n\texports.SystemJsNgModuleLoaderConfig = SystemJsNgModuleLoaderConfig;\n\texports.TemplateRef = TemplateRef;\n\texports.ViewContainerRef = ViewContainerRef;\n\texports.EmbeddedViewRef = EmbeddedViewRef;\n\texports.ViewRef = ViewRef;\n\texports.ChangeDetectionStrategy = ChangeDetectionStrategy;\n\texports.ChangeDetectorRef = ChangeDetectorRef;\n\texports.DefaultIterableDiffer = DefaultIterableDiffer;\n\texports.IterableDiffers = IterableDiffers;\n\texports.KeyValueDiffers = KeyValueDiffers;\n\texports.SimpleChange = SimpleChange;\n\texports.WrappedValue = WrappedValue;\n\texports.platformCore = platformCore;\n\texports.ɵALLOW_MULTIPLE_PLATFORMS = ALLOW_MULTIPLE_PLATFORMS;\n\texports.ɵAPP_ID_RANDOM_PROVIDER = APP_ID_RANDOM_PROVIDER;\n\texports.ɵValueUnwrapper = ValueUnwrapper;\n\texports.ɵdevModeEqual = devModeEqual;\n\texports.ɵisListLikeIterable = isListLikeIterable;\n\texports.ɵChangeDetectorStatus = ChangeDetectorStatus;\n\texports.ɵisDefaultChangeDetectionStrategy = isDefaultChangeDetectionStrategy;\n\texports.ɵConsole = Console;\n\texports.ɵERROR_COMPONENT_TYPE = ERROR_COMPONENT_TYPE;\n\texports.ɵComponentFactory = ComponentFactory;\n\texports.ɵCodegenComponentFactoryResolver = CodegenComponentFactoryResolver;\n\texports.ɵViewMetadata = ViewMetadata;\n\texports.ɵReflectionCapabilities = ReflectionCapabilities;\n\texports.ɵRenderDebugInfo = RenderDebugInfo;\n\texports.ɵglobal = _global;\n\texports.ɵlooseIdentical = looseIdentical;\n\texports.ɵstringify = stringify;\n\texports.ɵmakeDecorator = makeDecorator;\n\texports.ɵisObservable = isObservable;\n\texports.ɵisPromise = isPromise;\n\texports.ɵclearProviderOverrides = clearProviderOverrides;\n\texports.ɵoverrideProvider = overrideProvider;\n\texports.ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR;\n\texports.ɵregisterModuleFactory = registerModuleFactory;\n\texports.ɵEMPTY_ARRAY = EMPTY_ARRAY;\n\texports.ɵEMPTY_MAP = EMPTY_MAP;\n\texports.ɵand = anchorDef;\n\texports.ɵccf = createComponentFactory;\n\texports.ɵcmf = createNgModuleFactory;\n\texports.ɵcrt = createRendererType2;\n\texports.ɵdid = directiveDef;\n\texports.ɵeld = elementDef;\n\texports.ɵelementEventFullName = elementEventFullName;\n\texports.ɵgetComponentViewDefinitionFactory = getComponentViewDefinitionFactory;\n\texports.ɵinlineInterpolate = inlineInterpolate;\n\texports.ɵinterpolate = interpolate;\n\texports.ɵmod = moduleDef;\n\texports.ɵmpd = moduleProvideDef;\n\texports.ɵncd = ngContentDef;\n\texports.ɵnov = nodeValue;\n\texports.ɵpid = pipeDef;\n\texports.ɵprd = providerDef;\n\texports.ɵpad = pureArrayDef;\n\texports.ɵpod = pureObjectDef;\n\texports.ɵppd = purePipeDef;\n\texports.ɵqud = queryDef;\n\texports.ɵted = textDef;\n\texports.ɵunv = unwrapValue;\n\texports.ɵvid = viewDef;\n\texports.AUTO_STYLE = AUTO_STYLE$$1;\n\texports.trigger = trigger$$1;\n\texports.animate = animate$$1;\n\texports.group = group$$1;\n\texports.sequence = sequence$$1;\n\texports.style = style$$1;\n\texports.state = state$$1;\n\texports.keyframes = keyframes$$1;\n\texports.transition = transition$$1;\n\texports.ɵx = animate$1;\n\texports.ɵy = group$1;\n\texports.ɵbc = keyframes$1;\n\texports.ɵz = sequence$1;\n\texports.ɵbb = state$1;\n\texports.ɵba = style$1;\n\texports.ɵbd = transition$1;\n\texports.ɵw = trigger$1;\n\texports.ɵk = _iterableDiffersFactory;\n\texports.ɵl = _keyValueDiffersFactory;\n\texports.ɵm = _localeFactory;\n\texports.ɵe = ApplicationRef_;\n\texports.ɵf = _appIdRandomProviderFactory;\n\texports.ɵg = defaultIterableDiffers;\n\texports.ɵh = defaultKeyValueDiffers;\n\texports.ɵi = DefaultIterableDifferFactory;\n\texports.ɵj = DefaultKeyValueDifferFactory;\n\texports.ɵb = ReflectiveInjector_;\n\texports.ɵc = ReflectiveDependency;\n\texports.ɵd = resolveReflectiveProviders;\n\texports.ɵn = wtfEnabled;\n\texports.ɵp = createScope$1;\n\texports.ɵo = detectWTF;\n\texports.ɵs = endTimeRange;\n\texports.ɵq = leave;\n\texports.ɵr = startTimeRange;\n\texports.ɵa = makeParamDecorator;\n\texports.ɵt = _def;\n\texports.ɵu = DebugContext;\n\t\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\t\n\t})));\n\t//# sourceMappingURL=core.umd.js.map\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(7);\n\tvar toSubscriber_1 = __webpack_require__(8);\n\tvar observable_1 = __webpack_require__(19);\n\tvar pipe_1 = __webpack_require__(20);\n\t/**\n\t * A representation of any set of values over any amount of time. This is the most basic building block\n\t * of RxJS.\n\t *\n\t * @class Observable<T>\n\t */\n\tvar Observable = (function () {\n\t    /**\n\t     * @constructor\n\t     * @param {Function} subscribe the function that is called when the Observable is\n\t     * initially subscribed to. This function is given a Subscriber, to which new values\n\t     * can be `next`ed, or an `error` method can be called to raise an error, or\n\t     * `complete` can be called to notify of a successful completion.\n\t     */\n\t    function Observable(subscribe) {\n\t        this._isScalar = false;\n\t        if (subscribe) {\n\t            this._subscribe = subscribe;\n\t        }\n\t    }\n\t    /**\n\t     * Creates a new Observable, with this Observable as the source, and the passed\n\t     * operator defined as the new observable's operator.\n\t     * @method lift\n\t     * @param {Operator} operator the operator defining the operation to take on the observable\n\t     * @return {Observable} a new observable with the Operator applied\n\t     */\n\t    Observable.prototype.lift = function (operator) {\n\t        var observable = new Observable();\n\t        observable.source = this;\n\t        observable.operator = operator;\n\t        return observable;\n\t    };\n\t    /**\n\t     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n\t     *\n\t     * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n\t     *\n\t     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n\t     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n\t     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n\t     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n\t     * thought.\n\t     *\n\t     * Apart from starting the execution of an Observable, this method allows you to listen for values\n\t     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n\t     * following ways.\n\t     *\n\t     * The first way is creating an object that implements {@link Observer} interface. It should have methods\n\t     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n\t     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n\t     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n\t     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n\t     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n\t     * be left uncaught.\n\t     *\n\t     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n\t     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n\t     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n\t     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n\t     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n\t     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n\t     *\n\t     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n\t     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n\t     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n\t     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n\t     *\n\t     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n\t     * It is an Observable itself that decides when these functions will be called. For example {@link of}\n\t     * by default emits all its values synchronously. Always check documentation for how given Observable\n\t     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n\t     *\n\t     * @example <caption>Subscribe with an Observer</caption>\n\t     * const sumObserver = {\n\t     *   sum: 0,\n\t     *   next(value) {\n\t     *     console.log('Adding: ' + value);\n\t     *     this.sum = this.sum + value;\n\t     *   },\n\t     *   error() { // We actually could just remove this method,\n\t     *   },        // since we do not really care about errors right now.\n\t     *   complete() {\n\t     *     console.log('Sum equals: ' + this.sum);\n\t     *   }\n\t     * };\n\t     *\n\t     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n\t     * .subscribe(sumObserver);\n\t     *\n\t     * // Logs:\n\t     * // \"Adding: 1\"\n\t     * // \"Adding: 2\"\n\t     * // \"Adding: 3\"\n\t     * // \"Sum equals: 6\"\n\t     *\n\t     *\n\t     * @example <caption>Subscribe with functions</caption>\n\t     * let sum = 0;\n\t     *\n\t     * Rx.Observable.of(1, 2, 3)\n\t     * .subscribe(\n\t     *   function(value) {\n\t     *     console.log('Adding: ' + value);\n\t     *     sum = sum + value;\n\t     *   },\n\t     *   undefined,\n\t     *   function() {\n\t     *     console.log('Sum equals: ' + sum);\n\t     *   }\n\t     * );\n\t     *\n\t     * // Logs:\n\t     * // \"Adding: 1\"\n\t     * // \"Adding: 2\"\n\t     * // \"Adding: 3\"\n\t     * // \"Sum equals: 6\"\n\t     *\n\t     *\n\t     * @example <caption>Cancel a subscription</caption>\n\t     * const subscription = Rx.Observable.interval(1000).subscribe(\n\t     *   num => console.log(num),\n\t     *   undefined,\n\t     *   () => console.log('completed!') // Will not be called, even\n\t     * );                                // when cancelling subscription\n\t     *\n\t     *\n\t     * setTimeout(() => {\n\t     *   subscription.unsubscribe();\n\t     *   console.log('unsubscribed!');\n\t     * }, 2500);\n\t     *\n\t     * // Logs:\n\t     * // 0 after 1s\n\t     * // 1 after 2s\n\t     * // \"unsubscribed!\" after 2.5s\n\t     *\n\t     *\n\t     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n\t     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n\t     *  Observable.\n\t     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n\t     *  the error will be thrown as unhandled.\n\t     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n\t     * @return {ISubscription} a subscription reference to the registered handlers\n\t     * @method subscribe\n\t     */\n\t    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n\t        var operator = this.operator;\n\t        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);\n\t        if (operator) {\n\t            operator.call(sink, this.source);\n\t        }\n\t        else {\n\t            sink.add(this.source ? this._subscribe(sink) : this._trySubscribe(sink));\n\t        }\n\t        if (sink.syncErrorThrowable) {\n\t            sink.syncErrorThrowable = false;\n\t            if (sink.syncErrorThrown) {\n\t                throw sink.syncErrorValue;\n\t            }\n\t        }\n\t        return sink;\n\t    };\n\t    Observable.prototype._trySubscribe = function (sink) {\n\t        try {\n\t            return this._subscribe(sink);\n\t        }\n\t        catch (err) {\n\t            sink.syncErrorThrown = true;\n\t            sink.syncErrorValue = err;\n\t            sink.error(err);\n\t        }\n\t    };\n\t    /**\n\t     * @method forEach\n\t     * @param {Function} next a handler for each value emitted by the observable\n\t     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n\t     * @return {Promise} a promise that either resolves on observable completion or\n\t     *  rejects with the handled error\n\t     */\n\t    Observable.prototype.forEach = function (next, PromiseCtor) {\n\t        var _this = this;\n\t        if (!PromiseCtor) {\n\t            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n\t                PromiseCtor = root_1.root.Rx.config.Promise;\n\t            }\n\t            else if (root_1.root.Promise) {\n\t                PromiseCtor = root_1.root.Promise;\n\t            }\n\t        }\n\t        if (!PromiseCtor) {\n\t            throw new Error('no Promise impl found');\n\t        }\n\t        return new PromiseCtor(function (resolve, reject) {\n\t            // Must be declared in a separate statement to avoid a RefernceError when\n\t            // accessing subscription below in the closure due to Temporal Dead Zone.\n\t            var subscription;\n\t            subscription = _this.subscribe(function (value) {\n\t                if (subscription) {\n\t                    // if there is a subscription, then we can surmise\n\t                    // the next handling is asynchronous. Any errors thrown\n\t                    // need to be rejected explicitly and unsubscribe must be\n\t                    // called manually\n\t                    try {\n\t                        next(value);\n\t                    }\n\t                    catch (err) {\n\t                        reject(err);\n\t                        subscription.unsubscribe();\n\t                    }\n\t                }\n\t                else {\n\t                    // if there is NO subscription, then we're getting a nexted\n\t                    // value synchronously during subscription. We can just call it.\n\t                    // If it errors, Observable's `subscribe` will ensure the\n\t                    // unsubscription logic is called, then synchronously rethrow the error.\n\t                    // After that, Promise will trap the error and send it\n\t                    // down the rejection path.\n\t                    next(value);\n\t                }\n\t            }, reject, resolve);\n\t        });\n\t    };\n\t    Observable.prototype._subscribe = function (subscriber) {\n\t        return this.source.subscribe(subscriber);\n\t    };\n\t    /**\n\t     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n\t     * @method Symbol.observable\n\t     * @return {Observable} this instance of the observable\n\t     */\n\t    Observable.prototype[observable_1.observable] = function () {\n\t        return this;\n\t    };\n\t    /* tslint:enable:max-line-length */\n\t    /**\n\t     * Used to stitch together functional operators into a chain.\n\t     * @method pipe\n\t     * @return {Observable} the Observable result of all of the operators having\n\t     * been called in the order they were passed in.\n\t     *\n\t     * @example\n\t     *\n\t     * import { map, filter, scan } from 'rxjs/operators';\n\t     *\n\t     * Rx.Observable.interval(1000)\n\t     *   .pipe(\n\t     *     filter(x => x % 2 === 0),\n\t     *     map(x => x + x),\n\t     *     scan((acc, x) => acc + x)\n\t     *   )\n\t     *   .subscribe(x => console.log(x))\n\t     */\n\t    Observable.prototype.pipe = function () {\n\t        var operations = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            operations[_i - 0] = arguments[_i];\n\t        }\n\t        if (operations.length === 0) {\n\t            return this;\n\t        }\n\t        return pipe_1.pipeFromArray(operations)(this);\n\t    };\n\t    /* tslint:enable:max-line-length */\n\t    Observable.prototype.toPromise = function (PromiseCtor) {\n\t        var _this = this;\n\t        if (!PromiseCtor) {\n\t            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n\t                PromiseCtor = root_1.root.Rx.config.Promise;\n\t            }\n\t            else if (root_1.root.Promise) {\n\t                PromiseCtor = root_1.root.Promise;\n\t            }\n\t        }\n\t        if (!PromiseCtor) {\n\t            throw new Error('no Promise impl found');\n\t        }\n\t        return new PromiseCtor(function (resolve, reject) {\n\t            var value;\n\t            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n\t        });\n\t    };\n\t    // HACK: Since TypeScript inherits static properties too, we have to\n\t    // fight against TypeScript here so Subject can have a different static create signature\n\t    /**\n\t     * Creates a new cold Observable by calling the Observable constructor\n\t     * @static true\n\t     * @owner Observable\n\t     * @method create\n\t     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n\t     * @return {Observable} a new cold observable\n\t     */\n\t    Observable.create = function (subscribe) {\n\t        return new Observable(subscribe);\n\t    };\n\t    return Observable;\n\t}());\n\texports.Observable = Observable;\n\t//# sourceMappingURL=Observable.js.map\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {\"use strict\";\n\t// CommonJS / Node have global context exposed as \"global\" variable.\n\t// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n\t// the global \"global\" var for now.\n\tvar __window = typeof window !== 'undefined' && window;\n\tvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n\t    self instanceof WorkerGlobalScope && self;\n\tvar __global = typeof global !== 'undefined' && global;\n\tvar _root = __window || __global || __self;\n\texports.root = _root;\n\t// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n\t// This is needed when used with angular/tsickle which inserts a goog.module statement.\n\t// Wrap in IIFE\n\t(function () {\n\t    if (!_root) {\n\t        throw new Error('RxJS could not find any global context (window, self, global)');\n\t    }\n\t})();\n\t//# sourceMappingURL=root.js.map\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Subscriber_1 = __webpack_require__(9);\n\tvar rxSubscriber_1 = __webpack_require__(18);\n\tvar Observer_1 = __webpack_require__(17);\n\tfunction toSubscriber(nextOrObserver, error, complete) {\n\t    if (nextOrObserver) {\n\t        if (nextOrObserver instanceof Subscriber_1.Subscriber) {\n\t            return nextOrObserver;\n\t        }\n\t        if (nextOrObserver[rxSubscriber_1.rxSubscriber]) {\n\t            return nextOrObserver[rxSubscriber_1.rxSubscriber]();\n\t        }\n\t    }\n\t    if (!nextOrObserver && !error && !complete) {\n\t        return new Subscriber_1.Subscriber(Observer_1.empty);\n\t    }\n\t    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n\t}\n\texports.toSubscriber = toSubscriber;\n\t//# sourceMappingURL=toSubscriber.js.map\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar isFunction_1 = __webpack_require__(10);\n\tvar Subscription_1 = __webpack_require__(11);\n\tvar Observer_1 = __webpack_require__(17);\n\tvar rxSubscriber_1 = __webpack_require__(18);\n\t/**\n\t * Implements the {@link Observer} interface and extends the\n\t * {@link Subscription} class. While the {@link Observer} is the public API for\n\t * consuming the values of an {@link Observable}, all Observers get converted to\n\t * a Subscriber, in order to provide Subscription-like capabilities such as\n\t * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n\t * implementing operators, but it is rarely used as a public API.\n\t *\n\t * @class Subscriber<T>\n\t */\n\tvar Subscriber = (function (_super) {\n\t    __extends(Subscriber, _super);\n\t    /**\n\t     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n\t     * defined Observer or a `next` callback function.\n\t     * @param {function(e: ?any): void} [error] The `error` callback of an\n\t     * Observer.\n\t     * @param {function(): void} [complete] The `complete` callback of an\n\t     * Observer.\n\t     */\n\t    function Subscriber(destinationOrNext, error, complete) {\n\t        _super.call(this);\n\t        this.syncErrorValue = null;\n\t        this.syncErrorThrown = false;\n\t        this.syncErrorThrowable = false;\n\t        this.isStopped = false;\n\t        switch (arguments.length) {\n\t            case 0:\n\t                this.destination = Observer_1.empty;\n\t                break;\n\t            case 1:\n\t                if (!destinationOrNext) {\n\t                    this.destination = Observer_1.empty;\n\t                    break;\n\t                }\n\t                if (typeof destinationOrNext === 'object') {\n\t                    if (destinationOrNext instanceof Subscriber) {\n\t                        this.destination = destinationOrNext;\n\t                        this.destination.add(this);\n\t                    }\n\t                    else {\n\t                        this.syncErrorThrowable = true;\n\t                        this.destination = new SafeSubscriber(this, destinationOrNext);\n\t                    }\n\t                    break;\n\t                }\n\t            default:\n\t                this.syncErrorThrowable = true;\n\t                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n\t                break;\n\t        }\n\t    }\n\t    Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function () { return this; };\n\t    /**\n\t     * A static factory for a Subscriber, given a (potentially partial) definition\n\t     * of an Observer.\n\t     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n\t     * @param {function(e: ?any): void} [error] The `error` callback of an\n\t     * Observer.\n\t     * @param {function(): void} [complete] The `complete` callback of an\n\t     * Observer.\n\t     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n\t     * Observer represented by the given arguments.\n\t     */\n\t    Subscriber.create = function (next, error, complete) {\n\t        var subscriber = new Subscriber(next, error, complete);\n\t        subscriber.syncErrorThrowable = false;\n\t        return subscriber;\n\t    };\n\t    /**\n\t     * The {@link Observer} callback to receive notifications of type `next` from\n\t     * the Observable, with a value. The Observable may call this method 0 or more\n\t     * times.\n\t     * @param {T} [value] The `next` value.\n\t     * @return {void}\n\t     */\n\t    Subscriber.prototype.next = function (value) {\n\t        if (!this.isStopped) {\n\t            this._next(value);\n\t        }\n\t    };\n\t    /**\n\t     * The {@link Observer} callback to receive notifications of type `error` from\n\t     * the Observable, with an attached {@link Error}. Notifies the Observer that\n\t     * the Observable has experienced an error condition.\n\t     * @param {any} [err] The `error` exception.\n\t     * @return {void}\n\t     */\n\t    Subscriber.prototype.error = function (err) {\n\t        if (!this.isStopped) {\n\t            this.isStopped = true;\n\t            this._error(err);\n\t        }\n\t    };\n\t    /**\n\t     * The {@link Observer} callback to receive a valueless notification of type\n\t     * `complete` from the Observable. Notifies the Observer that the Observable\n\t     * has finished sending push-based notifications.\n\t     * @return {void}\n\t     */\n\t    Subscriber.prototype.complete = function () {\n\t        if (!this.isStopped) {\n\t            this.isStopped = true;\n\t            this._complete();\n\t        }\n\t    };\n\t    Subscriber.prototype.unsubscribe = function () {\n\t        if (this.closed) {\n\t            return;\n\t        }\n\t        this.isStopped = true;\n\t        _super.prototype.unsubscribe.call(this);\n\t    };\n\t    Subscriber.prototype._next = function (value) {\n\t        this.destination.next(value);\n\t    };\n\t    Subscriber.prototype._error = function (err) {\n\t        this.destination.error(err);\n\t        this.unsubscribe();\n\t    };\n\t    Subscriber.prototype._complete = function () {\n\t        this.destination.complete();\n\t        this.unsubscribe();\n\t    };\n\t    Subscriber.prototype._unsubscribeAndRecycle = function () {\n\t        var _a = this, _parent = _a._parent, _parents = _a._parents;\n\t        this._parent = null;\n\t        this._parents = null;\n\t        this.unsubscribe();\n\t        this.closed = false;\n\t        this.isStopped = false;\n\t        this._parent = _parent;\n\t        this._parents = _parents;\n\t        return this;\n\t    };\n\t    return Subscriber;\n\t}(Subscription_1.Subscription));\n\texports.Subscriber = Subscriber;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SafeSubscriber = (function (_super) {\n\t    __extends(SafeSubscriber, _super);\n\t    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n\t        _super.call(this);\n\t        this._parentSubscriber = _parentSubscriber;\n\t        var next;\n\t        var context = this;\n\t        if (isFunction_1.isFunction(observerOrNext)) {\n\t            next = observerOrNext;\n\t        }\n\t        else if (observerOrNext) {\n\t            next = observerOrNext.next;\n\t            error = observerOrNext.error;\n\t            complete = observerOrNext.complete;\n\t            if (observerOrNext !== Observer_1.empty) {\n\t                context = Object.create(observerOrNext);\n\t                if (isFunction_1.isFunction(context.unsubscribe)) {\n\t                    this.add(context.unsubscribe.bind(context));\n\t                }\n\t                context.unsubscribe = this.unsubscribe.bind(this);\n\t            }\n\t        }\n\t        this._context = context;\n\t        this._next = next;\n\t        this._error = error;\n\t        this._complete = complete;\n\t    }\n\t    SafeSubscriber.prototype.next = function (value) {\n\t        if (!this.isStopped && this._next) {\n\t            var _parentSubscriber = this._parentSubscriber;\n\t            if (!_parentSubscriber.syncErrorThrowable) {\n\t                this.__tryOrUnsub(this._next, value);\n\t            }\n\t            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n\t                this.unsubscribe();\n\t            }\n\t        }\n\t    };\n\t    SafeSubscriber.prototype.error = function (err) {\n\t        if (!this.isStopped) {\n\t            var _parentSubscriber = this._parentSubscriber;\n\t            if (this._error) {\n\t                if (!_parentSubscriber.syncErrorThrowable) {\n\t                    this.__tryOrUnsub(this._error, err);\n\t                    this.unsubscribe();\n\t                }\n\t                else {\n\t                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n\t                    this.unsubscribe();\n\t                }\n\t            }\n\t            else if (!_parentSubscriber.syncErrorThrowable) {\n\t                this.unsubscribe();\n\t                throw err;\n\t            }\n\t            else {\n\t                _parentSubscriber.syncErrorValue = err;\n\t                _parentSubscriber.syncErrorThrown = true;\n\t                this.unsubscribe();\n\t            }\n\t        }\n\t    };\n\t    SafeSubscriber.prototype.complete = function () {\n\t        var _this = this;\n\t        if (!this.isStopped) {\n\t            var _parentSubscriber = this._parentSubscriber;\n\t            if (this._complete) {\n\t                var wrappedComplete = function () { return _this._complete.call(_this._context); };\n\t                if (!_parentSubscriber.syncErrorThrowable) {\n\t                    this.__tryOrUnsub(wrappedComplete);\n\t                    this.unsubscribe();\n\t                }\n\t                else {\n\t                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n\t                    this.unsubscribe();\n\t                }\n\t            }\n\t            else {\n\t                this.unsubscribe();\n\t            }\n\t        }\n\t    };\n\t    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n\t        try {\n\t            fn.call(this._context, value);\n\t        }\n\t        catch (err) {\n\t            this.unsubscribe();\n\t            throw err;\n\t        }\n\t    };\n\t    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n\t        try {\n\t            fn.call(this._context, value);\n\t        }\n\t        catch (err) {\n\t            parent.syncErrorValue = err;\n\t            parent.syncErrorThrown = true;\n\t            return true;\n\t        }\n\t        return false;\n\t    };\n\t    SafeSubscriber.prototype._unsubscribe = function () {\n\t        var _parentSubscriber = this._parentSubscriber;\n\t        this._context = null;\n\t        this._parentSubscriber = null;\n\t        _parentSubscriber.unsubscribe();\n\t    };\n\t    return SafeSubscriber;\n\t}(Subscriber));\n\t//# sourceMappingURL=Subscriber.js.map\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tfunction isFunction(x) {\n\t    return typeof x === 'function';\n\t}\n\texports.isFunction = isFunction;\n\t//# sourceMappingURL=isFunction.js.map\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar isArray_1 = __webpack_require__(12);\n\tvar isObject_1 = __webpack_require__(13);\n\tvar isFunction_1 = __webpack_require__(10);\n\tvar tryCatch_1 = __webpack_require__(14);\n\tvar errorObject_1 = __webpack_require__(15);\n\tvar UnsubscriptionError_1 = __webpack_require__(16);\n\t/**\n\t * Represents a disposable resource, such as the execution of an Observable. A\n\t * Subscription has one important method, `unsubscribe`, that takes no argument\n\t * and just disposes the resource held by the subscription.\n\t *\n\t * Additionally, subscriptions may be grouped together through the `add()`\n\t * method, which will attach a child Subscription to the current Subscription.\n\t * When a Subscription is unsubscribed, all its children (and its grandchildren)\n\t * will be unsubscribed as well.\n\t *\n\t * @class Subscription\n\t */\n\tvar Subscription = (function () {\n\t    /**\n\t     * @param {function(): void} [unsubscribe] A function describing how to\n\t     * perform the disposal of resources when the `unsubscribe` method is called.\n\t     */\n\t    function Subscription(unsubscribe) {\n\t        /**\n\t         * A flag to indicate whether this Subscription has already been unsubscribed.\n\t         * @type {boolean}\n\t         */\n\t        this.closed = false;\n\t        this._parent = null;\n\t        this._parents = null;\n\t        this._subscriptions = null;\n\t        if (unsubscribe) {\n\t            this._unsubscribe = unsubscribe;\n\t        }\n\t    }\n\t    /**\n\t     * Disposes the resources held by the subscription. May, for instance, cancel\n\t     * an ongoing Observable execution or cancel any other type of work that\n\t     * started when the Subscription was created.\n\t     * @return {void}\n\t     */\n\t    Subscription.prototype.unsubscribe = function () {\n\t        var hasErrors = false;\n\t        var errors;\n\t        if (this.closed) {\n\t            return;\n\t        }\n\t        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n\t        this.closed = true;\n\t        this._parent = null;\n\t        this._parents = null;\n\t        // null out _subscriptions first so any child subscriptions that attempt\n\t        // to remove themselves from this subscription will noop\n\t        this._subscriptions = null;\n\t        var index = -1;\n\t        var len = _parents ? _parents.length : 0;\n\t        // if this._parent is null, then so is this._parents, and we\n\t        // don't have to remove ourselves from any parent subscriptions.\n\t        while (_parent) {\n\t            _parent.remove(this);\n\t            // if this._parents is null or index >= len,\n\t            // then _parent is set to null, and the loop exits\n\t            _parent = ++index < len && _parents[index] || null;\n\t        }\n\t        if (isFunction_1.isFunction(_unsubscribe)) {\n\t            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);\n\t            if (trial === errorObject_1.errorObject) {\n\t                hasErrors = true;\n\t                errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?\n\t                    flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);\n\t            }\n\t        }\n\t        if (isArray_1.isArray(_subscriptions)) {\n\t            index = -1;\n\t            len = _subscriptions.length;\n\t            while (++index < len) {\n\t                var sub = _subscriptions[index];\n\t                if (isObject_1.isObject(sub)) {\n\t                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);\n\t                    if (trial === errorObject_1.errorObject) {\n\t                        hasErrors = true;\n\t                        errors = errors || [];\n\t                        var err = errorObject_1.errorObject.e;\n\t                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {\n\t                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n\t                        }\n\t                        else {\n\t                            errors.push(err);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        if (hasErrors) {\n\t            throw new UnsubscriptionError_1.UnsubscriptionError(errors);\n\t        }\n\t    };\n\t    /**\n\t     * Adds a tear down to be called during the unsubscribe() of this\n\t     * Subscription.\n\t     *\n\t     * If the tear down being added is a subscription that is already\n\t     * unsubscribed, is the same reference `add` is being called on, or is\n\t     * `Subscription.EMPTY`, it will not be added.\n\t     *\n\t     * If this subscription is already in an `closed` state, the passed\n\t     * tear down logic will be executed immediately.\n\t     *\n\t     * @param {TeardownLogic} teardown The additional logic to execute on\n\t     * teardown.\n\t     * @return {Subscription} Returns the Subscription used or created to be\n\t     * added to the inner subscriptions list. This Subscription can be used with\n\t     * `remove()` to remove the passed teardown logic from the inner subscriptions\n\t     * list.\n\t     */\n\t    Subscription.prototype.add = function (teardown) {\n\t        if (!teardown || (teardown === Subscription.EMPTY)) {\n\t            return Subscription.EMPTY;\n\t        }\n\t        if (teardown === this) {\n\t            return this;\n\t        }\n\t        var subscription = teardown;\n\t        switch (typeof teardown) {\n\t            case 'function':\n\t                subscription = new Subscription(teardown);\n\t            case 'object':\n\t                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n\t                    return subscription;\n\t                }\n\t                else if (this.closed) {\n\t                    subscription.unsubscribe();\n\t                    return subscription;\n\t                }\n\t                else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n\t                    var tmp = subscription;\n\t                    subscription = new Subscription();\n\t                    subscription._subscriptions = [tmp];\n\t                }\n\t                break;\n\t            default:\n\t                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n\t        }\n\t        var subscriptions = this._subscriptions || (this._subscriptions = []);\n\t        subscriptions.push(subscription);\n\t        subscription._addParent(this);\n\t        return subscription;\n\t    };\n\t    /**\n\t     * Removes a Subscription from the internal list of subscriptions that will\n\t     * unsubscribe during the unsubscribe process of this Subscription.\n\t     * @param {Subscription} subscription The subscription to remove.\n\t     * @return {void}\n\t     */\n\t    Subscription.prototype.remove = function (subscription) {\n\t        var subscriptions = this._subscriptions;\n\t        if (subscriptions) {\n\t            var subscriptionIndex = subscriptions.indexOf(subscription);\n\t            if (subscriptionIndex !== -1) {\n\t                subscriptions.splice(subscriptionIndex, 1);\n\t            }\n\t        }\n\t    };\n\t    Subscription.prototype._addParent = function (parent) {\n\t        var _a = this, _parent = _a._parent, _parents = _a._parents;\n\t        if (!_parent || _parent === parent) {\n\t            // If we don't have a parent, or the new parent is the same as the\n\t            // current parent, then set this._parent to the new parent.\n\t            this._parent = parent;\n\t        }\n\t        else if (!_parents) {\n\t            // If there's already one parent, but not multiple, allocate an Array to\n\t            // store the rest of the parent Subscriptions.\n\t            this._parents = [parent];\n\t        }\n\t        else if (_parents.indexOf(parent) === -1) {\n\t            // Only add the new parent to the _parents list if it's not already there.\n\t            _parents.push(parent);\n\t        }\n\t    };\n\t    Subscription.EMPTY = (function (empty) {\n\t        empty.closed = true;\n\t        return empty;\n\t    }(new Subscription()));\n\t    return Subscription;\n\t}());\n\texports.Subscription = Subscription;\n\tfunction flattenUnsubscriptionErrors(errors) {\n\t    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);\n\t}\n\t//# sourceMappingURL=Subscription.js.map\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\texports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n\t//# sourceMappingURL=isArray.js.map\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tfunction isObject(x) {\n\t    return x != null && typeof x === 'object';\n\t}\n\texports.isObject = isObject;\n\t//# sourceMappingURL=isObject.js.map\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar errorObject_1 = __webpack_require__(15);\n\tvar tryCatchTarget;\n\tfunction tryCatcher() {\n\t    try {\n\t        return tryCatchTarget.apply(this, arguments);\n\t    }\n\t    catch (e) {\n\t        errorObject_1.errorObject.e = e;\n\t        return errorObject_1.errorObject;\n\t    }\n\t}\n\tfunction tryCatch(fn) {\n\t    tryCatchTarget = fn;\n\t    return tryCatcher;\n\t}\n\texports.tryCatch = tryCatch;\n\t;\n\t//# sourceMappingURL=tryCatch.js.map\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t// typeof any so that it we don't have to cast when comparing a result to the error object\n\texports.errorObject = { e: {} };\n\t//# sourceMappingURL=errorObject.js.map\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\t/**\n\t * An error thrown when one or more errors have occurred during the\n\t * `unsubscribe` of a {@link Subscription}.\n\t */\n\tvar UnsubscriptionError = (function (_super) {\n\t    __extends(UnsubscriptionError, _super);\n\t    function UnsubscriptionError(errors) {\n\t        _super.call(this);\n\t        this.errors = errors;\n\t        var err = Error.call(this, errors ?\n\t            errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return ((i + 1) + \") \" + err.toString()); }).join('\\n  ') : '');\n\t        this.name = err.name = 'UnsubscriptionError';\n\t        this.stack = err.stack;\n\t        this.message = err.message;\n\t    }\n\t    return UnsubscriptionError;\n\t}(Error));\n\texports.UnsubscriptionError = UnsubscriptionError;\n\t//# sourceMappingURL=UnsubscriptionError.js.map\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\texports.empty = {\n\t    closed: true,\n\t    next: function (value) { },\n\t    error: function (err) { throw err; },\n\t    complete: function () { }\n\t};\n\t//# sourceMappingURL=Observer.js.map\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(7);\n\tvar Symbol = root_1.root.Symbol;\n\texports.rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n\t    Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\t/**\n\t * @deprecated use rxSubscriber instead\n\t */\n\texports.$$rxSubscriber = exports.rxSubscriber;\n\t//# sourceMappingURL=rxSubscriber.js.map\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(7);\n\tfunction getSymbolObservable(context) {\n\t    var $$observable;\n\t    var Symbol = context.Symbol;\n\t    if (typeof Symbol === 'function') {\n\t        if (Symbol.observable) {\n\t            $$observable = Symbol.observable;\n\t        }\n\t        else {\n\t            $$observable = Symbol('observable');\n\t            Symbol.observable = $$observable;\n\t        }\n\t    }\n\t    else {\n\t        $$observable = '@@observable';\n\t    }\n\t    return $$observable;\n\t}\n\texports.getSymbolObservable = getSymbolObservable;\n\texports.observable = getSymbolObservable(root_1.root);\n\t/**\n\t * @deprecated use observable instead\n\t */\n\texports.$$observable = exports.observable;\n\t//# sourceMappingURL=observable.js.map\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar noop_1 = __webpack_require__(21);\n\t/* tslint:enable:max-line-length */\n\tfunction pipe() {\n\t    var fns = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        fns[_i - 0] = arguments[_i];\n\t    }\n\t    return pipeFromArray(fns);\n\t}\n\texports.pipe = pipe;\n\t/* @internal */\n\tfunction pipeFromArray(fns) {\n\t    if (!fns) {\n\t        return noop_1.noop;\n\t    }\n\t    if (fns.length === 1) {\n\t        return fns[0];\n\t    }\n\t    return function piped(input) {\n\t        return fns.reduce(function (prev, fn) { return fn(prev); }, input);\n\t    };\n\t}\n\texports.pipeFromArray = pipeFromArray;\n\t//# sourceMappingURL=pipe.js.map\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t/* tslint:disable:no-empty */\n\tfunction noop() { }\n\texports.noop = noop;\n\t//# sourceMappingURL=noop.js.map\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar merge_1 = __webpack_require__(23);\n\texports.merge = merge_1.mergeStatic;\n\t//# sourceMappingURL=merge.js.map\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar merge_1 = __webpack_require__(24);\n\tvar merge_2 = __webpack_require__(24);\n\texports.mergeStatic = merge_2.mergeStatic;\n\t/* tslint:enable:max-line-length */\n\t/**\n\t * Creates an output Observable which concurrently emits all values from every\n\t * given input Observable.\n\t *\n\t * <span class=\"informal\">Flattens multiple Observables together by blending\n\t * their values into one Observable.</span>\n\t *\n\t * <img src=\"./img/merge.png\" width=\"100%\">\n\t *\n\t * `merge` subscribes to each given input Observable (either the source or an\n\t * Observable given as argument), and simply forwards (without doing any\n\t * transformation) all the values from all the input Observables to the output\n\t * Observable. The output Observable only completes once all input Observables\n\t * have completed. Any error delivered by an input Observable will be immediately\n\t * emitted on the output Observable.\n\t *\n\t * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var timer = Rx.Observable.interval(1000);\n\t * var clicksOrTimer = clicks.merge(timer);\n\t * clicksOrTimer.subscribe(x => console.log(x));\n\t *\n\t * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n\t * var timer1 = Rx.Observable.interval(1000).take(10);\n\t * var timer2 = Rx.Observable.interval(2000).take(6);\n\t * var timer3 = Rx.Observable.interval(500).take(10);\n\t * var concurrent = 2; // the argument\n\t * var merged = timer1.merge(timer2, timer3, concurrent);\n\t * merged.subscribe(x => console.log(x));\n\t *\n\t * @see {@link mergeAll}\n\t * @see {@link mergeMap}\n\t * @see {@link mergeMapTo}\n\t * @see {@link mergeScan}\n\t *\n\t * @param {ObservableInput} other An input Observable to merge with the source\n\t * Observable. More than one input Observables may be given as argument.\n\t * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n\t * Observables being subscribed to concurrently.\n\t * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n\t * concurrency of input Observables.\n\t * @return {Observable} An Observable that emits items that are the result of\n\t * every input Observable.\n\t * @method merge\n\t * @owner Observable\n\t */\n\tfunction merge() {\n\t    var observables = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        observables[_i - 0] = arguments[_i];\n\t    }\n\t    return merge_1.merge.apply(void 0, observables)(this);\n\t}\n\texports.merge = merge;\n\t//# sourceMappingURL=merge.js.map\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(6);\n\tvar ArrayObservable_1 = __webpack_require__(25);\n\tvar mergeAll_1 = __webpack_require__(29);\n\tvar isScheduler_1 = __webpack_require__(28);\n\t/* tslint:enable:max-line-length */\n\tfunction merge() {\n\t    var observables = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        observables[_i - 0] = arguments[_i];\n\t    }\n\t    return function (source) { return source.lift.call(mergeStatic.apply(void 0, [source].concat(observables))); };\n\t}\n\texports.merge = merge;\n\t/* tslint:enable:max-line-length */\n\t/**\n\t * Creates an output Observable which concurrently emits all values from every\n\t * given input Observable.\n\t *\n\t * <span class=\"informal\">Flattens multiple Observables together by blending\n\t * their values into one Observable.</span>\n\t *\n\t * <img src=\"./img/merge.png\" width=\"100%\">\n\t *\n\t * `merge` subscribes to each given input Observable (as arguments), and simply\n\t * forwards (without doing any transformation) all the values from all the input\n\t * Observables to the output Observable. The output Observable only completes\n\t * once all input Observables have completed. Any error delivered by an input\n\t * Observable will be immediately emitted on the output Observable.\n\t *\n\t * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var timer = Rx.Observable.interval(1000);\n\t * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n\t * clicksOrTimer.subscribe(x => console.log(x));\n\t *\n\t * // Results in the following:\n\t * // timer will emit ascending values, one every second(1000ms) to console\n\t * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n\t * // Since the two streams are merged you see these happening\n\t * // as they occur.\n\t *\n\t * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n\t * var timer1 = Rx.Observable.interval(1000).take(10);\n\t * var timer2 = Rx.Observable.interval(2000).take(6);\n\t * var timer3 = Rx.Observable.interval(500).take(10);\n\t * var concurrent = 2; // the argument\n\t * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n\t * merged.subscribe(x => console.log(x));\n\t *\n\t * // Results in the following:\n\t * // - First timer1 and timer2 will run concurrently\n\t * // - timer1 will emit a value every 1000ms for 10 iterations\n\t * // - timer2 will emit a value every 2000ms for 6 iterations\n\t * // - after timer1 hits it's max iteration, timer2 will\n\t * //   continue, and timer3 will start to run concurrently with timer2\n\t * // - when timer2 hits it's max iteration it terminates, and\n\t * //   timer3 will continue to emit a value every 500ms until it is complete\n\t *\n\t * @see {@link mergeAll}\n\t * @see {@link mergeMap}\n\t * @see {@link mergeMapTo}\n\t * @see {@link mergeScan}\n\t *\n\t * @param {...ObservableInput} observables Input Observables to merge together.\n\t * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n\t * Observables being subscribed to concurrently.\n\t * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n\t * concurrency of input Observables.\n\t * @return {Observable} an Observable that emits items that are the result of\n\t * every input Observable.\n\t * @static true\n\t * @name merge\n\t * @owner Observable\n\t */\n\tfunction mergeStatic() {\n\t    var observables = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        observables[_i - 0] = arguments[_i];\n\t    }\n\t    var concurrent = Number.POSITIVE_INFINITY;\n\t    var scheduler = null;\n\t    var last = observables[observables.length - 1];\n\t    if (isScheduler_1.isScheduler(last)) {\n\t        scheduler = observables.pop();\n\t        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n\t            concurrent = observables.pop();\n\t        }\n\t    }\n\t    else if (typeof last === 'number') {\n\t        concurrent = observables.pop();\n\t    }\n\t    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable_1.Observable) {\n\t        return observables[0];\n\t    }\n\t    return mergeAll_1.mergeAll(concurrent)(new ArrayObservable_1.ArrayObservable(observables, scheduler));\n\t}\n\texports.mergeStatic = mergeStatic;\n\t//# sourceMappingURL=merge.js.map\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(6);\n\tvar ScalarObservable_1 = __webpack_require__(26);\n\tvar EmptyObservable_1 = __webpack_require__(27);\n\tvar isScheduler_1 = __webpack_require__(28);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar ArrayObservable = (function (_super) {\n\t    __extends(ArrayObservable, _super);\n\t    function ArrayObservable(array, scheduler) {\n\t        _super.call(this);\n\t        this.array = array;\n\t        this.scheduler = scheduler;\n\t        if (!scheduler && array.length === 1) {\n\t            this._isScalar = true;\n\t            this.value = array[0];\n\t        }\n\t    }\n\t    ArrayObservable.create = function (array, scheduler) {\n\t        return new ArrayObservable(array, scheduler);\n\t    };\n\t    /**\n\t     * Creates an Observable that emits some values you specify as arguments,\n\t     * immediately one after the other, and then emits a complete notification.\n\t     *\n\t     * <span class=\"informal\">Emits the arguments you provide, then completes.\n\t     * </span>\n\t     *\n\t     * <img src=\"./img/of.png\" width=\"100%\">\n\t     *\n\t     * This static operator is useful for creating a simple Observable that only\n\t     * emits the arguments given, and the complete notification thereafter. It can\n\t     * be used for composing with other Observables, such as with {@link concat}.\n\t     * By default, it uses a `null` IScheduler, which means the `next`\n\t     * notifications are sent synchronously, although with a different IScheduler\n\t     * it is possible to determine when those notifications will be delivered.\n\t     *\n\t     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n\t     * var numbers = Rx.Observable.of(10, 20, 30);\n\t     * var letters = Rx.Observable.of('a', 'b', 'c');\n\t     * var interval = Rx.Observable.interval(1000);\n\t     * var result = numbers.concat(letters).concat(interval);\n\t     * result.subscribe(x => console.log(x));\n\t     *\n\t     * @see {@link create}\n\t     * @see {@link empty}\n\t     * @see {@link never}\n\t     * @see {@link throw}\n\t     *\n\t     * @param {...T} values Arguments that represent `next` values to be emitted.\n\t     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n\t     * the emissions of the `next` notifications.\n\t     * @return {Observable<T>} An Observable that emits each given input value.\n\t     * @static true\n\t     * @name of\n\t     * @owner Observable\n\t     */\n\t    ArrayObservable.of = function () {\n\t        var array = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            array[_i - 0] = arguments[_i];\n\t        }\n\t        var scheduler = array[array.length - 1];\n\t        if (isScheduler_1.isScheduler(scheduler)) {\n\t            array.pop();\n\t        }\n\t        else {\n\t            scheduler = null;\n\t        }\n\t        var len = array.length;\n\t        if (len > 1) {\n\t            return new ArrayObservable(array, scheduler);\n\t        }\n\t        else if (len === 1) {\n\t            return new ScalarObservable_1.ScalarObservable(array[0], scheduler);\n\t        }\n\t        else {\n\t            return new EmptyObservable_1.EmptyObservable(scheduler);\n\t        }\n\t    };\n\t    ArrayObservable.dispatch = function (state) {\n\t        var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;\n\t        if (index >= count) {\n\t            subscriber.complete();\n\t            return;\n\t        }\n\t        subscriber.next(array[index]);\n\t        if (subscriber.closed) {\n\t            return;\n\t        }\n\t        state.index = index + 1;\n\t        this.schedule(state);\n\t    };\n\t    ArrayObservable.prototype._subscribe = function (subscriber) {\n\t        var index = 0;\n\t        var array = this.array;\n\t        var count = array.length;\n\t        var scheduler = this.scheduler;\n\t        if (scheduler) {\n\t            return scheduler.schedule(ArrayObservable.dispatch, 0, {\n\t                array: array, index: index, count: count, subscriber: subscriber\n\t            });\n\t        }\n\t        else {\n\t            for (var i = 0; i < count && !subscriber.closed; i++) {\n\t                subscriber.next(array[i]);\n\t            }\n\t            subscriber.complete();\n\t        }\n\t    };\n\t    return ArrayObservable;\n\t}(Observable_1.Observable));\n\texports.ArrayObservable = ArrayObservable;\n\t//# sourceMappingURL=ArrayObservable.js.map\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(6);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar ScalarObservable = (function (_super) {\n\t    __extends(ScalarObservable, _super);\n\t    function ScalarObservable(value, scheduler) {\n\t        _super.call(this);\n\t        this.value = value;\n\t        this.scheduler = scheduler;\n\t        this._isScalar = true;\n\t        if (scheduler) {\n\t            this._isScalar = false;\n\t        }\n\t    }\n\t    ScalarObservable.create = function (value, scheduler) {\n\t        return new ScalarObservable(value, scheduler);\n\t    };\n\t    ScalarObservable.dispatch = function (state) {\n\t        var done = state.done, value = state.value, subscriber = state.subscriber;\n\t        if (done) {\n\t            subscriber.complete();\n\t            return;\n\t        }\n\t        subscriber.next(value);\n\t        if (subscriber.closed) {\n\t            return;\n\t        }\n\t        state.done = true;\n\t        this.schedule(state);\n\t    };\n\t    ScalarObservable.prototype._subscribe = function (subscriber) {\n\t        var value = this.value;\n\t        var scheduler = this.scheduler;\n\t        if (scheduler) {\n\t            return scheduler.schedule(ScalarObservable.dispatch, 0, {\n\t                done: false, value: value, subscriber: subscriber\n\t            });\n\t        }\n\t        else {\n\t            subscriber.next(value);\n\t            if (!subscriber.closed) {\n\t                subscriber.complete();\n\t            }\n\t        }\n\t    };\n\t    return ScalarObservable;\n\t}(Observable_1.Observable));\n\texports.ScalarObservable = ScalarObservable;\n\t//# sourceMappingURL=ScalarObservable.js.map\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(6);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar EmptyObservable = (function (_super) {\n\t    __extends(EmptyObservable, _super);\n\t    function EmptyObservable(scheduler) {\n\t        _super.call(this);\n\t        this.scheduler = scheduler;\n\t    }\n\t    /**\n\t     * Creates an Observable that emits no items to the Observer and immediately\n\t     * emits a complete notification.\n\t     *\n\t     * <span class=\"informal\">Just emits 'complete', and nothing else.\n\t     * </span>\n\t     *\n\t     * <img src=\"./img/empty.png\" width=\"100%\">\n\t     *\n\t     * This static operator is useful for creating a simple Observable that only\n\t     * emits the complete notification. It can be used for composing with other\n\t     * Observables, such as in a {@link mergeMap}.\n\t     *\n\t     * @example <caption>Emit the number 7, then complete.</caption>\n\t     * var result = Rx.Observable.empty().startWith(7);\n\t     * result.subscribe(x => console.log(x));\n\t     *\n\t     * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n\t     * var interval = Rx.Observable.interval(1000);\n\t     * var result = interval.mergeMap(x =>\n\t     *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n\t     * );\n\t     * result.subscribe(x => console.log(x));\n\t     *\n\t     * // Results in the following to the console:\n\t     * // x is equal to the count on the interval eg(0,1,2,3,...)\n\t     * // x will occur every 1000ms\n\t     * // if x % 2 is equal to 1 print abc\n\t     * // if x % 2 is not equal to 1 nothing will be output\n\t     *\n\t     * @see {@link create}\n\t     * @see {@link never}\n\t     * @see {@link of}\n\t     * @see {@link throw}\n\t     *\n\t     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n\t     * the emission of the complete notification.\n\t     * @return {Observable} An \"empty\" Observable: emits only the complete\n\t     * notification.\n\t     * @static true\n\t     * @name empty\n\t     * @owner Observable\n\t     */\n\t    EmptyObservable.create = function (scheduler) {\n\t        return new EmptyObservable(scheduler);\n\t    };\n\t    EmptyObservable.dispatch = function (arg) {\n\t        var subscriber = arg.subscriber;\n\t        subscriber.complete();\n\t    };\n\t    EmptyObservable.prototype._subscribe = function (subscriber) {\n\t        var scheduler = this.scheduler;\n\t        if (scheduler) {\n\t            return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });\n\t        }\n\t        else {\n\t            subscriber.complete();\n\t        }\n\t    };\n\t    return EmptyObservable;\n\t}(Observable_1.Observable));\n\texports.EmptyObservable = EmptyObservable;\n\t//# sourceMappingURL=EmptyObservable.js.map\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tfunction isScheduler(value) {\n\t    return value && typeof value.schedule === 'function';\n\t}\n\texports.isScheduler = isScheduler;\n\t//# sourceMappingURL=isScheduler.js.map\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar mergeMap_1 = __webpack_require__(30);\n\tvar identity_1 = __webpack_require__(37);\n\t/**\n\t * Converts a higher-order Observable into a first-order Observable which\n\t * concurrently delivers all values that are emitted on the inner Observables.\n\t *\n\t * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n\t *\n\t * <img src=\"./img/mergeAll.png\" width=\"100%\">\n\t *\n\t * `mergeAll` subscribes to an Observable that emits Observables, also known as\n\t * a higher-order Observable. Each time it observes one of these emitted inner\n\t * Observables, it subscribes to that and delivers all the values from the\n\t * inner Observable on the output Observable. The output Observable only\n\t * completes once all inner Observables have completed. Any error delivered by\n\t * a inner Observable will be immediately emitted on the output Observable.\n\t *\n\t * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n\t * var firstOrder = higherOrder.mergeAll();\n\t * firstOrder.subscribe(x => console.log(x));\n\t *\n\t * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n\t * var firstOrder = higherOrder.mergeAll(2);\n\t * firstOrder.subscribe(x => console.log(x));\n\t *\n\t * @see {@link combineAll}\n\t * @see {@link concatAll}\n\t * @see {@link exhaust}\n\t * @see {@link merge}\n\t * @see {@link mergeMap}\n\t * @see {@link mergeMapTo}\n\t * @see {@link mergeScan}\n\t * @see {@link switch}\n\t * @see {@link zipAll}\n\t *\n\t * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n\t * Observables being subscribed to concurrently.\n\t * @return {Observable} An Observable that emits values coming from all the\n\t * inner Observables emitted by the source Observable.\n\t * @method mergeAll\n\t * @owner Observable\n\t */\n\tfunction mergeAll(concurrent) {\n\t    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n\t    return mergeMap_1.mergeMap(identity_1.identity, null, concurrent);\n\t}\n\texports.mergeAll = mergeAll;\n\t//# sourceMappingURL=mergeAll.js.map\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar subscribeToResult_1 = __webpack_require__(31);\n\tvar OuterSubscriber_1 = __webpack_require__(36);\n\t/* tslint:enable:max-line-length */\n\t/**\n\t * Projects each source value to an Observable which is merged in the output\n\t * Observable.\n\t *\n\t * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n\t * these inner Observables using {@link mergeAll}.</span>\n\t *\n\t * <img src=\"./img/mergeMap.png\" width=\"100%\">\n\t *\n\t * Returns an Observable that emits items based on applying a function that you\n\t * supply to each item emitted by the source Observable, where that function\n\t * returns an Observable, and then merging those resulting Observables and\n\t * emitting the results of this merger.\n\t *\n\t * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n\t * var letters = Rx.Observable.of('a', 'b', 'c');\n\t * var result = letters.mergeMap(x =>\n\t *   Rx.Observable.interval(1000).map(i => x+i)\n\t * );\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * // Results in the following:\n\t * // a0\n\t * // b0\n\t * // c0\n\t * // a1\n\t * // b1\n\t * // c1\n\t * // continues to list a,b,c with respective ascending integers\n\t *\n\t * @see {@link concatMap}\n\t * @see {@link exhaustMap}\n\t * @see {@link merge}\n\t * @see {@link mergeAll}\n\t * @see {@link mergeMapTo}\n\t * @see {@link mergeScan}\n\t * @see {@link switchMap}\n\t *\n\t * @param {function(value: T, ?index: number): ObservableInput} project A function\n\t * that, when applied to an item emitted by the source Observable, returns an\n\t * Observable.\n\t * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n\t * A function to produce the value on the output Observable based on the values\n\t * and the indices of the source (outer) emission and the inner Observable\n\t * emission. The arguments passed to this function are:\n\t * - `outerValue`: the value that came from the source\n\t * - `innerValue`: the value that came from the projected Observable\n\t * - `outerIndex`: the \"index\" of the value that came from the source\n\t * - `innerIndex`: the \"index\" of the value from the projected Observable\n\t * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n\t * Observables being subscribed to concurrently.\n\t * @return {Observable} An Observable that emits the result of applying the\n\t * projection function (and the optional `resultSelector`) to each item emitted\n\t * by the source Observable and merging the results of the Observables obtained\n\t * from this transformation.\n\t * @method mergeMap\n\t * @owner Observable\n\t */\n\tfunction mergeMap(project, resultSelector, concurrent) {\n\t    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n\t    return function mergeMapOperatorFunction(source) {\n\t        if (typeof resultSelector === 'number') {\n\t            concurrent = resultSelector;\n\t            resultSelector = null;\n\t        }\n\t        return source.lift(new MergeMapOperator(project, resultSelector, concurrent));\n\t    };\n\t}\n\texports.mergeMap = mergeMap;\n\tvar MergeMapOperator = (function () {\n\t    function MergeMapOperator(project, resultSelector, concurrent) {\n\t        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n\t        this.project = project;\n\t        this.resultSelector = resultSelector;\n\t        this.concurrent = concurrent;\n\t    }\n\t    MergeMapOperator.prototype.call = function (observer, source) {\n\t        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));\n\t    };\n\t    return MergeMapOperator;\n\t}());\n\texports.MergeMapOperator = MergeMapOperator;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar MergeMapSubscriber = (function (_super) {\n\t    __extends(MergeMapSubscriber, _super);\n\t    function MergeMapSubscriber(destination, project, resultSelector, concurrent) {\n\t        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n\t        _super.call(this, destination);\n\t        this.project = project;\n\t        this.resultSelector = resultSelector;\n\t        this.concurrent = concurrent;\n\t        this.hasCompleted = false;\n\t        this.buffer = [];\n\t        this.active = 0;\n\t        this.index = 0;\n\t    }\n\t    MergeMapSubscriber.prototype._next = function (value) {\n\t        if (this.active < this.concurrent) {\n\t            this._tryNext(value);\n\t        }\n\t        else {\n\t            this.buffer.push(value);\n\t        }\n\t    };\n\t    MergeMapSubscriber.prototype._tryNext = function (value) {\n\t        var result;\n\t        var index = this.index++;\n\t        try {\n\t            result = this.project(value, index);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this.active++;\n\t        this._innerSub(result, value, index);\n\t    };\n\t    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n\t        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n\t    };\n\t    MergeMapSubscriber.prototype._complete = function () {\n\t        this.hasCompleted = true;\n\t        if (this.active === 0 && this.buffer.length === 0) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        if (this.resultSelector) {\n\t            this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n\t        }\n\t        else {\n\t            this.destination.next(innerValue);\n\t        }\n\t    };\n\t    MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n\t        var result;\n\t        try {\n\t            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this.destination.next(result);\n\t    };\n\t    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        var buffer = this.buffer;\n\t        this.remove(innerSub);\n\t        this.active--;\n\t        if (buffer.length > 0) {\n\t            this._next(buffer.shift());\n\t        }\n\t        else if (this.active === 0 && this.hasCompleted) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    return MergeMapSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\texports.MergeMapSubscriber = MergeMapSubscriber;\n\t//# sourceMappingURL=mergeMap.js.map\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(7);\n\tvar isArrayLike_1 = __webpack_require__(32);\n\tvar isPromise_1 = __webpack_require__(33);\n\tvar isObject_1 = __webpack_require__(13);\n\tvar Observable_1 = __webpack_require__(6);\n\tvar iterator_1 = __webpack_require__(34);\n\tvar InnerSubscriber_1 = __webpack_require__(35);\n\tvar observable_1 = __webpack_require__(19);\n\tfunction subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {\n\t    var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\t    if (destination.closed) {\n\t        return null;\n\t    }\n\t    if (result instanceof Observable_1.Observable) {\n\t        if (result._isScalar) {\n\t            destination.next(result.value);\n\t            destination.complete();\n\t            return null;\n\t        }\n\t        else {\n\t            destination.syncErrorThrowable = true;\n\t            return result.subscribe(destination);\n\t        }\n\t    }\n\t    else if (isArrayLike_1.isArrayLike(result)) {\n\t        for (var i = 0, len = result.length; i < len && !destination.closed; i++) {\n\t            destination.next(result[i]);\n\t        }\n\t        if (!destination.closed) {\n\t            destination.complete();\n\t        }\n\t    }\n\t    else if (isPromise_1.isPromise(result)) {\n\t        result.then(function (value) {\n\t            if (!destination.closed) {\n\t                destination.next(value);\n\t                destination.complete();\n\t            }\n\t        }, function (err) { return destination.error(err); })\n\t            .then(null, function (err) {\n\t            // Escaping the Promise trap: globally throw unhandled errors\n\t            root_1.root.setTimeout(function () { throw err; });\n\t        });\n\t        return destination;\n\t    }\n\t    else if (result && typeof result[iterator_1.iterator] === 'function') {\n\t        var iterator = result[iterator_1.iterator]();\n\t        do {\n\t            var item = iterator.next();\n\t            if (item.done) {\n\t                destination.complete();\n\t                break;\n\t            }\n\t            destination.next(item.value);\n\t            if (destination.closed) {\n\t                break;\n\t            }\n\t        } while (true);\n\t    }\n\t    else if (result && typeof result[observable_1.observable] === 'function') {\n\t        var obs = result[observable_1.observable]();\n\t        if (typeof obs.subscribe !== 'function') {\n\t            destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n\t        }\n\t        else {\n\t            return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n\t        }\n\t    }\n\t    else {\n\t        var value = isObject_1.isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\n\t        var msg = (\"You provided \" + value + \" where a stream was expected.\")\n\t            + ' You can provide an Observable, Promise, Array, or Iterable.';\n\t        destination.error(new TypeError(msg));\n\t    }\n\t    return null;\n\t}\n\texports.subscribeToResult = subscribeToResult;\n\t//# sourceMappingURL=subscribeToResult.js.map\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\texports.isArrayLike = (function (x) { return x && typeof x.length === 'number'; });\n\t//# sourceMappingURL=isArrayLike.js.map\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tfunction isPromise(value) {\n\t    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n\t}\n\texports.isPromise = isPromise;\n\t//# sourceMappingURL=isPromise.js.map\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(7);\n\tfunction symbolIteratorPonyfill(root) {\n\t    var Symbol = root.Symbol;\n\t    if (typeof Symbol === 'function') {\n\t        if (!Symbol.iterator) {\n\t            Symbol.iterator = Symbol('iterator polyfill');\n\t        }\n\t        return Symbol.iterator;\n\t    }\n\t    else {\n\t        // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n\t        var Set_1 = root.Set;\n\t        if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {\n\t            return '@@iterator';\n\t        }\n\t        var Map_1 = root.Map;\n\t        // required for compatability with es6-shim\n\t        if (Map_1) {\n\t            var keys = Object.getOwnPropertyNames(Map_1.prototype);\n\t            for (var i = 0; i < keys.length; ++i) {\n\t                var key = keys[i];\n\t                // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n\t                if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {\n\t                    return key;\n\t                }\n\t            }\n\t        }\n\t        return '@@iterator';\n\t    }\n\t}\n\texports.symbolIteratorPonyfill = symbolIteratorPonyfill;\n\texports.iterator = symbolIteratorPonyfill(root_1.root);\n\t/**\n\t * @deprecated use iterator instead\n\t */\n\texports.$$iterator = exports.iterator;\n\t//# sourceMappingURL=iterator.js.map\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(9);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar InnerSubscriber = (function (_super) {\n\t    __extends(InnerSubscriber, _super);\n\t    function InnerSubscriber(parent, outerValue, outerIndex) {\n\t        _super.call(this);\n\t        this.parent = parent;\n\t        this.outerValue = outerValue;\n\t        this.outerIndex = outerIndex;\n\t        this.index = 0;\n\t    }\n\t    InnerSubscriber.prototype._next = function (value) {\n\t        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n\t    };\n\t    InnerSubscriber.prototype._error = function (error) {\n\t        this.parent.notifyError(error, this);\n\t        this.unsubscribe();\n\t    };\n\t    InnerSubscriber.prototype._complete = function () {\n\t        this.parent.notifyComplete(this);\n\t        this.unsubscribe();\n\t    };\n\t    return InnerSubscriber;\n\t}(Subscriber_1.Subscriber));\n\texports.InnerSubscriber = InnerSubscriber;\n\t//# sourceMappingURL=InnerSubscriber.js.map\n\n/***/ }),\n/* 36 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(9);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar OuterSubscriber = (function (_super) {\n\t    __extends(OuterSubscriber, _super);\n\t    function OuterSubscriber() {\n\t        _super.apply(this, arguments);\n\t    }\n\t    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.destination.next(innerValue);\n\t    };\n\t    OuterSubscriber.prototype.notifyError = function (error, innerSub) {\n\t        this.destination.error(error);\n\t    };\n\t    OuterSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        this.destination.complete();\n\t    };\n\t    return OuterSubscriber;\n\t}(Subscriber_1.Subscriber));\n\texports.OuterSubscriber = OuterSubscriber;\n\t//# sourceMappingURL=OuterSubscriber.js.map\n\n/***/ }),\n/* 37 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tfunction identity(x) {\n\t    return x;\n\t}\n\texports.identity = identity;\n\t//# sourceMappingURL=identity.js.map\n\n/***/ }),\n/* 38 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar share_1 = __webpack_require__(39);\n\t/**\n\t * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n\t * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n\t * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n\t *\n\t * This behaves similarly to .publish().refCount(), with a behavior difference when the source observable emits complete.\n\t * .publish().refCount() will not resubscribe to the original source, however .share() will resubscribe to the original source.\n\t * Observable.of(\"test\").publish().refCount() will not re-emit \"test\" on new subscriptions, Observable.of(\"test\").share() will\n\t * re-emit \"test\" to new subscriptions.\n\t *\n\t * <img src=\"./img/share.png\" width=\"100%\">\n\t *\n\t * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n\t * @method share\n\t * @owner Observable\n\t */\n\tfunction share() {\n\t    return share_1.share()(this);\n\t}\n\texports.share = share;\n\t;\n\t//# sourceMappingURL=share.js.map\n\n/***/ }),\n/* 39 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar multicast_1 = __webpack_require__(40);\n\tvar refCount_1 = __webpack_require__(45);\n\tvar Subject_1 = __webpack_require__(42);\n\tfunction shareSubjectFactory() {\n\t    return new Subject_1.Subject();\n\t}\n\t/**\n\t * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n\t * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n\t * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n\t * This is an alias for .multicast(() => new Subject()).refCount().\n\t *\n\t * <img src=\"./img/share.png\" width=\"100%\">\n\t *\n\t * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n\t * @method share\n\t * @owner Observable\n\t */\n\tfunction share() {\n\t    return function (source) { return refCount_1.refCount()(multicast_1.multicast(shareSubjectFactory)(source)); };\n\t}\n\texports.share = share;\n\t;\n\t//# sourceMappingURL=share.js.map\n\n/***/ }),\n/* 40 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar ConnectableObservable_1 = __webpack_require__(41);\n\t/* tslint:enable:max-line-length */\n\t/**\n\t * Returns an Observable that emits the results of invoking a specified selector on items\n\t * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n\t *\n\t * <img src=\"./img/multicast.png\" width=\"100%\">\n\t *\n\t * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n\t * which the source sequence's elements will be multicast to the selector function\n\t * or Subject to push source elements into.\n\t * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n\t * as many times as needed, without causing multiple subscriptions to the source stream.\n\t * Subscribers to the given source will receive all notifications of the source from the\n\t * time of the subscription forward.\n\t * @return {Observable} An Observable that emits the results of invoking the selector\n\t * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n\t * the underlying stream.\n\t * @method multicast\n\t * @owner Observable\n\t */\n\tfunction multicast(subjectOrSubjectFactory, selector) {\n\t    return function multicastOperatorFunction(source) {\n\t        var subjectFactory;\n\t        if (typeof subjectOrSubjectFactory === 'function') {\n\t            subjectFactory = subjectOrSubjectFactory;\n\t        }\n\t        else {\n\t            subjectFactory = function subjectFactory() {\n\t                return subjectOrSubjectFactory;\n\t            };\n\t        }\n\t        if (typeof selector === 'function') {\n\t            return source.lift(new MulticastOperator(subjectFactory, selector));\n\t        }\n\t        var connectable = Object.create(source, ConnectableObservable_1.connectableObservableDescriptor);\n\t        connectable.source = source;\n\t        connectable.subjectFactory = subjectFactory;\n\t        return connectable;\n\t    };\n\t}\n\texports.multicast = multicast;\n\tvar MulticastOperator = (function () {\n\t    function MulticastOperator(subjectFactory, selector) {\n\t        this.subjectFactory = subjectFactory;\n\t        this.selector = selector;\n\t    }\n\t    MulticastOperator.prototype.call = function (subscriber, source) {\n\t        var selector = this.selector;\n\t        var subject = this.subjectFactory();\n\t        var subscription = selector(subject).subscribe(subscriber);\n\t        subscription.add(source.subscribe(subject));\n\t        return subscription;\n\t    };\n\t    return MulticastOperator;\n\t}());\n\texports.MulticastOperator = MulticastOperator;\n\t//# sourceMappingURL=multicast.js.map\n\n/***/ }),\n/* 41 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subject_1 = __webpack_require__(42);\n\tvar Observable_1 = __webpack_require__(6);\n\tvar Subscriber_1 = __webpack_require__(9);\n\tvar Subscription_1 = __webpack_require__(11);\n\tvar refCount_1 = __webpack_require__(45);\n\t/**\n\t * @class ConnectableObservable<T>\n\t */\n\tvar ConnectableObservable = (function (_super) {\n\t    __extends(ConnectableObservable, _super);\n\t    function ConnectableObservable(source, subjectFactory) {\n\t        _super.call(this);\n\t        this.source = source;\n\t        this.subjectFactory = subjectFactory;\n\t        this._refCount = 0;\n\t        this._isComplete = false;\n\t    }\n\t    ConnectableObservable.prototype._subscribe = function (subscriber) {\n\t        return this.getSubject().subscribe(subscriber);\n\t    };\n\t    ConnectableObservable.prototype.getSubject = function () {\n\t        var subject = this._subject;\n\t        if (!subject || subject.isStopped) {\n\t            this._subject = this.subjectFactory();\n\t        }\n\t        return this._subject;\n\t    };\n\t    ConnectableObservable.prototype.connect = function () {\n\t        var connection = this._connection;\n\t        if (!connection) {\n\t            this._isComplete = false;\n\t            connection = this._connection = new Subscription_1.Subscription();\n\t            connection.add(this.source\n\t                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n\t            if (connection.closed) {\n\t                this._connection = null;\n\t                connection = Subscription_1.Subscription.EMPTY;\n\t            }\n\t            else {\n\t                this._connection = connection;\n\t            }\n\t        }\n\t        return connection;\n\t    };\n\t    ConnectableObservable.prototype.refCount = function () {\n\t        return refCount_1.refCount()(this);\n\t    };\n\t    return ConnectableObservable;\n\t}(Observable_1.Observable));\n\texports.ConnectableObservable = ConnectableObservable;\n\tvar connectableProto = ConnectableObservable.prototype;\n\texports.connectableObservableDescriptor = {\n\t    operator: { value: null },\n\t    _refCount: { value: 0, writable: true },\n\t    _subject: { value: null, writable: true },\n\t    _connection: { value: null, writable: true },\n\t    _subscribe: { value: connectableProto._subscribe },\n\t    _isComplete: { value: connectableProto._isComplete, writable: true },\n\t    getSubject: { value: connectableProto.getSubject },\n\t    connect: { value: connectableProto.connect },\n\t    refCount: { value: connectableProto.refCount }\n\t};\n\tvar ConnectableSubscriber = (function (_super) {\n\t    __extends(ConnectableSubscriber, _super);\n\t    function ConnectableSubscriber(destination, connectable) {\n\t        _super.call(this, destination);\n\t        this.connectable = connectable;\n\t    }\n\t    ConnectableSubscriber.prototype._error = function (err) {\n\t        this._unsubscribe();\n\t        _super.prototype._error.call(this, err);\n\t    };\n\t    ConnectableSubscriber.prototype._complete = function () {\n\t        this.connectable._isComplete = true;\n\t        this._unsubscribe();\n\t        _super.prototype._complete.call(this);\n\t    };\n\t    ConnectableSubscriber.prototype._unsubscribe = function () {\n\t        var connectable = this.connectable;\n\t        if (connectable) {\n\t            this.connectable = null;\n\t            var connection = connectable._connection;\n\t            connectable._refCount = 0;\n\t            connectable._subject = null;\n\t            connectable._connection = null;\n\t            if (connection) {\n\t                connection.unsubscribe();\n\t            }\n\t        }\n\t    };\n\t    return ConnectableSubscriber;\n\t}(Subject_1.SubjectSubscriber));\n\tvar RefCountOperator = (function () {\n\t    function RefCountOperator(connectable) {\n\t        this.connectable = connectable;\n\t    }\n\t    RefCountOperator.prototype.call = function (subscriber, source) {\n\t        var connectable = this.connectable;\n\t        connectable._refCount++;\n\t        var refCounter = new RefCountSubscriber(subscriber, connectable);\n\t        var subscription = source.subscribe(refCounter);\n\t        if (!refCounter.closed) {\n\t            refCounter.connection = connectable.connect();\n\t        }\n\t        return subscription;\n\t    };\n\t    return RefCountOperator;\n\t}());\n\tvar RefCountSubscriber = (function (_super) {\n\t    __extends(RefCountSubscriber, _super);\n\t    function RefCountSubscriber(destination, connectable) {\n\t        _super.call(this, destination);\n\t        this.connectable = connectable;\n\t    }\n\t    RefCountSubscriber.prototype._unsubscribe = function () {\n\t        var connectable = this.connectable;\n\t        if (!connectable) {\n\t            this.connection = null;\n\t            return;\n\t        }\n\t        this.connectable = null;\n\t        var refCount = connectable._refCount;\n\t        if (refCount <= 0) {\n\t            this.connection = null;\n\t            return;\n\t        }\n\t        connectable._refCount = refCount - 1;\n\t        if (refCount > 1) {\n\t            this.connection = null;\n\t            return;\n\t        }\n\t        ///\n\t        // Compare the local RefCountSubscriber's connection Subscription to the\n\t        // connection Subscription on the shared ConnectableObservable. In cases\n\t        // where the ConnectableObservable source synchronously emits values, and\n\t        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n\t        // execution continues to here before the RefCountOperator has a chance to\n\t        // supply the RefCountSubscriber with the shared connection Subscription.\n\t        // For example:\n\t        // ```\n\t        // Observable.range(0, 10)\n\t        //   .publish()\n\t        //   .refCount()\n\t        //   .take(5)\n\t        //   .subscribe();\n\t        // ```\n\t        // In order to account for this case, RefCountSubscriber should only dispose\n\t        // the ConnectableObservable's shared connection Subscription if the\n\t        // connection Subscription exists, *and* either:\n\t        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n\t        //      Subscription yet, or,\n\t        //   b. RefCountSubscriber's connection Subscription reference is identical\n\t        //      to the shared connection Subscription\n\t        ///\n\t        var connection = this.connection;\n\t        var sharedConnection = connectable._connection;\n\t        this.connection = null;\n\t        if (sharedConnection && (!connection || sharedConnection === connection)) {\n\t            sharedConnection.unsubscribe();\n\t        }\n\t    };\n\t    return RefCountSubscriber;\n\t}(Subscriber_1.Subscriber));\n\t//# sourceMappingURL=ConnectableObservable.js.map\n\n/***/ }),\n/* 42 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(6);\n\tvar Subscriber_1 = __webpack_require__(9);\n\tvar Subscription_1 = __webpack_require__(11);\n\tvar ObjectUnsubscribedError_1 = __webpack_require__(43);\n\tvar SubjectSubscription_1 = __webpack_require__(44);\n\tvar rxSubscriber_1 = __webpack_require__(18);\n\t/**\n\t * @class SubjectSubscriber<T>\n\t */\n\tvar SubjectSubscriber = (function (_super) {\n\t    __extends(SubjectSubscriber, _super);\n\t    function SubjectSubscriber(destination) {\n\t        _super.call(this, destination);\n\t        this.destination = destination;\n\t    }\n\t    return SubjectSubscriber;\n\t}(Subscriber_1.Subscriber));\n\texports.SubjectSubscriber = SubjectSubscriber;\n\t/**\n\t * @class Subject<T>\n\t */\n\tvar Subject = (function (_super) {\n\t    __extends(Subject, _super);\n\t    function Subject() {\n\t        _super.call(this);\n\t        this.observers = [];\n\t        this.closed = false;\n\t        this.isStopped = false;\n\t        this.hasError = false;\n\t        this.thrownError = null;\n\t    }\n\t    Subject.prototype[rxSubscriber_1.rxSubscriber] = function () {\n\t        return new SubjectSubscriber(this);\n\t    };\n\t    Subject.prototype.lift = function (operator) {\n\t        var subject = new AnonymousSubject(this, this);\n\t        subject.operator = operator;\n\t        return subject;\n\t    };\n\t    Subject.prototype.next = function (value) {\n\t        if (this.closed) {\n\t            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n\t        }\n\t        if (!this.isStopped) {\n\t            var observers = this.observers;\n\t            var len = observers.length;\n\t            var copy = observers.slice();\n\t            for (var i = 0; i < len; i++) {\n\t                copy[i].next(value);\n\t            }\n\t        }\n\t    };\n\t    Subject.prototype.error = function (err) {\n\t        if (this.closed) {\n\t            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n\t        }\n\t        this.hasError = true;\n\t        this.thrownError = err;\n\t        this.isStopped = true;\n\t        var observers = this.observers;\n\t        var len = observers.length;\n\t        var copy = observers.slice();\n\t        for (var i = 0; i < len; i++) {\n\t            copy[i].error(err);\n\t        }\n\t        this.observers.length = 0;\n\t    };\n\t    Subject.prototype.complete = function () {\n\t        if (this.closed) {\n\t            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n\t        }\n\t        this.isStopped = true;\n\t        var observers = this.observers;\n\t        var len = observers.length;\n\t        var copy = observers.slice();\n\t        for (var i = 0; i < len; i++) {\n\t            copy[i].complete();\n\t        }\n\t        this.observers.length = 0;\n\t    };\n\t    Subject.prototype.unsubscribe = function () {\n\t        this.isStopped = true;\n\t        this.closed = true;\n\t        this.observers = null;\n\t    };\n\t    Subject.prototype._trySubscribe = function (subscriber) {\n\t        if (this.closed) {\n\t            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n\t        }\n\t        else {\n\t            return _super.prototype._trySubscribe.call(this, subscriber);\n\t        }\n\t    };\n\t    Subject.prototype._subscribe = function (subscriber) {\n\t        if (this.closed) {\n\t            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n\t        }\n\t        else if (this.hasError) {\n\t            subscriber.error(this.thrownError);\n\t            return Subscription_1.Subscription.EMPTY;\n\t        }\n\t        else if (this.isStopped) {\n\t            subscriber.complete();\n\t            return Subscription_1.Subscription.EMPTY;\n\t        }\n\t        else {\n\t            this.observers.push(subscriber);\n\t            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);\n\t        }\n\t    };\n\t    Subject.prototype.asObservable = function () {\n\t        var observable = new Observable_1.Observable();\n\t        observable.source = this;\n\t        return observable;\n\t    };\n\t    Subject.create = function (destination, source) {\n\t        return new AnonymousSubject(destination, source);\n\t    };\n\t    return Subject;\n\t}(Observable_1.Observable));\n\texports.Subject = Subject;\n\t/**\n\t * @class AnonymousSubject<T>\n\t */\n\tvar AnonymousSubject = (function (_super) {\n\t    __extends(AnonymousSubject, _super);\n\t    function AnonymousSubject(destination, source) {\n\t        _super.call(this);\n\t        this.destination = destination;\n\t        this.source = source;\n\t    }\n\t    AnonymousSubject.prototype.next = function (value) {\n\t        var destination = this.destination;\n\t        if (destination && destination.next) {\n\t            destination.next(value);\n\t        }\n\t    };\n\t    AnonymousSubject.prototype.error = function (err) {\n\t        var destination = this.destination;\n\t        if (destination && destination.error) {\n\t            this.destination.error(err);\n\t        }\n\t    };\n\t    AnonymousSubject.prototype.complete = function () {\n\t        var destination = this.destination;\n\t        if (destination && destination.complete) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    AnonymousSubject.prototype._subscribe = function (subscriber) {\n\t        var source = this.source;\n\t        if (source) {\n\t            return this.source.subscribe(subscriber);\n\t        }\n\t        else {\n\t            return Subscription_1.Subscription.EMPTY;\n\t        }\n\t    };\n\t    return AnonymousSubject;\n\t}(Subject));\n\texports.AnonymousSubject = AnonymousSubject;\n\t//# sourceMappingURL=Subject.js.map\n\n/***/ }),\n/* 43 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\t/**\n\t * An error thrown when an action is invalid because the object has been\n\t * unsubscribed.\n\t *\n\t * @see {@link Subject}\n\t * @see {@link BehaviorSubject}\n\t *\n\t * @class ObjectUnsubscribedError\n\t */\n\tvar ObjectUnsubscribedError = (function (_super) {\n\t    __extends(ObjectUnsubscribedError, _super);\n\t    function ObjectUnsubscribedError() {\n\t        var err = _super.call(this, 'object unsubscribed');\n\t        this.name = err.name = 'ObjectUnsubscribedError';\n\t        this.stack = err.stack;\n\t        this.message = err.message;\n\t    }\n\t    return ObjectUnsubscribedError;\n\t}(Error));\n\texports.ObjectUnsubscribedError = ObjectUnsubscribedError;\n\t//# sourceMappingURL=ObjectUnsubscribedError.js.map\n\n/***/ }),\n/* 44 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscription_1 = __webpack_require__(11);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SubjectSubscription = (function (_super) {\n\t    __extends(SubjectSubscription, _super);\n\t    function SubjectSubscription(subject, subscriber) {\n\t        _super.call(this);\n\t        this.subject = subject;\n\t        this.subscriber = subscriber;\n\t        this.closed = false;\n\t    }\n\t    SubjectSubscription.prototype.unsubscribe = function () {\n\t        if (this.closed) {\n\t            return;\n\t        }\n\t        this.closed = true;\n\t        var subject = this.subject;\n\t        var observers = subject.observers;\n\t        this.subject = null;\n\t        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n\t            return;\n\t        }\n\t        var subscriberIndex = observers.indexOf(this.subscriber);\n\t        if (subscriberIndex !== -1) {\n\t            observers.splice(subscriberIndex, 1);\n\t        }\n\t    };\n\t    return SubjectSubscription;\n\t}(Subscription_1.Subscription));\n\texports.SubjectSubscription = SubjectSubscription;\n\t//# sourceMappingURL=SubjectSubscription.js.map\n\n/***/ }),\n/* 45 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(9);\n\tfunction refCount() {\n\t    return function refCountOperatorFunction(source) {\n\t        return source.lift(new RefCountOperator(source));\n\t    };\n\t}\n\texports.refCount = refCount;\n\tvar RefCountOperator = (function () {\n\t    function RefCountOperator(connectable) {\n\t        this.connectable = connectable;\n\t    }\n\t    RefCountOperator.prototype.call = function (subscriber, source) {\n\t        var connectable = this.connectable;\n\t        connectable._refCount++;\n\t        var refCounter = new RefCountSubscriber(subscriber, connectable);\n\t        var subscription = source.subscribe(refCounter);\n\t        if (!refCounter.closed) {\n\t            refCounter.connection = connectable.connect();\n\t        }\n\t        return subscription;\n\t    };\n\t    return RefCountOperator;\n\t}());\n\tvar RefCountSubscriber = (function (_super) {\n\t    __extends(RefCountSubscriber, _super);\n\t    function RefCountSubscriber(destination, connectable) {\n\t        _super.call(this, destination);\n\t        this.connectable = connectable;\n\t    }\n\t    RefCountSubscriber.prototype._unsubscribe = function () {\n\t        var connectable = this.connectable;\n\t        if (!connectable) {\n\t            this.connection = null;\n\t            return;\n\t        }\n\t        this.connectable = null;\n\t        var refCount = connectable._refCount;\n\t        if (refCount <= 0) {\n\t            this.connection = null;\n\t            return;\n\t        }\n\t        connectable._refCount = refCount - 1;\n\t        if (refCount > 1) {\n\t            this.connection = null;\n\t            return;\n\t        }\n\t        ///\n\t        // Compare the local RefCountSubscriber's connection Subscription to the\n\t        // connection Subscription on the shared ConnectableObservable. In cases\n\t        // where the ConnectableObservable source synchronously emits values, and\n\t        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n\t        // execution continues to here before the RefCountOperator has a chance to\n\t        // supply the RefCountSubscriber with the shared connection Subscription.\n\t        // For example:\n\t        // ```\n\t        // Observable.range(0, 10)\n\t        //   .publish()\n\t        //   .refCount()\n\t        //   .take(5)\n\t        //   .subscribe();\n\t        // ```\n\t        // In order to account for this case, RefCountSubscriber should only dispose\n\t        // the ConnectableObservable's shared connection Subscription if the\n\t        // connection Subscription exists, *and* either:\n\t        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n\t        //      Subscription yet, or,\n\t        //   b. RefCountSubscriber's connection Subscription reference is identical\n\t        //      to the shared connection Subscription\n\t        ///\n\t        var connection = this.connection;\n\t        var sharedConnection = connectable._connection;\n\t        this.connection = null;\n\t        if (sharedConnection && (!connection || sharedConnection === connection)) {\n\t            sharedConnection.unsubscribe();\n\t        }\n\t    };\n\t    return RefCountSubscriber;\n\t}(Subscriber_1.Subscriber));\n\t//# sourceMappingURL=refCount.js.map\n\n/***/ }),\n/* 46 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports) {\n\t    \"use strict\";\n\t    Object.defineProperty(exports, \"__esModule\", { value: true });\n\t    var FormBase = (function () {\n\t        function FormBase() {\n\t        }\n\t        FormBase.prototype.localChange = function (e) {\n\t            if (this.propagateChange !== undefined) {\n\t                this.propagateChange((e.checked === undefined ? e.value : e.checked));\n\t            }\n\t        };\n\t        FormBase.prototype.registerOnChange = function (registerFunction) {\n\t            this.propagateChange = registerFunction;\n\t        };\n\t        FormBase.prototype.registerOnTouched = function (registerFunction) {\n\t            this.propagateTouch = registerFunction;\n\t        };\n\t        FormBase.prototype.ngAfterViewInit = function () {\n\t            this.appendTo(this.element);\n\t            if (this.ngEle.nativeElement.nodeName.toLowerCase() !== 'input') {\n\t                this.element.addEventListener('focus', this.ngOnFocus.bind(this));\n\t                this.element.addEventListener('blur', this.ngOnBlur.bind(this));\n\t            }\n\t        };\n\t        FormBase.prototype.writeValue = function (value) {\n\t            this.value = value;\n\t        };\n\t        FormBase.prototype.ngOnFocus = function (e) {\n\t            this.focus.emit(e);\n\t        };\n\t        FormBase.prototype.ngOnBlur = function (e) {\n\t            this.blur.emit(e);\n\t        };\n\t        return FormBase;\n\t    }());\n\t    exports.FormBase = FormBase;\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 47 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(2), __webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, ej2_base_1, ej2_base_2) {\n\t    \"use strict\";\n\t    Object.defineProperty(exports, \"__esModule\", { value: true });\n\t    var stringCompiler = ej2_base_1.getTemplateEngine();\n\t    function compile(templateEle, helper) {\n\t        if (typeof templateEle === 'string') {\n\t            return stringCompiler(templateEle, helper);\n\t        }\n\t        else {\n\t            var contRef_1 = templateEle.elementRef.nativeElement._viewContainerRef;\n\t            var pName_1 = templateEle.elementRef.nativeElement.propName;\n\t            return function (data, component, propName) {\n\t                var context = { $implicit: data };\n\t                var conRef = contRef_1 ? contRef_1 : component.viewContainerRef;\n\t                var viewRef = conRef.createEmbeddedView(templateEle, context);\n\t                var viewCollection = component ?\n\t                    component.registeredTemplate : ej2_base_2.getValue('currentInstance.registeredTemplate', conRef);\n\t                propName = propName ? propName : pName_1;\n\t                if (typeof viewCollection[propName] === 'undefined') {\n\t                    viewCollection[propName] = [];\n\t                }\n\t                viewCollection[propName].push(viewRef);\n\t                return viewRef.rootNodes;\n\t            };\n\t        }\n\t    }\n\t    exports.compile = compile;\n\t    function Template(defaultValue) {\n\t        return function (target, key) {\n\t            var propertyDescriptor = {\n\t                set: setter(key),\n\t                get: getter(key, defaultValue),\n\t                enumerable: true,\n\t                configurable: true\n\t            };\n\t            Object.defineProperty(target, key, propertyDescriptor);\n\t        };\n\t    }\n\t    exports.Template = Template;\n\t    function setter(key) {\n\t        return function (val) {\n\t            if (val === undefined) {\n\t                return;\n\t            }\n\t            ej2_base_2.setValue(key + 'Ref', val, this);\n\t            if (typeof val !== 'string') {\n\t                val.elementRef.nativeElement._viewContainerRef = this.viewContainerRef;\n\t                val.elementRef.nativeElement.propName = key;\n\t            }\n\t            else {\n\t                if (this.saveChanges) {\n\t                    this.saveChanges(key, val, undefined);\n\t                    this.dataBind();\n\t                }\n\t            }\n\t        };\n\t    }\n\t    function getter(key, defaultValue) {\n\t        return function () {\n\t            return ej2_base_2.getValue(key + 'Ref', this) || defaultValue;\n\t        };\n\t    }\n\t    ej2_base_1.setTemplateEngine({ compile: compile });\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ])\n});\n;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"]}